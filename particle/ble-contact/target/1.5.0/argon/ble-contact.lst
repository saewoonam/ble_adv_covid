
/Users/nams/Documents/projects/covid/adafruit/ble_adv_covid/particle/ble-contact/target/1.5.0/argon/ble-contact.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003924  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7940  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  2003de20  000d7944  0001de20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000950  2003dea0  2003dea0  0002dea0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d79c4  000d79c4  000279c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d79ec  000d79ec  000279ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fa48c  00000000  00000000  000279f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000137c9  00000000  00000000  00121e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020b1e  00000000  00000000  00135645  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ca8  00000000  00000000  00156163  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005178  00000000  00000000  00158e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037e8d  00000000  00000000  0015df83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e6dd  00000000  00000000  00195e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010aa11  00000000  00000000  001c44ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000df44  00000000  00000000  002cef00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ffe0 	bl	d6ff2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f800 	bl	d703e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de20 	.word	0x2003de20
   d4048:	000d7944 	.word	0x000d7944
   d404c:	2003dea0 	.word	0x2003dea0
   d4050:	2003dea0 	.word	0x2003dea0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd53 	bl	d6b04 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7940 	.word	0x000d7940
   d4080:	000d7900 	.word	0x000d7900

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bad0 	b.w	d4628 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb01 	bl	d4690 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bcf9 	b.w	d6a88 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bec1 	b.w	d4e1c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bec7 	b.w	d4e2c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bec5 	b.w	d4e2c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN10HttpClientC1Ev>:
static const uint16_t DEFAULT_TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d40b2:	b510      	push	{r4, lr}
   d40b4:	4604      	mov	r4, r0
   d40b6:	f002 fb59 	bl	d676c <_ZN9TCPClientC1Ev>
{

}
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d40c0:	b538      	push	{r3, r4, r5, lr}
   d40c2:	4604      	mov	r4, r0
   d40c4:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d40c6:	f001 ff51 	bl	d5f6c <_ZN5Print5printEPKc>
    client.print(": ");
   d40ca:	4905      	ldr	r1, [pc, #20]	; (d40e0 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d40cc:	4620      	mov	r0, r4
   d40ce:	f001 ff4d 	bl	d5f6c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d40d2:	4629      	mov	r1, r5
   d40d4:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d40d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d40da:	f001 bf5a 	b.w	d5f92 <_ZN5Print7printlnEPKc>
   d40de:	bf00      	nop
   d40e0:	000d758e 	.word	0x000d758e

000d40e4 <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d40e4:	b538      	push	{r3, r4, r5, lr}
   d40e6:	4605      	mov	r5, r0
   d40e8:	4614      	mov	r4, r2
    client.print(aHeaderName);
   d40ea:	f001 ff3f 	bl	d5f6c <_ZN5Print5printEPKc>
    client.print(": ");
   d40ee:	490b      	ldr	r1, [pc, #44]	; (d411c <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   d40f0:	4628      	mov	r0, r5
   d40f2:	f001 ff3b 	bl	d5f6c <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d40f6:	2c00      	cmp	r4, #0
   d40f8:	da05      	bge.n	d4106 <_ZN10HttpClient10sendHeaderEPKci+0x22>
            t = print('-');
   d40fa:	212d      	movs	r1, #45	; 0x2d
   d40fc:	4628      	mov	r0, r5
   d40fe:	f001 ff39 	bl	d5f74 <_ZN5Print5printEc>
            val = -n;
   d4102:	4261      	negs	r1, r4
   d4104:	e000      	b.n	d4108 <_ZN10HttpClient10sendHeaderEPKci+0x24>
        } else {
            val = n;
   d4106:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4108:	4628      	mov	r0, r5
   d410a:	220a      	movs	r2, #10
   d410c:	f001 ff4b 	bl	d5fa6 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4110:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4116:	f001 bf30 	b.w	d5f7a <_ZN5Print7printlnEv>
   d411a:	bf00      	nop
   d411c:	000d758e 	.word	0x000d758e

000d4120 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4120:	f000 bc98 	b.w	d4a54 <HAL_Pin_Map>

000d4124 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4128:	460d      	mov	r5, r1
   d412a:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d412c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4130:	b089      	sub	sp, #36	; 0x24
   d4132:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4134:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4136:	2100      	movs	r1, #0
   d4138:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d413a:	4692      	mov	sl, r2
   d413c:	f002 f830 	bl	d61a0 <_ZNK6String6equalsEPKc>
   d4140:	f8d5 c038 	ldr.w	ip, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4144:	b960      	cbnz	r0, d4160 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
   d4146:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4148:	f1bc 0f00 	cmp.w	ip, #0
   d414c:	d002      	beq.n	d4154 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
   d414e:	fa1f f28c 	uxth.w	r2, ip
   d4152:	e000      	b.n	d4156 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
   d4154:	2250      	movs	r2, #80	; 0x50
   d4156:	2300      	movs	r3, #0
   d4158:	4620      	mov	r0, r4
   d415a:	f002 f957 	bl	d640c <_ZN9TCPClient7connectEPKctm>
   d415e:	e011      	b.n	d4184 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x60>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4160:	4b70      	ldr	r3, [pc, #448]	; (d4324 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x200>)
   d4162:	9302      	str	r3, [sp, #8]
   d4164:	f105 0e14 	add.w	lr, r5, #20
   d4168:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   d416c:	af03      	add	r7, sp, #12
   d416e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   d4170:	f8de 3000 	ldr.w	r3, [lr]
   d4174:	703b      	strb	r3, [r7, #0]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4176:	fa1f f28c 	uxth.w	r2, ip
   d417a:	2300      	movs	r3, #0
   d417c:	a902      	add	r1, sp, #8
   d417e:	4620      	mov	r0, r4
   d4180:	f002 f9c6 	bl	d6510 <_ZN9TCPClient7connectE9IPAddresstm>
   d4184:	3000      	adds	r0, #0
   d4186:	bf18      	it	ne
   d4188:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d418a:	b918      	cbnz	r0, d4194 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x70>
        client.stop();
   d418c:	4620      	mov	r0, r4
   d418e:	f002 fa39 	bl	d6604 <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
   d4192:	e0c3      	b.n	d431c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f8>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d4194:	9912      	ldr	r1, [sp, #72]	; 0x48
   d4196:	4620      	mov	r0, r4
   d4198:	f001 fee8 	bl	d5f6c <_ZN5Print5printEPKc>
    client.print(" ");
   d419c:	4962      	ldr	r1, [pc, #392]	; (d4328 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x204>)
   d419e:	4620      	mov	r0, r4
   d41a0:	f001 fee4 	bl	d5f6c <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d41a4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d41a6:	4620      	mov	r0, r4
   d41a8:	f001 fee0 	bl	d5f6c <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d41ac:	495f      	ldr	r1, [pc, #380]	; (d432c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>)
   d41ae:	4620      	mov	r0, r4
   d41b0:	f001 fedc 	bl	d5f6c <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d41b4:	495e      	ldr	r1, [pc, #376]	; (d4330 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>)
   d41b6:	4a5f      	ldr	r2, [pc, #380]	; (d4334 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
   d41b8:	4620      	mov	r0, r4
   d41ba:	f7ff ff81 	bl	d40c0 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d41be:	2100      	movs	r1, #0
   d41c0:	4628      	mov	r0, r5
   d41c2:	f001 ffed 	bl	d61a0 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d41c6:	b920      	cbnz	r0, d41d2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xae>
        sendHeader("HOST", aRequest.hostname.c_str());
   d41c8:	682a      	ldr	r2, [r5, #0]
   d41ca:	495b      	ldr	r1, [pc, #364]	; (d4338 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
   d41cc:	4620      	mov	r0, r4
   d41ce:	f7ff ff77 	bl	d40c0 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d41d2:	f105 073c 	add.w	r7, r5, #60	; 0x3c
   d41d6:	2100      	movs	r1, #0
   d41d8:	4638      	mov	r0, r7
   d41da:	f001 ffe1 	bl	d61a0 <_ZNK6String6equalsEPKc>
   d41de:	b908      	cbnz	r0, d41e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc0>
        sendHeader("Content-Length", (aRequest.body).length());
   d41e0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   d41e2:	e005      	b.n	d41f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xcc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d41e4:	4955      	ldr	r1, [pc, #340]	; (d433c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
   d41e6:	9812      	ldr	r0, [sp, #72]	; 0x48
   d41e8:	f002 ff5a 	bl	d70a0 <strcmp>
   d41ec:	4602      	mov	r2, r0
   d41ee:	b918      	cbnz	r0, d41f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd4>
        sendHeader("Content-Length", 0);
   d41f0:	4953      	ldr	r1, [pc, #332]	; (d4340 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
   d41f2:	4620      	mov	r0, r4
   d41f4:	f7ff ff76 	bl	d40e4 <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
   d41f8:	b15e      	cbz	r6, d4212 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
    {
        int i = 0;
        while (headers[i].header != NULL)
   d41fa:	6831      	ldr	r1, [r6, #0]
   d41fc:	b149      	cbz	r1, d4212 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        {
            if (headers[i].value != NULL) {
   d41fe:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
   d4200:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
   d4202:	b112      	cbz	r2, d420a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe6>
                sendHeader(headers[i].header, headers[i].value);
   d4204:	f7ff ff5c 	bl	d40c0 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d4208:	e001      	b.n	d420e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xea>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
   d420a:	f001 fec2 	bl	d5f92 <_ZN5Print7printlnEPKc>
   d420e:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
   d4210:	e7f3      	b.n	d41fa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd6>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
   d4212:	4620      	mov	r0, r4
   d4214:	f001 feb1 	bl	d5f7a <_ZN5Print7printlnEv>
    client.flush();
   d4218:	4620      	mov	r0, r4
   d421a:	f002 f81f 	bl	d625c <_ZN9TCPClient5flushEv>
   d421e:	2100      	movs	r1, #0
   d4220:	4638      	mov	r0, r7
   d4222:	f001 ffbd 	bl	d61a0 <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
   d4226:	b918      	cbnz	r0, d4230 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x10c>
        client.println(aRequest.body);
   d4228:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d422a:	4620      	mov	r0, r4
   d422c:	f001 feb1 	bl	d5f92 <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
   d4230:	f104 0b1c 	add.w	fp, r4, #28
   d4234:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4238:	2100      	movs	r1, #0
   d423a:	4658      	mov	r0, fp
   d423c:	f002 feff 	bl	d703e <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4240:	f000 fc00 	bl	d4a44 <HAL_Timer_Get_Milli_Seconds>
   d4244:	9000      	str	r0, [sp, #0]
   d4246:	f000 fbfd 	bl	d4a44 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
    bool timeout = false;
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   d424a:	f8b5 804c 	ldrh.w	r8, [r5, #76]	; 0x4c
   d424e:	f241 3388 	movw	r3, #5000	; 0x1388
    char lastChar = 0;
   d4252:	2600      	movs	r6, #0
    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
    bool timeout = false;
    uint16_t actualTimeout = aRequest.timeout == 0 ? DEFAULT_TIMEOUT : aRequest.timeout;
   d4254:	f1b8 0f00 	cmp.w	r8, #0
   d4258:	bf08      	it	eq
   d425a:	4698      	moveq	r8, r3
    char lastChar = 0;
    bool inHeaders = true;
   d425c:	f04f 0901 	mov.w	r9, #1
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
   d4260:	4635      	mov	r5, r6
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d4262:	4620      	mov	r0, r4
   d4264:	f002 f9e6 	bl	d6634 <_ZN9TCPClient9availableEv>
   d4268:	b3c0      	cbz	r0, d42dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b8>
            char c = client.read();
   d426a:	4620      	mov	r0, r4
   d426c:	f002 f88b 	bl	d6386 <_ZN9TCPClient4readEv>
   d4270:	b2c7      	uxtb	r7, r0
   d4272:	f000 fbe7 	bl	d4a44 <HAL_Timer_Get_Milli_Seconds>
   d4276:	9000      	str	r0, [sp, #0]
                #endif

                break;
            }

            if (inHeaders) {
   d4278:	f1b9 0f00 	cmp.w	r9, #0
   d427c:	d018      	beq.n	d42b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
                if ((c == '\n') && (lastChar == '\n')) {
   d427e:	2f0a      	cmp	r7, #10
   d4280:	d111      	bne.n	d42a6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
   d4282:	2e0a      	cmp	r6, #10
   d4284:	d113      	bne.n	d42ae <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18a>
                    // End of headers.  Grab the status code and reset the buffer.
                    aResponse.status = atoi(&buffer[9]);
   d4286:	f104 0025 	add.w	r0, r4, #37	; 0x25
   d428a:	f002 fe91 	bl	d6fb0 <atoi>

                    memset(&buffer[0], 0, sizeof(buffer));
                    bufferPosition = 0;
                    inHeaders = false;
   d428e:	f04f 0900 	mov.w	r9, #0
            }

            if (inHeaders) {
                if ((c == '\n') && (lastChar == '\n')) {
                    // End of headers.  Grab the status code and reset the buffer.
                    aResponse.status = atoi(&buffer[9]);
   d4292:	f8ca 0000 	str.w	r0, [sl]

                    memset(&buffer[0], 0, sizeof(buffer));
   d4296:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d429a:	2100      	movs	r1, #0
   d429c:	4658      	mov	r0, fp
   d429e:	f002 fece 	bl	d703e <memset>
                    bufferPosition = 0;
   d42a2:	464d      	mov	r5, r9
                    #ifdef LOGGING
                    Serial.print("\r\nHttpClient>\tEnd of HTTP Headers (");
                    Serial.print(aResponse.status);
                    Serial.println(")");
                    #endif
                    continue;
   d42a4:	e7dd      	b.n	d4262 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
                } else if (c != '\r') {
   d42a6:	2f0d      	cmp	r7, #13
   d42a8:	bf18      	it	ne
   d42aa:	463e      	movne	r6, r7
   d42ac:	e000      	b.n	d42b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
   d42ae:	463e      	mov	r6, r7
                    lastChar = c;
                }
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
   d42b0:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d42b4:	429d      	cmp	r5, r3
   d42b6:	d802      	bhi.n	d42be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19a>
                buffer[bufferPosition] = c;
   d42b8:	1963      	adds	r3, r4, r5
   d42ba:	771f      	strb	r7, [r3, #28]
   d42bc:	e00c      	b.n	d42d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b4>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d42be:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d42c2:	429d      	cmp	r5, r3
   d42c4:	d108      	bne.n	d42d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b4>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d42c6:	f04f 0300 	mov.w	r3, #0
   d42ca:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d42ce:	4620      	mov	r0, r4
   d42d0:	f002 f998 	bl	d6604 <_ZN9TCPClient4stopEv>
                error = true;
   d42d4:	2701      	movs	r7, #1

                #ifdef LOGGING
                Serial.println("\r\nHttpClient>\tError: Response body larger than buffer.");
                #endif
                break;
   d42d6:	e002      	b.n	d42de <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ba>
            }
            bufferPosition++;
   d42d8:	3501      	adds	r5, #1
   d42da:	e7c2      	b.n	d4262 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
   d42dc:	4607      	mov	r7, r0
   d42de:	f000 fbb1 	bl	d4a44 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > actualTimeout;
   d42e2:	9b00      	ldr	r3, [sp, #0]
   d42e4:	1ac3      	subs	r3, r0, r3
   d42e6:	9301      	str	r3, [sp, #4]

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
   d42e8:	b927      	cbnz	r7, d42f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d0>
   d42ea:	4543      	cmp	r3, r8
   d42ec:	d802      	bhi.n	d42f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d0>
            delay(200);
   d42ee:	20c8      	movs	r0, #200	; 0xc8
   d42f0:	f000 fdbc 	bl	d4e6c <delay>
        }
    } while (client.connected() && !timeout && !error);
   d42f4:	4620      	mov	r0, r4
   d42f6:	f001 ffb2 	bl	d625e <_ZN9TCPClient9connectedEv>
   d42fa:	b120      	cbz	r0, d4306 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e2>
   d42fc:	9b01      	ldr	r3, [sp, #4]
   d42fe:	4543      	cmp	r3, r8
   d4300:	d801      	bhi.n	d4306 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e2>
   d4302:	2f00      	cmp	r7, #0
   d4304:	d0ad      	beq.n	d4262 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x13e>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
   d4306:	4620      	mov	r0, r4
   d4308:	f002 f97c 	bl	d6604 <_ZN9TCPClient4stopEv>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(aResponse.status);
    #endif

    if (inHeaders) {
   d430c:	f1b9 0f00 	cmp.w	r9, #0
   d4310:	d104      	bne.n	d431c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f8>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = buffer;
   d4312:	4659      	mov	r1, fp
   d4314:	f10a 0004 	add.w	r0, sl, #4
   d4318:	f001 fefc 	bl	d6114 <_ZN6StringaSEPKc>
}
   d431c:	b009      	add	sp, #36	; 0x24
   d431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4322:	bf00      	nop
   d4324:	000d74fc 	.word	0x000d74fc
   d4328:	000d758a 	.word	0x000d758a
   d432c:	000d7208 	.word	0x000d7208
   d4330:	000d721a 	.word	0x000d721a
   d4334:	000d7214 	.word	0x000d7214
   d4338:	000d7225 	.word	0x000d7225
   d433c:	000d7239 	.word	0x000d7239
   d4340:	000d722a 	.word	0x000d722a

000d4344 <sd_ble_gap_privacy_set>:
 *                                  Otherwise, the p_device_irk pointer in privacy parameter is an invalid pointer.
 * @retval ::NRF_ERROR_INVALID_PARAM Out of range parameters are provided.
 * @retval ::NRF_ERROR_INVALID_STATE Privacy settings cannot be changed while advertising, scanning
 *                                   or creating a connection.
 */
SVCALL(SD_BLE_GAP_PRIVACY_SET, uint32_t, sd_ble_gap_privacy_set(ble_gap_privacy_params_t const *p_privacy_params));
   d4344:	df70      	svc	112	; 0x70
   d4346:	4770      	bx	lr

000d4348 <_Z14sprintf_bufferPcPhh.part.1>:
    Serial.print(buffer);
  }
}
static char m_tx_buffer[64];

void sprintf_buffer(char *buf, uint8_t *data, uint8_t length) {
   d4348:	3a01      	subs	r2, #1
   d434a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d434c:	4607      	mov	r7, r0
   d434e:	1e4d      	subs	r5, r1, #1
   d4350:	188e      	adds	r6, r1, r2
   d4352:	2400      	movs	r4, #0
  uint8_t size = 0;
  if (length>0) {
    for (uint8_t i=0; i<length; i++) {
   d4354:	42b5      	cmp	r5, r6
   d4356:	d008      	beq.n	d436a <_Z14sprintf_bufferPcPhh.part.1+0x22>
      //if (i>0) size+=sprintf(m_tx_buffer+size, "-");
      size+= sprintf(buf+size, "%02x", data[i]);
   d4358:	1938      	adds	r0, r7, r4
   d435a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d435e:	4903      	ldr	r1, [pc, #12]	; (d436c <_Z14sprintf_bufferPcPhh.part.1+0x24>)
   d4360:	f000 fd74 	bl	d4e4c <sprintf>
   d4364:	4420      	add	r0, r4
   d4366:	b2c4      	uxtb	r4, r0
   d4368:	e7f4      	b.n	d4354 <_Z14sprintf_bufferPcPhh.part.1+0xc>
   d436a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d436c:	000d723e 	.word	0x000d723e

000d4370 <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d4370:	b40e      	push	{r1, r2, r3}
   d4372:	b500      	push	{lr}
   d4374:	b08c      	sub	sp, #48	; 0x30
   d4376:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4378:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d437a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d437e:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4380:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4384:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4386:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4388:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d438a:	aa04      	add	r2, sp, #16
   d438c:	2032      	movs	r0, #50	; 0x32
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d438e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4390:	f000 fcb8 	bl	d4d04 <log_message_v>
inline void spark::Logger::error(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
    va_end(args);
}
   d4394:	b00c      	add	sp, #48	; 0x30
   d4396:	f85d eb04 	ldr.w	lr, [sp], #4
   d439a:	b003      	add	sp, #12
   d439c:	4770      	bx	lr
	...

000d43a0 <_Z6serialPc>:
    { "app", LOG_LEVEL_TRACE }, // enable all app messages
});
*/
bool serial_is_off = true;
void serial(char *buffer)
{
   d43a0:	b510      	push	{r4, lr}
   d43a2:	4604      	mov	r4, r0
  if (digitalRead(PWR)) {  // There is power, send data to serial port
   d43a4:	2022      	movs	r0, #34	; 0x22
   d43a6:	f002 fc25 	bl	d6bf4 <digitalRead>
   d43aa:	b178      	cbz	r0, d43cc <_Z6serialPc+0x2c>
    if (serial_is_off) {
   d43ac:	4b08      	ldr	r3, [pc, #32]	; (d43d0 <_Z6serialPc+0x30>)
   d43ae:	781b      	ldrb	r3, [r3, #0]
   d43b0:	b12b      	cbz	r3, d43be <_Z6serialPc+0x1e>
      Serial.begin();
   d43b2:	f002 fae7 	bl	d6984 <_Z16_fetch_usbserialv>
   d43b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d43ba:	f002 fad7 	bl	d696c <_ZN9USBSerial5beginEl>
    }
    Serial.print(buffer);
   d43be:	f002 fae1 	bl	d6984 <_Z16_fetch_usbserialv>
   d43c2:	4621      	mov	r1, r4
  }
}
   d43c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  if (digitalRead(PWR)) {  // There is power, send data to serial port
    if (serial_is_off) {
      Serial.begin();
    }
    Serial.print(buffer);
   d43c8:	f001 bdd0 	b.w	d5f6c <_ZN5Print5printEPKc>
   d43cc:	bd10      	pop	{r4, pc}
   d43ce:	bf00      	nop
   d43d0:	2003de20 	.word	0x2003de20

000d43d4 <_Z14sprintf_bufferPcPhh>:
}
static char m_tx_buffer[64];

void sprintf_buffer(char *buf, uint8_t *data, uint8_t length) {
  uint8_t size = 0;
  if (length>0) {
   d43d4:	b10a      	cbz	r2, d43da <_Z14sprintf_bufferPcPhh+0x6>
   d43d6:	f7ff bfb7 	b.w	d4348 <_Z14sprintf_bufferPcPhh.part.1>
   d43da:	4770      	bx	lr

000d43dc <_Z5blinkh>:
      size+= sprintf(buf+size, "%02x", data[i]);
    }
  }
}

void blink(uint8_t times) {
   d43dc:	b510      	push	{r4, lr}
   d43de:	4604      	mov	r4, r0
  while(times--) {
   d43e0:	b16c      	cbz	r4, d43fe <_Z5blinkh+0x22>
      digitalWrite(D7, HIGH);
   d43e2:	2101      	movs	r1, #1
   d43e4:	2007      	movs	r0, #7
   d43e6:	f002 fbec 	bl	d6bc2 <digitalWrite>
      delay(10);
   d43ea:	200a      	movs	r0, #10
   d43ec:	f000 fd3e 	bl	d4e6c <delay>
   d43f0:	3c01      	subs	r4, #1
      digitalWrite(D7, LOW);
   d43f2:	2100      	movs	r1, #0
   d43f4:	2007      	movs	r0, #7
   d43f6:	f002 fbe4 	bl	d6bc2 <digitalWrite>
   d43fa:	b2e4      	uxtb	r4, r4
    }
  }
}

void blink(uint8_t times) {
  while(times--) {
   d43fc:	e7f0      	b.n	d43e0 <_Z5blinkh+0x4>
   d43fe:	bd10      	pop	{r4, pc}

000d4400 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv>:
      digitalWrite(D7, HIGH);
      delay(10);
      digitalWrite(D7, LOW);
  }
}
void scanResultCallback(const BleScanResult *scanResult, void *context) {
   d4400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4404:	b0d9      	sub	sp, #356	; 0x164
   d4406:	4606      	mov	r6, r0
  BleUuid uuids[4];
   d4408:	a824      	add	r0, sp, #144	; 0x90
   d440a:	f000 fd91 	bl	d4f30 <_ZN8particle7BleUuidC1Ev>
   d440e:	a829      	add	r0, sp, #164	; 0xa4
   d4410:	f000 fd8e 	bl	d4f30 <_ZN8particle7BleUuidC1Ev>
   d4414:	a82e      	add	r0, sp, #184	; 0xb8
   d4416:	f000 fd8b 	bl	d4f30 <_ZN8particle7BleUuidC1Ev>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
   d441a:	f106 0708 	add.w	r7, r6, #8
      delay(10);
      digitalWrite(D7, LOW);
  }
}
void scanResultCallback(const BleScanResult *scanResult, void *context) {
  BleUuid uuids[4];
   d441e:	a833      	add	r0, sp, #204	; 0xcc
   d4420:	f000 fd86 	bl	d4f30 <_ZN8particle7BleUuidC1Ev>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
   d4424:	a924      	add	r1, sp, #144	; 0x90
   d4426:	2204      	movs	r2, #4
   d4428:	4638      	mov	r0, r7
   d442a:	f000 fedd 	bl	d51e8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
   d442e:	4680      	mov	r8, r0
  // Print out mac info
  BleAddress addr = scanResult->address;
   d4430:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4434:	ac0a      	add	r4, sp, #40	; 0x28
   d4436:	e884 0003 	stmia.w	r4, {r0, r1}
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d443a:	2500      	movs	r5, #0
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
   d443c:	f04f 0914 	mov.w	r9, #20
   d4440:	f64f 5a6f 	movw	sl, #64879	; 0xfd6f
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
  // Print out mac info
  BleAddress addr = scanResult->address;
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d4444:	4545      	cmp	r5, r8
   d4446:	da66      	bge.n	d4516 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x116>
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
   d4448:	ab24      	add	r3, sp, #144	; 0x90
   d444a:	fb09 3005 	mla	r0, r9, r5, r3
   d444e:	f000 fdac 	bl	d4faa <_ZNK8particle7BleUuid7shortedEv>
   d4452:	4550      	cmp	r0, sl
   d4454:	d15d      	bne.n	d4512 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x112>
        blink(1);
   d4456:	2001      	movs	r0, #1
   d4458:	f7ff ffc0 	bl	d43dc <_Z5blinkh>
   d445c:	f000 faf2 	bl	d4a44 <HAL_Timer_Get_Milli_Seconds>
        char buffer[128];
        char buffer2[64];
        lastSeen = millis();
   d4460:	f8df 90bc 	ldr.w	r9, [pc, #188]	; d4520 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x120>
        lastRSSI = scanResult->rssi;
   d4464:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4524 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x124>
   d4468:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
        blink(1);
        char buffer[128];
        char buffer2[64];
        lastSeen = millis();
   d446c:	f8c9 0000 	str.w	r0, [r9]
        lastRSSI = scanResult->rssi;
        // Log.trace("UUID: %x", uuids[i].shorted());
        uint8_t recv_buffer[31];
        uint8_t len = scanResult->advertisingData.length();
   d4470:	4638      	mov	r0, r7
    if( uuids[i].shorted() == CONTACT_UUID ) {
        blink(1);
        char buffer[128];
        char buffer2[64];
        lastSeen = millis();
        lastRSSI = scanResult->rssi;
   d4472:	f888 3000 	strb.w	r3, [r8]
        // Log.trace("UUID: %x", uuids[i].shorted());
        uint8_t recv_buffer[31];
        uint8_t len = scanResult->advertisingData.length();
   d4476:	f000 fde3 	bl	d5040 <_ZNK8particle18BleAdvertisingData6lengthEv>
        scanResult->advertisingData.get(recv_buffer, len);
   d447a:	b2c6      	uxtb	r6, r0
   d447c:	4632      	mov	r2, r6
   d447e:	a90c      	add	r1, sp, #48	; 0x30
        sprintf_buffer(buffer2, recv_buffer, len);
   d4480:	ad14      	add	r5, sp, #80	; 0x50
        lastSeen = millis();
        lastRSSI = scanResult->rssi;
        // Log.trace("UUID: %x", uuids[i].shorted());
        uint8_t recv_buffer[31];
        uint8_t len = scanResult->advertisingData.length();
        scanResult->advertisingData.get(recv_buffer, len);
   d4482:	4638      	mov	r0, r7
   d4484:	f000 fdcc 	bl	d5020 <_ZNK8particle18BleAdvertisingData3getEPhj>
        sprintf_buffer(buffer2, recv_buffer, len);
   d4488:	4632      	mov	r2, r6
   d448a:	a90c      	add	r1, sp, #48	; 0x30
   d448c:	4628      	mov	r0, r5
   d448e:	f7ff ffa1 	bl	d43d4 <_Z14sprintf_bufferPcPhh>
        sprintf(buffer,"%ld, %d, %02X:%02X:%02X:%02X:%02X:%02X, %s", 
                  lastSeen, lastRSSI, 
                  addr[5], addr[4], addr[3], addr[2], addr[1], addr[0],
   d4492:	2105      	movs	r1, #5
   d4494:	4620      	mov	r0, r4
                  buffer2);
   d4496:	f8d9 6000 	ldr.w	r6, [r9]
        // Log.trace("UUID: %x", uuids[i].shorted());
        uint8_t recv_buffer[31];
        uint8_t len = scanResult->advertisingData.length();
        scanResult->advertisingData.get(recv_buffer, len);
        sprintf_buffer(buffer2, recv_buffer, len);
        sprintf(buffer,"%ld, %d, %02X:%02X:%02X:%02X:%02X:%02X, %s", 
   d449a:	f998 7000 	ldrsb.w	r7, [r8]
                  lastSeen, lastRSSI, 
                  addr[5], addr[4], addr[3], addr[2], addr[1], addr[0],
   d449e:	f000 fd34 	bl	d4f0a <_ZNK8particle10BleAddressixEh>
   d44a2:	2104      	movs	r1, #4
   d44a4:	4680      	mov	r8, r0
   d44a6:	4620      	mov	r0, r4
   d44a8:	f000 fd2f 	bl	d4f0a <_ZNK8particle10BleAddressixEh>
   d44ac:	2103      	movs	r1, #3
   d44ae:	4681      	mov	r9, r0
   d44b0:	4620      	mov	r0, r4
   d44b2:	f000 fd2a 	bl	d4f0a <_ZNK8particle10BleAddressixEh>
   d44b6:	2102      	movs	r1, #2
   d44b8:	4682      	mov	sl, r0
   d44ba:	4620      	mov	r0, r4
   d44bc:	f000 fd25 	bl	d4f0a <_ZNK8particle10BleAddressixEh>
   d44c0:	2101      	movs	r1, #1
   d44c2:	4683      	mov	fp, r0
   d44c4:	4620      	mov	r0, r4
   d44c6:	f000 fd20 	bl	d4f0a <_ZNK8particle10BleAddressixEh>
   d44ca:	2100      	movs	r1, #0
   d44cc:	9009      	str	r0, [sp, #36]	; 0x24
   d44ce:	4620      	mov	r0, r4
   d44d0:	f000 fd1b 	bl	d4f0a <_ZNK8particle10BleAddressixEh>
                  buffer2);
   d44d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d44d6:	4911      	ldr	r1, [pc, #68]	; (d451c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x11c>)
   d44d8:	9005      	str	r0, [sp, #20]
   d44da:	4632      	mov	r2, r6
   d44dc:	9304      	str	r3, [sp, #16]
   d44de:	9506      	str	r5, [sp, #24]
   d44e0:	463b      	mov	r3, r7
   d44e2:	e88d 0f00 	stmia.w	sp, {r8, r9, sl, fp}
   d44e6:	a838      	add	r0, sp, #224	; 0xe0
   d44e8:	f000 fcb0 	bl	d4e4c <sprintf>
        int l = strlen(buffer);
   d44ec:	a838      	add	r0, sp, #224	; 0xe0
   d44ee:	f002 fde9 	bl	d70c4 <strlen>
   d44f2:	4604      	mov	r4, r0
        post(buffer);
   d44f4:	a838      	add	r0, sp, #224	; 0xe0
   d44f6:	f000 f953 	bl	d47a0 <_Z4postPc>
        buffer[l] = '\n';
   d44fa:	ab58      	add	r3, sp, #352	; 0x160
   d44fc:	1918      	adds	r0, r3, r4
   d44fe:	230a      	movs	r3, #10
   d4500:	f800 3c80 	strb.w	r3, [r0, #-128]
        buffer[l+1] = 0;
   d4504:	2300      	movs	r3, #0
   d4506:	f800 3c7f 	strb.w	r3, [r0, #-127]
        serial(buffer);
   d450a:	a838      	add	r0, sp, #224	; 0xe0
   d450c:	f7ff ff48 	bl	d43a0 <_Z6serialPc>
   d4510:	e001      	b.n	d4516 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x116>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
  // Print out mac info
  BleAddress addr = scanResult->address;
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d4512:	3501      	adds	r5, #1
   d4514:	e796      	b.n	d4444 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x44>
        // BLE.stopScanning();

        return;
    }
  }
}
   d4516:	b059      	add	sp, #356	; 0x164
   d4518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d451c:	000d7243 	.word	0x000d7243
   d4520:	2003deb8 	.word	0x2003deb8
   d4524:	2003df00 	.word	0x2003df00

000d4528 <_Z15gap_params_initv>:

void gap_params_init() {
   d4528:	b507      	push	{r0, r1, r2, lr}
    unsigned int err_code;
    ble_gap_privacy_params_t prvt_conf;
    memset(&prvt_conf, 0, sizeof(prvt_conf));
   d452a:	2300      	movs	r3, #0
   d452c:	9300      	str	r3, [sp, #0]
   d452e:	9301      	str	r3, [sp, #4]
    prvt_conf.privacy_mode = BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY;
   d4530:	2301      	movs	r3, #1
   d4532:	f88d 3000 	strb.w	r3, [sp]
    prvt_conf.private_addr_type = BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE ;
    prvt_conf.private_addr_cycle_s = 0;
    err_code = sd_ble_gap_privacy_set(&prvt_conf);
   d4536:	4668      	mov	r0, sp
void gap_params_init() {
    unsigned int err_code;
    ble_gap_privacy_params_t prvt_conf;
    memset(&prvt_conf, 0, sizeof(prvt_conf));
    prvt_conf.privacy_mode = BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY;
    prvt_conf.private_addr_type = BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE ;
   d4538:	2303      	movs	r3, #3
   d453a:	f88d 3001 	strb.w	r3, [sp, #1]
    prvt_conf.private_addr_cycle_s = 0;
    err_code = sd_ble_gap_privacy_set(&prvt_conf);
   d453e:	f7ff ff01 	bl	d4344 <sd_ble_gap_privacy_set>
    if (err_code !=0) {
   d4542:	4602      	mov	r2, r0
   d4544:	b118      	cbz	r0, d454e <_Z15gap_params_initv+0x26>
      Log.error("Problem with gap_params_init: %d", err_code);
   d4546:	4903      	ldr	r1, [pc, #12]	; (d4554 <_Z15gap_params_initv+0x2c>)
   d4548:	4803      	ldr	r0, [pc, #12]	; (d4558 <_Z15gap_params_initv+0x30>)
   d454a:	f7ff ff11 	bl	d4370 <_ZNK5spark6Logger5errorEPKcz>
    }
}
   d454e:	b003      	add	sp, #12
   d4550:	f85d fb04 	ldr.w	pc, [sp], #4
   d4554:	000d726e 	.word	0x000d726e
   d4558:	2003e3d8 	.word	0x2003e3d8

000d455c <_Z8calc_RPIPh>:
    sprintf_buffer(m_tx_buffer, m_enc_advdata, adv_len);
    // Log.info(m_tx_buffer);
    // serial(m_tx_buffer);
}

void calc_RPI(uint8_t *data) {
   d455c:	f100 0210 	add.w	r2, r0, #16
   d4560:	4603      	mov	r3, r0
    static uint8_t count=0;
    for(uint8_t i=0; i<16; i++) {
      data[i] = i;
   d4562:	1a19      	subs	r1, r3, r0
   d4564:	f803 1b01 	strb.w	r1, [r3], #1
    // serial(m_tx_buffer);
}

void calc_RPI(uint8_t *data) {
    static uint8_t count=0;
    for(uint8_t i=0; i<16; i++) {
   d4568:	4293      	cmp	r3, r2
   d456a:	d1fa      	bne.n	d4562 <_Z8calc_RPIPh+0x6>
      data[i] = i;
    }  
    data[15]=count++;
   d456c:	4a02      	ldr	r2, [pc, #8]	; (d4578 <_Z8calc_RPIPh+0x1c>)
   d456e:	7813      	ldrb	r3, [r2, #0]
   d4570:	73c3      	strb	r3, [r0, #15]
   d4572:	1c59      	adds	r1, r3, #1
   d4574:	7011      	strb	r1, [r2, #0]
   d4576:	4770      	bx	lr
   d4578:	2003deb4 	.word	0x2003deb4

000d457c <_Z16advertising_initv>:

NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);
*/

void advertising_init(void)
{
   d457c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    m_adv_params.p_peer_addr     = NULL;    // Undirected advertisement.
    m_adv_params.filter_policy   = BLE_GAP_ADV_FP_ANY;
    m_adv_params.interval        = NON_CONNECTABLE_ADV_INTERVAL;
    m_adv_params.duration        = 0;       // Never time out.
    */
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
   d457e:	f000 febb 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4582:	2103      	movs	r1, #3
   d4584:	f000 ff35 	bl	d53f2 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>
    BleAddress defaultAddr = BLE.address();
   d4588:	f000 feb6 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d458c:	4601      	mov	r1, r0
   d458e:	4668      	mov	r0, sp
   d4590:	f000 fed0 	bl	d5334 <_ZNK8particle14BleLocalDevice7addressEv>
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
   d4594:	f000 feb0 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4598:	4601      	mov	r1, r0
   d459a:	a802      	add	r0, sp, #8
   d459c:	f000 feca 	bl	d5334 <_ZNK8particle14BleLocalDevice7addressEv>
   d45a0:	2103      	movs	r1, #3
   d45a2:	a802      	add	r0, sp, #8
   d45a4:	f000 fcae 	bl	d4f04 <_ZN8particle10BleAddress4typeENS_14BleAddressTypeE>
    BLE.setAdvertisingInterval(250);
   d45a8:	f000 fea6 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45ac:	21fa      	movs	r1, #250	; 0xfa
   d45ae:	f000 fee0 	bl	d5372 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>
    BLE.setAdvertisingTimeout(2000);
   d45b2:	f000 fea1 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45b6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
   d45ba:	4c18      	ldr	r4, [pc, #96]	; (d461c <_Z16advertising_initv+0xa0>)
    */
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
    BleAddress defaultAddr = BLE.address();
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    BLE.setAdvertisingInterval(250);
    BLE.setAdvertisingTimeout(2000);
   d45bc:	f000 fef9 	bl	d53b2 <_ZNK8particle14BleLocalDevice21setAdvertisingTimeoutEt>
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
   d45c0:	f000 fe9a 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45c4:	a902      	add	r1, sp, #8
   d45c6:	f000 fec4 	bl	d5352 <_ZNK8particle14BleLocalDevice7txPowerEPa>
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
   d45ca:	2302      	movs	r3, #2
   d45cc:	7023      	strb	r3, [r4, #0]
    m_enc_advdata[1] = 0xA;
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
   d45ce:	70e3      	strb	r3, [r4, #3]
    m_enc_advdata[4] = 0x01;
   d45d0:	2301      	movs	r3, #1
   d45d2:	7123      	strb	r3, [r4, #4]
    m_enc_advdata[5] = 0x06;
   d45d4:	2306      	movs	r3, #6
   d45d6:	7163      	strb	r3, [r4, #5]
    BLE.setAdvertisingInterval(250);
    BLE.setAdvertisingTimeout(2000);
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
    m_enc_advdata[1] = 0xA;
   d45d8:	220a      	movs	r2, #10
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
   d45da:	2303      	movs	r3, #3
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
   d45dc:	2113      	movs	r1, #19
    BleAddress defaultAddr = BLE.address();
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    BLE.setAdvertisingInterval(250);
    BLE.setAdvertisingTimeout(2000);
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
   d45de:	f88d 0008 	strb.w	r0, [sp, #8]
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
    m_enc_advdata[1] = 0xA;
   d45e2:	7062      	strb	r2, [r4, #1]
    m_enc_advdata[2] = txPower; 
   d45e4:	70a0      	strb	r0, [r4, #2]
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
   d45e6:	226f      	movs	r2, #111	; 0x6f
    m_enc_advdata[1] = 0xA;
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
   d45e8:	71a3      	strb	r3, [r4, #6]
    m_enc_advdata[7] = 0x03;
   d45ea:	71e3      	strb	r3, [r4, #7]
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
   d45ec:	72a1      	strb	r1, [r4, #10]
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
   d45ee:	23fd      	movs	r3, #253	; 0xfd
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
   d45f0:	2116      	movs	r1, #22
    m_enc_advdata[12] = 0x6F;
    m_enc_advdata[13] = 0xFD;
    // setup RPI
    calc_RPI(m_enc_advdata+14);
   d45f2:	f104 000e 	add.w	r0, r4, #14
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
   d45f6:	7263      	strb	r3, [r4, #9]
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
    m_enc_advdata[12] = 0x6F;
    m_enc_advdata[13] = 0xFD;
   d45f8:	7363      	strb	r3, [r4, #13]
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
   d45fa:	7222      	strb	r2, [r4, #8]
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
   d45fc:	72e1      	strb	r1, [r4, #11]
    m_enc_advdata[12] = 0x6F;
   d45fe:	7322      	strb	r2, [r4, #12]
    m_enc_advdata[13] = 0xFD;
    // setup RPI
    calc_RPI(m_enc_advdata+14);
   d4600:	f7ff ffac 	bl	d455c <_Z8calc_RPIPh>
    size_t adv_len = 14+16;
    advData.set(m_enc_advdata, adv_len);
   d4604:	4621      	mov	r1, r4
   d4606:	221e      	movs	r2, #30
   d4608:	4805      	ldr	r0, [pc, #20]	; (d4620 <_Z16advertising_initv+0xa4>)
   d460a:	f000 fcf9 	bl	d5000 <_ZN8particle18BleAdvertisingData3setEPKhj>
   d460e:	221e      	movs	r2, #30
   d4610:	4621      	mov	r1, r4
   d4612:	4804      	ldr	r0, [pc, #16]	; (d4624 <_Z16advertising_initv+0xa8>)
   d4614:	f7ff fe98 	bl	d4348 <_Z14sprintf_bufferPcPhh.part.1>
    sprintf_buffer(m_tx_buffer, m_enc_advdata, adv_len);
    // Log.info(m_tx_buffer);
    // serial(m_tx_buffer);
}
   d4618:	b004      	add	sp, #16
   d461a:	bd10      	pop	{r4, pc}
   d461c:	2003debc 	.word	0x2003debc
   d4620:	2003dedc 	.word	0x2003dedc
   d4624:	2003df01 	.word	0x2003df01

000d4628 <setup>:
void setup() { Serial.begin(); pinMode(PWR, INPUT); pinMode(CHG, INPUT); } 
void loop() { float voltage = analogRead(BATT) * 0.0011224;}
*/
// setup() runs once, when the device is first turned on.

void setup() {
   d4628:	b510      	push	{r4, lr}
  pinMode(D7, OUTPUT);
   d462a:	2101      	movs	r1, #1
   d462c:	2007      	movs	r0, #7
   d462e:	f002 fab7 	bl	d6ba0 <pinMode>
  pinMode(PWR, INPUT); pinMode(CHG, INPUT);
   d4632:	2100      	movs	r1, #0
   d4634:	2022      	movs	r0, #34	; 0x22
   d4636:	f002 fab3 	bl	d6ba0 <pinMode>
  serial_is_off = true;
   d463a:	4c13      	ldr	r4, [pc, #76]	; (d4688 <setup+0x60>)
*/
// setup() runs once, when the device is first turned on.

void setup() {
  pinMode(D7, OUTPUT);
  pinMode(PWR, INPUT); pinMode(CHG, INPUT);
   d463c:	2023      	movs	r0, #35	; 0x23
   d463e:	2100      	movs	r1, #0
   d4640:	f002 faae 	bl	d6ba0 <pinMode>
  serial_is_off = true;
   d4644:	2301      	movs	r3, #1
  if (digitalRead(PWR)) {  // There is power, send data to serial port
   d4646:	2022      	movs	r0, #34	; 0x22
// setup() runs once, when the device is first turned on.

void setup() {
  pinMode(D7, OUTPUT);
  pinMode(PWR, INPUT); pinMode(CHG, INPUT);
  serial_is_off = true;
   d4648:	7023      	strb	r3, [r4, #0]
  if (digitalRead(PWR)) {  // There is power, send data to serial port
   d464a:	f002 fad3 	bl	d6bf4 <digitalRead>
   d464e:	b148      	cbz	r0, d4664 <setup+0x3c>
    if (serial_is_off) {
   d4650:	7823      	ldrb	r3, [r4, #0]
   d4652:	b13b      	cbz	r3, d4664 <setup+0x3c>
      Serial.begin();
   d4654:	f002 f996 	bl	d6984 <_Z16_fetch_usbserialv>
   d4658:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d465c:	f002 f986 	bl	d696c <_ZN9USBSerial5beginEl>
      serial_is_off = false;
   d4660:	2300      	movs	r3, #0
   d4662:	7023      	strb	r3, [r4, #0]
    }    
  }

  BLE.setScanTimeout(500);
   d4664:	f000 fe48 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4668:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   d466c:	f000 ff28 	bl	d54c0 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
  gap_params_init();
   d4670:	f7ff ff5a 	bl	d4528 <_Z15gap_params_initv>
  advertising_init();
   d4674:	f7ff ff82 	bl	d457c <_Z16advertising_initv>
  BLE.advertise(&advData);
   d4678:	f000 fe3e 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d467c:	2200      	movs	r2, #0
   d467e:	4903      	ldr	r1, [pc, #12]	; (d468c <setup+0x64>)
}
   d4680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }

  BLE.setScanTimeout(500);
  gap_params_init();
  advertising_init();
  BLE.advertise(&advData);
   d4684:	f000 befc 	b.w	d5480 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
   d4688:	2003de20 	.word	0x2003de20
   d468c:	2003dedc 	.word	0x2003dedc

000d4690 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4690:	b510      	push	{r4, lr}
   d4692:	b08a      	sub	sp, #40	; 0x28
  }
  */
//  if( (millis() > lastSeen + RE_CHECK_MS) ){
//       BLE.scan(scanResultCallback, NULL);
//   }
  BLE.scan(scanResultCallback, NULL);
   d4694:	f000 fe30 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4698:	2200      	movs	r2, #0
   d469a:	490e      	ldr	r1, [pc, #56]	; (d46d4 <loop+0x44>)
   d469c:	f000 ff2e 	bl	d54fc <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>
  Serial.println("Finished Scan");
   d46a0:	f002 f970 	bl	d6984 <_Z16_fetch_usbserialv>
   d46a4:	490c      	ldr	r1, [pc, #48]	; (d46d8 <loop+0x48>)
   d46a6:	f001 fc74 	bl	d5f92 <_ZN5Print7printlnEPKc>
  //Log.info("isadvertising: %d", BLE.advertising());
  if (not BLE.advertising()) {
   d46aa:	f000 fe25 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d46ae:	f000 ff04 	bl	d54ba <_ZNK8particle14BleLocalDevice11advertisingEv>
   d46b2:	4604      	mov	r4, r0
   d46b4:	b948      	cbnz	r0, d46ca <loop+0x3a>
      // Log.info("Check if MAC changed.");
      // Indicate MAC changing 
      gap_params_init();
   d46b6:	f7ff ff37 	bl	d4528 <_Z15gap_params_initv>
      advertising_init();
   d46ba:	f7ff ff5f 	bl	d457c <_Z16advertising_initv>
      BLE.advertise(&advData);
   d46be:	f000 fe1b 	bl	d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d46c2:	4622      	mov	r2, r4
   d46c4:	4905      	ldr	r1, [pc, #20]	; (d46dc <loop+0x4c>)
   d46c6:	f000 fedb 	bl	d5480 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  }
  BleAdvertisingData tempdata;
   d46ca:	a801      	add	r0, sp, #4
   d46cc:	f000 fd19 	bl	d5102 <_ZN8particle18BleAdvertisingDataC1Ev>
  //Log.info("advertise size: %d ", BLE.getAdvertisingData(&tempdata));
}
   d46d0:	b00a      	add	sp, #40	; 0x28
   d46d2:	bd10      	pop	{r4, pc}
   d46d4:	000d4401 	.word	0x000d4401
   d46d8:	000d728f 	.word	0x000d728f
   d46dc:	2003dedc 	.word	0x2003dedc

000d46e0 <_GLOBAL__sub_I_advData>:
   d46e0:	b510      	push	{r4, lr}
   d46e2:	f000 f9b7 	bl	d4a54 <HAL_Pin_Map>
// Stores the most recent data related to the device we're looking for
int8_t lastRSSI;
system_tick_t lastSeen = 0;

// The payload going to the cloud
String status;
   d46e6:	4c09      	ldr	r4, [pc, #36]	; (d470c <_GLOBAL__sub_I_advData+0x2c>)
 */
#include "Particle.h"
#include "config.h"
extern int post(char *);

BleAdvertisingData advData;
   d46e8:	4809      	ldr	r0, [pc, #36]	; (d4710 <_GLOBAL__sub_I_advData+0x30>)
   d46ea:	f000 fd0a 	bl	d5102 <_ZN8particle18BleAdvertisingDataC1Ev>

// For debugging only
// SYSTEM_MODE(MANUAL);

// Enable thread
SYSTEM_THREAD(ENABLED);
   d46ee:	2100      	movs	r1, #0
   d46f0:	2001      	movs	r0, #1
   d46f2:	f000 fb1f 	bl	d4d34 <system_thread_set_state>
// Stores the most recent data related to the device we're looking for
int8_t lastRSSI;
system_tick_t lastSeen = 0;

// The payload going to the cloud
String status;
   d46f6:	4907      	ldr	r1, [pc, #28]	; (d4714 <_GLOBAL__sub_I_advData+0x34>)
   d46f8:	4620      	mov	r0, r4
   d46fa:	f001 fce9 	bl	d60d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d46fe:	4620      	mov	r0, r4
   d4700:	4a05      	ldr	r2, [pc, #20]	; (d4718 <_GLOBAL__sub_I_advData+0x38>)
   d4702:	4906      	ldr	r1, [pc, #24]	; (d471c <_GLOBAL__sub_I_advData+0x3c>)
      advertising_init();
      BLE.advertise(&advData);
  }
  BleAdvertisingData tempdata;
  //Log.info("advertise size: %d ", BLE.getAdvertisingData(&tempdata));
}
   d4704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Stores the most recent data related to the device we're looking for
int8_t lastRSSI;
system_tick_t lastSeen = 0;

// The payload going to the cloud
String status;
   d4708:	f002 bae8 	b.w	d6cdc <__aeabi_atexit>
   d470c:	2003dea4 	.word	0x2003dea4
   d4710:	2003dedc 	.word	0x2003dedc
   d4714:	000d7213 	.word	0x000d7213
   d4718:	2003dea0 	.word	0x2003dea0
   d471c:	000d6043 	.word	0x000d6043

000d4720 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d4720:	b510      	push	{r4, lr}
   d4722:	4604      	mov	r4, r0
   d4724:	3004      	adds	r0, #4
   d4726:	f001 fc8c 	bl	d6042 <_ZN6StringD1Ev>
   d472a:	4620      	mov	r0, r4
   d472c:	bd10      	pop	{r4, pc}

000d472e <_ZN14http_request_tD1Ev>:
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
  uint16_t timeout;
} http_request_t;
   d472e:	b510      	push	{r4, lr}
   d4730:	4604      	mov	r4, r0
   d4732:	303c      	adds	r0, #60	; 0x3c
   d4734:	f001 fc85 	bl	d6042 <_ZN6StringD1Ev>
   d4738:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d473c:	f001 fc81 	bl	d6042 <_ZN6StringD1Ev>
   d4740:	4620      	mov	r0, r4
   d4742:	f001 fc7e 	bl	d6042 <_ZN6StringD1Ev>
   d4746:	4620      	mov	r0, r4
   d4748:	bd10      	pop	{r4, pc}
	...

000d474c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d474c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d474e:	6984      	ldr	r4, [r0, #24]
   d4750:	4b0a      	ldr	r3, [pc, #40]	; (d477c <_ZN9TCPClientD1Ev+0x30>)
   d4752:	6003      	str	r3, [r0, #0]
   d4754:	4605      	mov	r5, r0
   d4756:	b17c      	cbz	r4, d4778 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4758:	6863      	ldr	r3, [r4, #4]
   d475a:	3b01      	subs	r3, #1
   d475c:	6063      	str	r3, [r4, #4]
   d475e:	b95b      	cbnz	r3, d4778 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4760:	6823      	ldr	r3, [r4, #0]
   d4762:	4620      	mov	r0, r4
   d4764:	689b      	ldr	r3, [r3, #8]
   d4766:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4768:	68a3      	ldr	r3, [r4, #8]
   d476a:	3b01      	subs	r3, #1
   d476c:	60a3      	str	r3, [r4, #8]
   d476e:	b91b      	cbnz	r3, d4778 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4770:	6823      	ldr	r3, [r4, #0]
   d4772:	4620      	mov	r0, r4
   d4774:	68db      	ldr	r3, [r3, #12]
   d4776:	4798      	blx	r3
   d4778:	4628      	mov	r0, r5
   d477a:	bd38      	pop	{r3, r4, r5, pc}
   d477c:	000d7680 	.word	0x000d7680

000d4780 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
   d4780:	b510      	push	{r4, lr}
   d4782:	4604      	mov	r4, r0
   d4784:	f7ff ffe2 	bl	d474c <_ZN9TCPClientD1Ev>
   d4788:	4620      	mov	r0, r4
   d478a:	bd10      	pop	{r4, pc}

000d478c <_ZN9TCPClientD0Ev>:
   d478c:	b510      	push	{r4, lr}
   d478e:	4604      	mov	r4, r0
   d4790:	f7ff ffdc 	bl	d474c <_ZN9TCPClientD1Ev>
   d4794:	4620      	mov	r0, r4
   d4796:	211c      	movs	r1, #28
   d4798:	f002 faa5 	bl	d6ce6 <_ZdlPvj>
   d479c:	4620      	mov	r0, r4
   d479e:	bd10      	pop	{r4, pc}

000d47a0 <_Z4postPc>:
http_response_t response;


    
int post(char *message)
{
   d47a0:	b530      	push	{r4, r5, lr}
    request.hostname = "192.168.0.106";
   d47a2:	4c1c      	ldr	r4, [pc, #112]	; (d4814 <_Z4postPc+0x74>)
   d47a4:	491c      	ldr	r1, [pc, #112]	; (d4818 <_Z4postPc+0x78>)
http_response_t response;


    
int post(char *message)
{
   d47a6:	b08b      	sub	sp, #44	; 0x2c
   d47a8:	4605      	mov	r5, r0
    request.hostname = "192.168.0.106";
   d47aa:	4620      	mov	r0, r4
   d47ac:	f001 fcb2 	bl	d6114 <_ZN6StringaSEPKc>
    request.port = 8000;
   d47b0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    request.path = "/data";
   d47b4:	4919      	ldr	r1, [pc, #100]	; (d481c <_Z4postPc+0x7c>)

    
int post(char *message)
{
    request.hostname = "192.168.0.106";
    request.port = 8000;
   d47b6:	63a3      	str	r3, [r4, #56]	; 0x38
    request.path = "/data";
   d47b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d47bc:	f001 fcaa 	bl	d6114 <_ZN6StringaSEPKc>
    //sprintf(request.body, "{\"msg\":\"%s\"}", message);
    // request.body = "{\"key\":\"value\"}";
    String msg = String(message);
   d47c0:	4629      	mov	r1, r5
   d47c2:	a802      	add	r0, sp, #8
   d47c4:	f001 fc84 	bl	d60d0 <_ZN6StringC1EPK19__FlashStringHelper>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d47c8:	4915      	ldr	r1, [pc, #84]	; (d4820 <_Z4postPc+0x80>)
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
    }

    void put(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_PUT);
   d47ca:	4d16      	ldr	r5, [pc, #88]	; (d4824 <_Z4postPc+0x84>)
   d47cc:	a806      	add	r0, sp, #24
   d47ce:	f001 fc7f 	bl	d60d0 <_ZN6StringC1EPK19__FlashStringHelper>
    request.body = "{\"key\":\"" + msg + "\"}";
   d47d2:	a902      	add	r1, sp, #8
   d47d4:	a806      	add	r0, sp, #24
   d47d6:	f001 fcc5 	bl	d6164 <_ZplRK15StringSumHelperRK6String>
   d47da:	4913      	ldr	r1, [pc, #76]	; (d4828 <_Z4postPc+0x88>)
   d47dc:	f001 fcce 	bl	d617c <_ZplRK15StringSumHelperPKc>
   d47e0:	4601      	mov	r1, r0
   d47e2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d47e6:	f001 fc86 	bl	d60f6 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d47ea:	a806      	add	r0, sp, #24
   d47ec:	f001 fc29 	bl	d6042 <_ZN6StringD1Ev>
   d47f0:	4b0e      	ldr	r3, [pc, #56]	; (d482c <_Z4postPc+0x8c>)
   d47f2:	9300      	str	r3, [sp, #0]
   d47f4:	4621      	mov	r1, r4
   d47f6:	4b0e      	ldr	r3, [pc, #56]	; (d4830 <_Z4postPc+0x90>)
   d47f8:	480e      	ldr	r0, [pc, #56]	; (d4834 <_Z4postPc+0x94>)
   d47fa:	462a      	mov	r2, r5
   d47fc:	f7ff fc92 	bl	d4124 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>

    http.put(request, response, headers);
    // Serial.print("Application>\tResponse status: ");
    // Serial.println(response.status);
    if (response.status==200) return 0;
   d4800:	682c      	ldr	r4, [r5, #0]
    request.hostname = "192.168.0.106";
    request.port = 8000;
    request.path = "/data";
    //sprintf(request.body, "{\"msg\":\"%s\"}", message);
    // request.body = "{\"key\":\"value\"}";
    String msg = String(message);
   d4802:	a802      	add	r0, sp, #8
    request.body = "{\"key\":\"" + msg + "\"}";

    http.put(request, response, headers);
    // Serial.print("Application>\tResponse status: ");
    // Serial.println(response.status);
    if (response.status==200) return 0;
   d4804:	3cc8      	subs	r4, #200	; 0xc8
   d4806:	bf18      	it	ne
   d4808:	2401      	movne	r4, #1
    request.hostname = "192.168.0.106";
    request.port = 8000;
    request.path = "/data";
    //sprintf(request.body, "{\"msg\":\"%s\"}", message);
    // request.body = "{\"key\":\"value\"}";
    String msg = String(message);
   d480a:	f001 fc1a 	bl	d6042 <_ZN6StringD1Ev>
    // Serial.println(response.body);

    // nextTime = millis() + 10000;
    // . There was an error
    return 1;
}
   d480e:	4620      	mov	r0, r4
   d4810:	b00b      	add	sp, #44	; 0x2c
   d4812:	bd30      	pop	{r4, r5, pc}
   d4814:	2003e374 	.word	0x2003e374
   d4818:	000d729d 	.word	0x000d729d
   d481c:	000d72ab 	.word	0x000d72ab
   d4820:	000d72b1 	.word	0x000d72b1
   d4824:	2003e360 	.word	0x2003e360
   d4828:	000d72ba 	.word	0x000d72ba
   d482c:	000d72bd 	.word	0x000d72bd
   d4830:	2003de24 	.word	0x2003de24
   d4834:	2003df44 	.word	0x2003df44

000d4838 <_GLOBAL__sub_I_http>:
   d4838:	b570      	push	{r4, r5, r6, lr}
#include "application.h"
#include "HttpClient.h"
/**
* Declaring the variables.
*/
HttpClient http;
   d483a:	4c17      	ldr	r4, [pc, #92]	; (d4898 <_GLOBAL__sub_I_http+0x60>)
   d483c:	4e17      	ldr	r6, [pc, #92]	; (d489c <_GLOBAL__sub_I_http+0x64>)
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
   d483e:	4d18      	ldr	r5, [pc, #96]	; (d48a0 <_GLOBAL__sub_I_http+0x68>)
   d4840:	4620      	mov	r0, r4
   d4842:	f7ff fc36 	bl	d40b2 <_ZN10HttpClientC1Ev>
   d4846:	4620      	mov	r0, r4
   d4848:	4c16      	ldr	r4, [pc, #88]	; (d48a4 <_GLOBAL__sub_I_http+0x6c>)
   d484a:	4917      	ldr	r1, [pc, #92]	; (d48a8 <_GLOBAL__sub_I_http+0x70>)
   d484c:	4632      	mov	r2, r6
   d484e:	f002 fa45 	bl	d6cdc <__aeabi_atexit>
   d4852:	4629      	mov	r1, r5
   d4854:	4620      	mov	r0, r4
   d4856:	f001 fc3b 	bl	d60d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d485a:	f104 0010 	add.w	r0, r4, #16
   d485e:	f001 f9a7 	bl	d5bb0 <_ZN9IPAddressC1Ev>
   d4862:	4629      	mov	r1, r5
   d4864:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4868:	f001 fc32 	bl	d60d0 <_ZN6StringC1EPK19__FlashStringHelper>
   d486c:	4629      	mov	r1, r5
   d486e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4872:	f001 fc2d 	bl	d60d0 <_ZN6StringC1EPK19__FlashStringHelper>
    //  { "Accept" , "application/json" },
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};

http_request_t request;
   d4876:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d4878:	4c0c      	ldr	r4, [pc, #48]	; (d48ac <_GLOBAL__sub_I_http+0x74>)
   d487a:	490d      	ldr	r1, [pc, #52]	; (d48b0 <_GLOBAL__sub_I_http+0x78>)
   d487c:	4632      	mov	r2, r6
   d487e:	f002 fa2d 	bl	d6cdc <__aeabi_atexit>
   d4882:	4629      	mov	r1, r5
   d4884:	1d20      	adds	r0, r4, #4
   d4886:	f001 fc23 	bl	d60d0 <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   d488a:	4632      	mov	r2, r6
   d488c:	4620      	mov	r0, r4
   d488e:	4909      	ldr	r1, [pc, #36]	; (d48b4 <_GLOBAL__sub_I_http+0x7c>)
    // Serial.println(response.body);

    // nextTime = millis() + 10000;
    // . There was an error
    return 1;
}
   d4890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};

http_request_t request;
http_response_t response;
   d4894:	f002 ba22 	b.w	d6cdc <__aeabi_atexit>
   d4898:	2003df44 	.word	0x2003df44
   d489c:	2003dea0 	.word	0x2003dea0
   d48a0:	000d7213 	.word	0x000d7213
   d48a4:	2003e374 	.word	0x2003e374
   d48a8:	000d4781 	.word	0x000d4781
   d48ac:	2003e360 	.word	0x2003e360
   d48b0:	000d472f 	.word	0x000d472f
   d48b4:	000d4721 	.word	0x000d4721

000d48b8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <hal_ble_stack_init+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	689b      	ldr	r3, [r3, #8]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030278 	.word	0x00030278

000d48c8 <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <hal_ble_gap_get_device_address+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	69db      	ldr	r3, [r3, #28]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030278 	.word	0x00030278

000d48d8 <hal_ble_gap_get_tx_power>:
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <hal_ble_gap_get_tx_power+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030278 	.word	0x00030278

000d48e8 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <hal_ble_gap_set_advertising_parameters+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030278 	.word	0x00030278

000d48f8 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <hal_ble_gap_get_advertising_parameters+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030278 	.word	0x00030278

000d4908 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <hal_ble_gap_set_advertising_data+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030278 	.word	0x00030278

000d4918 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <hal_ble_gap_set_scan_response_data+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030278 	.word	0x00030278

000d4928 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <hal_ble_gap_start_advertising+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030278 	.word	0x00030278

000d4938 <hal_ble_gap_is_advertising>:
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <hal_ble_gap_is_advertising+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030278 	.word	0x00030278

000d4948 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <hal_ble_gap_set_scan_parameters+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030278 	.word	0x00030278

000d4958 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <hal_ble_gap_get_scan_parameters+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030278 	.word	0x00030278

000d4968 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <hal_ble_gap_start_scan+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030278 	.word	0x00030278

000d4978 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b03      	ldr	r3, [pc, #12]	; (d4988 <hal_ble_gap_stop_scan+0x10>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d4982:	9301      	str	r3, [sp, #4]
   d4984:	bd08      	pop	{r3, pc}
   d4986:	0000      	.short	0x0000
   d4988:	00030278 	.word	0x00030278

000d498c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b03      	ldr	r3, [pc, #12]	; (d499c <hal_ble_gap_disconnect+0x10>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4996:	9301      	str	r3, [sp, #4]
   d4998:	bd08      	pop	{r3, pc}
   d499a:	0000      	.short	0x0000
   d499c:	00030278 	.word	0x00030278

000d49a0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b03      	ldr	r3, [pc, #12]	; (d49b0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d49aa:	9301      	str	r3, [sp, #4]
   d49ac:	bd08      	pop	{r3, pc}
   d49ae:	0000      	.short	0x0000
   d49b0:	00030278 	.word	0x00030278

000d49b4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <os_thread_is_current+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	689b      	ldr	r3, [r3, #8]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030248 	.word	0x00030248

000d49c4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <os_thread_join+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	691b      	ldr	r3, [r3, #16]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030248 	.word	0x00030248

000d49d4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <os_thread_cleanup+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	695b      	ldr	r3, [r3, #20]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030248 	.word	0x00030248

000d49e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <os_mutex_recursive_create+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030248 	.word	0x00030248

000d49f4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <os_mutex_recursive_destroy+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030248 	.word	0x00030248

000d4a04 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <os_mutex_recursive_lock+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030248 	.word	0x00030248

000d4a14 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <os_mutex_recursive_unlock+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030248 	.word	0x00030248

000d4a24 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <HAL_RNG_GetRandomNumber+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	685b      	ldr	r3, [r3, #4]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030218 	.word	0x00030218

000d4a34 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <HAL_Delay_Microseconds+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	68db      	ldr	r3, [r3, #12]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030218 	.word	0x00030218

000d4a44 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	695b      	ldr	r3, [r3, #20]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030218 	.word	0x00030218

000d4a54 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <HAL_Pin_Map+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	681b      	ldr	r3, [r3, #0]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003022c 	.word	0x0003022c

000d4a64 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <HAL_Pin_Mode+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	689b      	ldr	r3, [r3, #8]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003022c 	.word	0x0003022c

000d4a74 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_Get_Pin_Mode+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	68db      	ldr	r3, [r3, #12]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003022c 	.word	0x0003022c

000d4a84 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_GPIO_Write+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	691b      	ldr	r3, [r3, #16]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003022c 	.word	0x0003022c

000d4a94 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_GPIO_Read+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	695b      	ldr	r3, [r3, #20]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003022c 	.word	0x0003022c

000d4aa4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_I2C_Write_Data+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	6a1b      	ldr	r3, [r3, #32]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030228 	.word	0x00030228

000d4ab4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_I2C_Available_Data+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030228 	.word	0x00030228

000d4ac4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_I2C_Read_Data+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030228 	.word	0x00030228

000d4ad4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_I2C_Peek_Data+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030228 	.word	0x00030228

000d4ae4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_I2C_Flush_Data+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030228 	.word	0x00030228

000d4af4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_I2C_Is_Enabled+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030228 	.word	0x00030228

000d4b04 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_I2C_Init+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030228 	.word	0x00030228

000d4b14 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <if_index_to_name+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	695b      	ldr	r3, [r3, #20]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	0003026c 	.word	0x0003026c

000d4b24 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <inet_inet_ntop+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	695b      	ldr	r3, [r3, #20]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030264 	.word	0x00030264

000d4b34 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <inet_htonl+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6a1b      	ldr	r3, [r3, #32]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030264 	.word	0x00030264

000d4b44 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <inet_htons+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030264 	.word	0x00030264

000d4b54 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <netdb_freeaddrinfo+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	689b      	ldr	r3, [r3, #8]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030268 	.word	0x00030268

000d4b64 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <netdb_getaddrinfo+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	68db      	ldr	r3, [r3, #12]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030268 	.word	0x00030268

000d4b74 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <sock_setsockopt+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	699b      	ldr	r3, [r3, #24]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030238 	.word	0x00030238

000d4b84 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <sock_close+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	69db      	ldr	r3, [r3, #28]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030238 	.word	0x00030238

000d4b94 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <sock_connect+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6a1b      	ldr	r3, [r3, #32]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030238 	.word	0x00030238

000d4ba4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <sock_recv+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030238 	.word	0x00030238

000d4bb4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <sock_send+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030238 	.word	0x00030238

000d4bc4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <sock_socket+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	00030238 	.word	0x00030238

000d4bd4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <HAL_SPI_Init+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	69db      	ldr	r3, [r3, #28]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030230 	.word	0x00030230

000d4be4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_SPI_Is_Enabled+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	6a1b      	ldr	r3, [r3, #32]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030230 	.word	0x00030230

000d4bf4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_USART_Init+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	681b      	ldr	r3, [r3, #0]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003023c 	.word	0x0003023c

000d4c04 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_USART_Write_Data+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	68db      	ldr	r3, [r3, #12]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003023c 	.word	0x0003023c

000d4c14 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <HAL_USART_Available_Data+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	691b      	ldr	r3, [r3, #16]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	0003023c 	.word	0x0003023c

000d4c24 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <HAL_USART_Read_Data+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	695b      	ldr	r3, [r3, #20]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	0003023c 	.word	0x0003023c

000d4c34 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <HAL_USART_Peek_Data+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	699b      	ldr	r3, [r3, #24]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	0003023c 	.word	0x0003023c

000d4c44 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <HAL_USART_Flush_Data+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	69db      	ldr	r3, [r3, #28]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	0003023c 	.word	0x0003023c

000d4c54 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <HAL_USART_Is_Enabled+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	6a1b      	ldr	r3, [r3, #32]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	0003023c 	.word	0x0003023c

000d4c64 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <HAL_USART_Available_Data_For_Write+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	0003023c 	.word	0x0003023c

000d4c74 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <HAL_USB_USART_Init+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	681b      	ldr	r3, [r3, #0]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	0003024c 	.word	0x0003024c

000d4c84 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <HAL_USB_USART_Begin+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	685b      	ldr	r3, [r3, #4]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	0003024c 	.word	0x0003024c

000d4c94 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <HAL_USB_USART_Available_Data+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	691b      	ldr	r3, [r3, #16]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	0003024c 	.word	0x0003024c

000d4ca4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	695b      	ldr	r3, [r3, #20]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	0003024c 	.word	0x0003024c

000d4cb4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <HAL_USB_USART_Receive_Data+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	699b      	ldr	r3, [r3, #24]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	0003024c 	.word	0x0003024c

000d4cc4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <HAL_USB_USART_Send_Data+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	69db      	ldr	r3, [r3, #28]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	0003024c 	.word	0x0003024c

000d4cd4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <HAL_USB_USART_Flush_Data+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	6a1b      	ldr	r3, [r3, #32]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	0003024c 	.word	0x0003024c

000d4ce4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <panic_+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030260 	.word	0x00030260

000d4cf4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <log_message+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030260 	.word	0x00030260

000d4d04 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <log_message_v+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030260 	.word	0x00030260

000d4d14 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <set_system_mode+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	685b      	ldr	r3, [r3, #4]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030220 	.word	0x00030220

000d4d24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <system_delay_ms+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	695b      	ldr	r3, [r3, #20]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030220 	.word	0x00030220

000d4d34 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <system_thread_set_state+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030220 	.word	0x00030220

000d4d44 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b03      	ldr	r3, [pc, #12]	; (d4d54 <system_ctrl_set_app_request_handler+0x10>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4d4e:	9301      	str	r3, [sp, #4]
   d4d50:	bd08      	pop	{r3, pc}
   d4d52:	0000      	.short	0x0000
   d4d54:	00030220 	.word	0x00030220

000d4d58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b03      	ldr	r3, [pc, #12]	; (d4d68 <system_ctrl_set_result+0x10>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4d62:	9301      	str	r3, [sp, #4]
   d4d64:	bd08      	pop	{r3, pc}
   d4d66:	0000      	.short	0x0000
   d4d68:	00030220 	.word	0x00030220

000d4d6c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	00030244 	.word	0x00030244

000d4d7c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <network_connect+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	685b      	ldr	r3, [r3, #4]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030240 	.word	0x00030240

000d4d8c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <network_connecting+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	689b      	ldr	r3, [r3, #8]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030240 	.word	0x00030240

000d4d9c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <network_disconnect+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	68db      	ldr	r3, [r3, #12]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030240 	.word	0x00030240

000d4dac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <network_ready+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	691b      	ldr	r3, [r3, #16]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030240 	.word	0x00030240

000d4dbc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <network_on+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	695b      	ldr	r3, [r3, #20]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030240 	.word	0x00030240

000d4dcc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <network_off+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	699b      	ldr	r3, [r3, #24]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030240 	.word	0x00030240

000d4ddc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <network_listen+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	69db      	ldr	r3, [r3, #28]
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030240 	.word	0x00030240

000d4dec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <network_listening+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	6a1b      	ldr	r3, [r3, #32]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030240 	.word	0x00030240

000d4dfc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <network_set_listen_timeout+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030240 	.word	0x00030240

000d4e0c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <network_get_listen_timeout+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030240 	.word	0x00030240

000d4e1c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <malloc+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	681b      	ldr	r3, [r3, #0]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	0003021c 	.word	0x0003021c

000d4e2c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <free+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	685b      	ldr	r3, [r3, #4]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	0003021c 	.word	0x0003021c

000d4e3c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <realloc+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	689b      	ldr	r3, [r3, #8]
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	0003021c 	.word	0x0003021c

000d4e4c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <sprintf+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	68db      	ldr	r3, [r3, #12]
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	0003021c 	.word	0x0003021c

000d4e5c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <__errno+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	0003021c 	.word	0x0003021c

000d4e6c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4e6c:	2100      	movs	r1, #0
   d4e6e:	f7ff bf59 	b.w	d4d24 <system_delay_ms>

000d4e72 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4e72:	4770      	bx	lr

000d4e74 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4e74:	2000      	movs	r0, #0
   d4e76:	4770      	bx	lr

000d4e78 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4e78:	b510      	push	{r4, lr}
   d4e7a:	2114      	movs	r1, #20
   d4e7c:	4604      	mov	r4, r0
   d4e7e:	f001 ff32 	bl	d6ce6 <_ZdlPvj>
   d4e82:	4620      	mov	r0, r4
   d4e84:	bd10      	pop	{r4, pc}

000d4e86 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4e86:	f7ff b908 	b.w	d409a <_ZdlPv>

000d4e8a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4e8a:	b510      	push	{r4, lr}
   d4e8c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4e8e:	6800      	ldr	r0, [r0, #0]
   d4e90:	b108      	cbz	r0, d4e96 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4e92:	f7ff fdaf 	bl	d49f4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4e96:	4620      	mov	r0, r4
   d4e98:	bd10      	pop	{r4, pc}
	...

000d4e9c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4e9c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4e9e:	200a      	movs	r0, #10
   d4ea0:	4a02      	ldr	r2, [pc, #8]	; (d4eac <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d4ea2:	2100      	movs	r1, #0
   d4ea4:	f7ff ff1e 	bl	d4ce4 <panic_>
    }
}
   d4ea8:	bd08      	pop	{r3, pc}
   d4eaa:	bf00      	nop
   d4eac:	000d4a35 	.word	0x000d4a35

000d4eb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4eb0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4eb2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4eb4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4eb6:	689b      	ldr	r3, [r3, #8]
   d4eb8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4eba:	68a3      	ldr	r3, [r4, #8]
   d4ebc:	3b01      	subs	r3, #1
   d4ebe:	60a3      	str	r3, [r4, #8]
   d4ec0:	b92b      	cbnz	r3, d4ece <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4ec2:	6823      	ldr	r3, [r4, #0]
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4ecc:	4718      	bx	r3
   d4ece:	bd10      	pop	{r4, pc}

000d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4ed0:	b510      	push	{r4, lr}
            locked_(false) {
   d4ed2:	2300      	movs	r3, #0
   d4ed4:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4ed6:	4b04      	ldr	r3, [pc, #16]	; (d4ee8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4ed8:	4604      	mov	r4, r0
   d4eda:	6818      	ldr	r0, [r3, #0]
   d4edc:	f7ff fd92 	bl	d4a04 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4ee0:	2301      	movs	r3, #1
   d4ee2:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	bd10      	pop	{r4, pc}
   d4ee8:	2003e3cc 	.word	0x2003e3cc

000d4eec <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4eec:	b510      	push	{r4, lr}
        if (locked_) {
   d4eee:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4ef0:	4604      	mov	r4, r0
        if (locked_) {
   d4ef2:	b11b      	cbz	r3, d4efc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4ef4:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4ef6:	6818      	ldr	r0, [r3, #0]
   d4ef8:	f7ff fd8c 	bl	d4a14 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4efc:	4620      	mov	r0, r4
   d4efe:	bd10      	pop	{r4, pc}
   d4f00:	2003e3cc 	.word	0x2003e3cc

000d4f04 <_ZN8particle10BleAddress4typeENS_14BleAddressTypeE>:
BleAddress::BleAddress(const String& address, BleAddressType type) {
    set(address, type);
}

int BleAddress::type(BleAddressType type) {
    address_.addr_type = static_cast<ble_sig_addr_type_t>(type);
   d4f04:	7181      	strb	r1, [r0, #6]
    return SYSTEM_ERROR_NONE;
}
   d4f06:	2000      	movs	r0, #0
   d4f08:	4770      	bx	lr

000d4f0a <_ZNK8particle10BleAddressixEh>:
    buf[len++] = '\0';
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
   d4f0a:	2905      	cmp	r1, #5
        return 0;
    }
    return address_.addr[i];
   d4f0c:	bf94      	ite	ls
   d4f0e:	5c40      	ldrbls	r0, [r0, r1]
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
        return 0;
   d4f10:	2000      	movhi	r0, #0
    }
    return address_.addr[i];
}
   d4f12:	4770      	bx	lr

000d4f14 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4f14:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4f16:	7982      	ldrb	r2, [r0, #6]
   d4f18:	798b      	ldrb	r3, [r1, #6]
   d4f1a:	429a      	cmp	r2, r3
   d4f1c:	d106      	bne.n	d4f2c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4f1e:	2206      	movs	r2, #6
   d4f20:	f002 f858 	bl	d6fd4 <memcmp>
   d4f24:	fab0 f080 	clz	r0, r0
   d4f28:	0940      	lsrs	r0, r0, #5
   d4f2a:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4f2c:	2000      	movs	r0, #0
}
   d4f2e:	bd08      	pop	{r3, pc}

000d4f30 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4f30:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d4f32:	2301      	movs	r3, #1
   d4f34:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4f36:	4b05      	ldr	r3, [pc, #20]	; (d4f4c <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4f38:	4602      	mov	r2, r0
   d4f3a:	f103 0110 	add.w	r1, r3, #16
   d4f3e:	f853 4b04 	ldr.w	r4, [r3], #4
   d4f42:	f842 4b04 	str.w	r4, [r2], #4
   d4f46:	428b      	cmp	r3, r1
   d4f48:	d1f9      	bne.n	d4f3e <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4f4a:	bd10      	pop	{r4, pc}
   d4f4c:	000d7488 	.word	0x000d7488

000d4f50 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4f50:	b510      	push	{r4, lr}
    if (uuid128) {
   d4f52:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4f54:	4604      	mov	r4, r0
    if (uuid128) {
   d4f56:	b1b9      	cbz	r1, d4f88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d4f58:	2a01      	cmp	r2, #1
   d4f5a:	d109      	bne.n	d4f70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4f5c:	4603      	mov	r3, r0
   d4f5e:	f101 0210 	add.w	r2, r1, #16
   d4f62:	f851 0b04 	ldr.w	r0, [r1], #4
   d4f66:	f843 0b04 	str.w	r0, [r3], #4
   d4f6a:	4291      	cmp	r1, r2
   d4f6c:	d1f9      	bne.n	d4f62 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d4f6e:	e008      	b.n	d4f82 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d4f70:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d4f72:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d4f74:	5c98      	ldrb	r0, [r3, r2]
   d4f76:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4f7a:	3a01      	subs	r2, #1
   d4f7c:	b2d2      	uxtb	r2, r2
   d4f7e:	2aff      	cmp	r2, #255	; 0xff
   d4f80:	d1f8      	bne.n	d4f74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d4f82:	2301      	movs	r3, #1
   d4f84:	6123      	str	r3, [r4, #16]
   d4f86:	e002      	b.n	d4f8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4f88:	2210      	movs	r2, #16
   d4f8a:	f002 f858 	bl	d703e <memset>
    }
}
   d4f8e:	4620      	mov	r0, r4
   d4f90:	bd10      	pop	{r4, pc}

000d4f92 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d4f92:	b538      	push	{r3, r4, r5, lr}
   d4f94:	4604      	mov	r4, r0
   d4f96:	460d      	mov	r5, r1
        : BleUuid() {
   d4f98:	f7ff ffca 	bl	d4f30 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d4f9c:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4f9e:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4fa0:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d4fa2:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4fa4:	7365      	strb	r5, [r4, #13]
}
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	bd38      	pop	{r3, r4, r5, pc}

000d4faa <_ZNK8particle7BleUuid7shortedEv>:
    }
    return uuid;
}

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4faa:	7b42      	ldrb	r2, [r0, #13]
   d4fac:	7b00      	ldrb	r0, [r0, #12]
}
   d4fae:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4fb2:	4770      	bx	lr

000d4fb4 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4fb4:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4fb6:	690b      	ldr	r3, [r1, #16]
   d4fb8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4fba:	f101 0210 	add.w	r2, r1, #16
   d4fbe:	4603      	mov	r3, r0
   d4fc0:	f851 4b04 	ldr.w	r4, [r1], #4
   d4fc4:	f843 4b04 	str.w	r4, [r3], #4
   d4fc8:	4291      	cmp	r1, r2
   d4fca:	d1f9      	bne.n	d4fc0 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d4fcc:	bd10      	pop	{r4, pc}

000d4fce <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4fce:	b510      	push	{r4, lr}
   d4fd0:	b086      	sub	sp, #24
   d4fd2:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4fd4:	2201      	movs	r2, #1
   d4fd6:	a801      	add	r0, sp, #4
   d4fd8:	f7ff ffba 	bl	d4f50 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4fdc:	a901      	add	r1, sp, #4
   d4fde:	4620      	mov	r0, r4
   d4fe0:	f7ff ffe8 	bl	d4fb4 <_ZN8particle7BleUuidaSERKS0_>
}
   d4fe4:	b006      	add	sp, #24
   d4fe6:	bd10      	pop	{r4, pc}

000d4fe8 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d4fe8:	b510      	push	{r4, lr}
   d4fea:	b086      	sub	sp, #24
   d4fec:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d4fee:	a801      	add	r0, sp, #4
   d4ff0:	f7ff ffcf 	bl	d4f92 <_ZN8particle7BleUuidC1Et>
   d4ff4:	a901      	add	r1, sp, #4
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	f7ff ffdc 	bl	d4fb4 <_ZN8particle7BleUuidaSERKS0_>
}
   d4ffc:	b006      	add	sp, #24
   d4ffe:	bd10      	pop	{r4, pc}

000d5000 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d5000:	b538      	push	{r3, r4, r5, lr}
   d5002:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d5004:	b101      	cbz	r1, d5008 <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d5006:	b912      	cbnz	r2, d500e <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d5008:	2000      	movs	r0, #0
   d500a:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d500c:	bd38      	pop	{r3, r4, r5, pc}
   d500e:	2a1f      	cmp	r2, #31
   d5010:	bf28      	it	cs
   d5012:	221f      	movcs	r2, #31
   d5014:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d5016:	f001 ffec 	bl	d6ff2 <memcpy>
    selfLen_ = len;
   d501a:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d501c:	4620      	mov	r0, r4
}
   d501e:	bd38      	pop	{r3, r4, r5, pc}

000d5020 <_ZNK8particle18BleAdvertisingData3getEPhj>:
        // Recursively remove duplicated type.
        remove(type);
    }
}

size_t BleAdvertisingData::get(uint8_t* buf, size_t len) const {
   d5020:	b538      	push	{r3, r4, r5, lr}
   d5022:	4605      	mov	r5, r0
    if (buf != nullptr) {
   d5024:	4608      	mov	r0, r1
   d5026:	b149      	cbz	r1, d503c <_ZNK8particle18BleAdvertisingData3getEPhj+0x1c>
   d5028:	6a2b      	ldr	r3, [r5, #32]
   d502a:	429a      	cmp	r2, r3
   d502c:	bf28      	it	cs
   d502e:	461a      	movcs	r2, r3
   d5030:	4614      	mov	r4, r2
        len = std::min(len, selfLen_);
        memcpy(buf, selfData_, len);
   d5032:	4629      	mov	r1, r5
   d5034:	f001 ffdd 	bl	d6ff2 <memcpy>
        return len;
   d5038:	4620      	mov	r0, r4
   d503a:	bd38      	pop	{r3, r4, r5, pc}
    }
    return selfLen_;
   d503c:	6a28      	ldr	r0, [r5, #32]
}
   d503e:	bd38      	pop	{r3, r4, r5, pc}

000d5040 <_ZNK8particle18BleAdvertisingData6lengthEv>:
    return selfData_;
}

size_t BleAdvertisingData::length() const {
    return selfLen_;
}
   d5040:	6a00      	ldr	r0, [r0, #32]
   d5042:	4770      	bx	lr

000d5044 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5044:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5046:	b18b      	cbz	r3, d506c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5048:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d504a:	1ce5      	adds	r5, r4, #3
   d504c:	428d      	cmp	r5, r1
   d504e:	d80f      	bhi.n	d5070 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5050:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5052:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5054:	5d87      	ldrb	r7, [r0, r6]
   d5056:	4297      	cmp	r7, r2
   d5058:	d105      	bne.n	d5066 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d505a:	442e      	add	r6, r5
   d505c:	42b1      	cmp	r1, r6
   d505e:	d307      	bcc.n	d5070 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5060:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5062:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5064:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5066:	3501      	adds	r5, #1
   d5068:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d506a:	e7ee      	b.n	d504a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d506c:	4618      	mov	r0, r3
   d506e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5070:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5072:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5074 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5078:	4604      	mov	r4, r0
   d507a:	460e      	mov	r6, r1
   d507c:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d507e:	4617      	mov	r7, r2
   d5080:	2a00      	cmp	r2, #0
   d5082:	d03a      	beq.n	d50fa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5084:	460a      	mov	r2, r1
   d5086:	ab01      	add	r3, sp, #4
   d5088:	6a01      	ldr	r1, [r0, #32]
   d508a:	f7ff ffdb 	bl	d5044 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d508e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5092:	6a22      	ldr	r2, [r4, #32]
   d5094:	bb03      	cbnz	r3, d50d8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5096:	b1f8      	cbz	r0, d50d8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5098:	1c96      	adds	r6, r2, #2
   d509a:	442e      	add	r6, r5
   d509c:	1a36      	subs	r6, r6, r0
   d509e:	2e1f      	cmp	r6, #31
   d50a0:	d82b      	bhi.n	d50fa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d50a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d50a6:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d50aa:	ebc8 0202 	rsb	r2, r8, r2
   d50ae:	1a12      	subs	r2, r2, r0
   d50b0:	eb00 0108 	add.w	r1, r0, r8
   d50b4:	eb05 0009 	add.w	r0, r5, r9
   d50b8:	b292      	uxth	r2, r2
   d50ba:	4421      	add	r1, r4
   d50bc:	4420      	add	r0, r4
   d50be:	f001 ffa3 	bl	d7008 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d50c2:	1c6b      	adds	r3, r5, #1
   d50c4:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d50c8:	462a      	mov	r2, r5
   d50ca:	4639      	mov	r1, r7
   d50cc:	eb04 0009 	add.w	r0, r4, r9
   d50d0:	f001 ff8f 	bl	d6ff2 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d50d4:	6226      	str	r6, [r4, #32]
   d50d6:	e010      	b.n	d50fa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d50d8:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d50da:	182b      	adds	r3, r5, r0
   d50dc:	2b1f      	cmp	r3, #31
   d50de:	d80c      	bhi.n	d50fa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d50e0:	1c6b      	adds	r3, r5, #1
   d50e2:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d50e4:	4422      	add	r2, r4
   d50e6:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d50e8:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d50ea:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d50ec:	4420      	add	r0, r4
   d50ee:	462a      	mov	r2, r5
   d50f0:	f001 ff7f 	bl	d6ff2 <memcpy>
        selfLen_ += len;
   d50f4:	6a22      	ldr	r2, [r4, #32]
   d50f6:	442a      	add	r2, r5
   d50f8:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d50fa:	6a20      	ldr	r0, [r4, #32]
}
   d50fc:	b003      	add	sp, #12
   d50fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5102 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5102:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5104:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5106:	4603      	mov	r3, r0
   d5108:	f100 021f 	add.w	r2, r0, #31
   d510c:	2000      	movs	r0, #0
   d510e:	f803 0b01 	strb.w	r0, [r3], #1
   d5112:	4293      	cmp	r3, r2
   d5114:	f04f 0100 	mov.w	r1, #0
   d5118:	d1f9      	bne.n	d510e <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d511a:	aa04      	add	r2, sp, #16
   d511c:	2306      	movs	r3, #6
   d511e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5122:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5124:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5126:	9100      	str	r1, [sp, #0]
   d5128:	4620      	mov	r0, r4
   d512a:	4619      	mov	r1, r3
   d512c:	f7ff ffa2 	bl	d5074 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5130:	4620      	mov	r0, r4
   d5132:	b004      	add	sp, #16
   d5134:	bd10      	pop	{r4, pc}

000d5136 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5136:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5138:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d513a:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d513c:	ab01      	add	r3, sp, #4
   d513e:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5140:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5142:	f7ff ff7f 	bl	d5044 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d5146:	4605      	mov	r5, r0
   d5148:	b178      	cbz	r0, d516a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d514a:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d514c:	6a22      	ldr	r2, [r4, #32]
   d514e:	1829      	adds	r1, r5, r0
   d5150:	1a12      	subs	r2, r2, r0
   d5152:	1b52      	subs	r2, r2, r5
   d5154:	4421      	add	r1, r4
   d5156:	4420      	add	r0, r4
   d5158:	f001 ff4b 	bl	d6ff2 <memcpy>
        selfLen_ -= len;
   d515c:	6a23      	ldr	r3, [r4, #32]
   d515e:	1b5d      	subs	r5, r3, r5
   d5160:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5162:	4631      	mov	r1, r6
   d5164:	4620      	mov	r0, r4
   d5166:	f7ff ffe6 	bl	d5136 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d516a:	b002      	add	sp, #8
   d516c:	bd70      	pop	{r4, r5, r6, pc}

000d516e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d516e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5172:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5174:	b085      	sub	sp, #20
   d5176:	4606      	mov	r6, r0
   d5178:	4689      	mov	r9, r1
   d517a:	4617      	mov	r7, r2
   d517c:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d517e:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d5180:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5184:	6a31      	ldr	r1, [r6, #32]
   d5186:	428d      	cmp	r5, r1
   d5188:	d22a      	bcs.n	d51e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d518a:	ab03      	add	r3, sp, #12
   d518c:	464a      	mov	r2, r9
   d518e:	1b49      	subs	r1, r1, r5
   d5190:	1970      	adds	r0, r6, r5
   d5192:	f7ff ff57 	bl	d5044 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d5196:	4683      	mov	fp, r0
   d5198:	b310      	cbz	r0, d51e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d519a:	4554      	cmp	r4, sl
   d519c:	d220      	bcs.n	d51e0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d519e:	2804      	cmp	r0, #4
   d51a0:	9903      	ldr	r1, [sp, #12]
   d51a2:	d10c      	bne.n	d51be <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d51a4:	4429      	add	r1, r5
   d51a6:	1872      	adds	r2, r6, r1
   d51a8:	1c63      	adds	r3, r4, #1
   d51aa:	78d1      	ldrb	r1, [r2, #3]
   d51ac:	7892      	ldrb	r2, [r2, #2]
   d51ae:	9301      	str	r3, [sp, #4]
   d51b0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d51b4:	fb08 7004 	mla	r0, r8, r4, r7
   d51b8:	f7ff ff16 	bl	d4fe8 <_ZN8particle7BleUuidaSEt>
   d51bc:	e00a      	b.n	d51d4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d51be:	2812      	cmp	r0, #18
   d51c0:	d10a      	bne.n	d51d8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d51c2:	3102      	adds	r1, #2
   d51c4:	4429      	add	r1, r5
   d51c6:	1c63      	adds	r3, r4, #1
   d51c8:	4431      	add	r1, r6
   d51ca:	fb08 7004 	mla	r0, r8, r4, r7
   d51ce:	9301      	str	r3, [sp, #4]
   d51d0:	f7ff fefd 	bl	d4fce <_ZN8particle7BleUuidaSEPKh>
   d51d4:	9b01      	ldr	r3, [sp, #4]
   d51d6:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d51d8:	9b03      	ldr	r3, [sp, #12]
   d51da:	445b      	add	r3, fp
   d51dc:	441d      	add	r5, r3
   d51de:	e7d1      	b.n	d5184 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d51e0:	4620      	mov	r0, r4
   d51e2:	b005      	add	sp, #20
   d51e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d51e8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d51e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d51ec:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d51ee:	460d      	mov	r5, r1
   d51f0:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d51f2:	460a      	mov	r2, r1
   d51f4:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d51f6:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d51f8:	f7ff ffb9 	bl	d516e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d51fc:	f04f 0814 	mov.w	r8, #20
   d5200:	1a33      	subs	r3, r6, r0
   d5202:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5206:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5208:	2103      	movs	r1, #3
   d520a:	4638      	mov	r0, r7
   d520c:	f7ff ffaf 	bl	d516e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5210:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5212:	1b33      	subs	r3, r6, r4
   d5214:	fb08 5204 	mla	r2, r8, r4, r5
   d5218:	2106      	movs	r1, #6
   d521a:	4638      	mov	r0, r7
   d521c:	f7ff ffa7 	bl	d516e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5220:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d5222:	1b33      	subs	r3, r6, r4
   d5224:	fb08 5204 	mla	r2, r8, r4, r5
   d5228:	2107      	movs	r1, #7
   d522a:	4638      	mov	r0, r7
   d522c:	f7ff ff9f 	bl	d516e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d5230:	4420      	add	r0, r4
   d5232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5236 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5236:	b510      	push	{r4, lr}
   d5238:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d523a:	69c2      	ldr	r2, [r0, #28]
   d523c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5240:	4293      	cmp	r3, r2
   d5242:	4618      	mov	r0, r3
   d5244:	d006      	beq.n	d5254 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5246:	6804      	ldr	r4, [r0, #0]
   d5248:	8824      	ldrh	r4, [r4, #0]
   d524a:	428c      	cmp	r4, r1
   d524c:	f103 0308 	add.w	r3, r3, #8
   d5250:	d1f6      	bne.n	d5240 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5252:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5254:	2000      	movs	r0, #0
    }
   d5256:	bd10      	pop	{r4, pc}

000d5258 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d5258:	b510      	push	{r4, lr}
    return impl()->address();
   d525a:	680a      	ldr	r2, [r1, #0]
   d525c:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5260:	6003      	str	r3, [r0, #0]
   d5262:	6853      	ldr	r3, [r2, #4]
   d5264:	6043      	str	r3, [r0, #4]
}
   d5266:	bd10      	pop	{r4, pc}

000d5268 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d526a:	6802      	ldr	r2, [r0, #0]
   d526c:	680b      	ldr	r3, [r1, #0]
   d526e:	8812      	ldrh	r2, [r2, #0]
   d5270:	881b      	ldrh	r3, [r3, #0]
   d5272:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5274:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5276:	d10c      	bne.n	d5292 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5278:	4601      	mov	r1, r0
   d527a:	4668      	mov	r0, sp
   d527c:	f7ff ffec 	bl	d5258 <_ZNK8particle13BlePeerDevice7addressEv>
   d5280:	4621      	mov	r1, r4
   d5282:	a802      	add	r0, sp, #8
   d5284:	f7ff ffe8 	bl	d5258 <_ZNK8particle13BlePeerDevice7addressEv>
   d5288:	a902      	add	r1, sp, #8
   d528a:	4668      	mov	r0, sp
   d528c:	f7ff fe42 	bl	d4f14 <_ZNK8particle10BleAddresseqERKS0_>
   d5290:	b900      	cbnz	r0, d5294 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5292:	2000      	movs	r0, #0
}
   d5294:	b004      	add	sp, #16
   d5296:	bd10      	pop	{r4, pc}

000d5298 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5298:	b510      	push	{r4, lr}
   d529a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d529c:	2034      	movs	r0, #52	; 0x34
   d529e:	f7fe fefa 	bl	d4096 <_Znwj>
   d52a2:	4601      	mov	r1, r0
   d52a4:	b168      	cbz	r0, d52c2 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d52a6:	2300      	movs	r3, #0
   d52a8:	6003      	str	r3, [r0, #0]
   d52aa:	6043      	str	r3, [r0, #4]
   d52ac:	6083      	str	r3, [r0, #8]
   d52ae:	60c3      	str	r3, [r0, #12]
   d52b0:	6103      	str	r3, [r0, #16]
   d52b2:	6143      	str	r3, [r0, #20]
   d52b4:	6183      	str	r3, [r0, #24]
   d52b6:	61c3      	str	r3, [r0, #28]
   d52b8:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d52ba:	6243      	str	r3, [r0, #36]	; 0x24
   d52bc:	6283      	str	r3, [r0, #40]	; 0x28
   d52be:	62c3      	str	r3, [r0, #44]	; 0x2c
   d52c0:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d52c2:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d52c4:	b919      	cbnz	r1, d52ce <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d52c6:	4a0a      	ldr	r2, [pc, #40]	; (d52f0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d52c8:	200a      	movs	r0, #10
   d52ca:	f7ff fd0b 	bl	d4ce4 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d52ce:	2000      	movs	r0, #0
   d52d0:	f7ff faf2 	bl	d48b8 <hal_ble_stack_init>
   d52d4:	b120      	cbz	r0, d52e0 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d52d6:	4a06      	ldr	r2, [pc, #24]	; (d52f0 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d52d8:	2100      	movs	r1, #0
   d52da:	200a      	movs	r0, #10
   d52dc:	f7ff fd02 	bl	d4ce4 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d52e0:	2200      	movs	r2, #0
   d52e2:	6821      	ldr	r1, [r4, #0]
   d52e4:	4803      	ldr	r0, [pc, #12]	; (d52f4 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d52e6:	f7ff fb5b 	bl	d49a0 <hal_ble_set_callback_on_periph_link_events>
}
   d52ea:	4620      	mov	r0, r4
   d52ec:	bd10      	pop	{r4, pc}
   d52ee:	bf00      	nop
   d52f0:	000d4a35 	.word	0x000d4a35
   d52f4:	000d57bd 	.word	0x000d57bd

000d52f8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d52f8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d52fa:	4c0a      	ldr	r4, [pc, #40]	; (d5324 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d52fc:	6823      	ldr	r3, [r4, #0]
   d52fe:	07db      	lsls	r3, r3, #31
   d5300:	d40e      	bmi.n	d5320 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5302:	4620      	mov	r0, r4
   d5304:	f7fe fecd 	bl	d40a2 <__cxa_guard_acquire>
   d5308:	b150      	cbz	r0, d5320 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d530a:	4807      	ldr	r0, [pc, #28]	; (d5328 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d530c:	f7ff ffc4 	bl	d5298 <_ZN8particle14BleLocalDeviceC1Ev>
   d5310:	4620      	mov	r0, r4
   d5312:	f7fe fecb 	bl	d40ac <__cxa_guard_release>
   d5316:	4a05      	ldr	r2, [pc, #20]	; (d532c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5318:	4905      	ldr	r1, [pc, #20]	; (d5330 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d531a:	4803      	ldr	r0, [pc, #12]	; (d5328 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d531c:	f001 fcde 	bl	d6cdc <__aeabi_atexit>
    return instance;
}
   d5320:	4801      	ldr	r0, [pc, #4]	; (d5328 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5322:	bd10      	pop	{r4, pc}
   d5324:	2003e3c8 	.word	0x2003e3c8
   d5328:	2003e3c4 	.word	0x2003e3c4
   d532c:	2003dea0 	.word	0x2003dea0
   d5330:	000d55d1 	.word	0x000d55d1

000d5334 <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   d5334:	b513      	push	{r0, r1, r4, lr}
   d5336:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   d5338:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d533a:	4668      	mov	r0, sp
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
   d533c:	9100      	str	r1, [sp, #0]
   d533e:	9101      	str	r1, [sp, #4]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d5340:	f7ff fac2 	bl	d48c8 <hal_ble_gap_get_device_address>
        : address_{} {
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}

BleAddress::BleAddress(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5344:	466b      	mov	r3, sp
   d5346:	cb03      	ldmia	r3!, {r0, r1}
   d5348:	6020      	str	r0, [r4, #0]

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
    hal_ble_gap_get_device_address(&halAddr, nullptr);
    return BleAddress(halAddr);
}
   d534a:	4620      	mov	r0, r4
        : address_{} {
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}

BleAddress::BleAddress(const hal_ble_addr_t& addr) {
    address_ = addr;
   d534c:	6061      	str	r1, [r4, #4]

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
    hal_ble_gap_get_device_address(&halAddr, nullptr);
    return BleAddress(halAddr);
}
   d534e:	b002      	add	sp, #8
   d5350:	bd10      	pop	{r4, pc}

000d5352 <_ZNK8particle14BleLocalDevice7txPowerEPa>:
int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}

int BleLocalDevice::txPower(int8_t* txPower) const {
   d5352:	b513      	push	{r0, r1, r4, lr}
   d5354:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5356:	a801      	add	r0, sp, #4
   d5358:	f7ff fdba 	bl	d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_get_tx_power(txPower, nullptr);
   d535c:	2100      	movs	r1, #0
   d535e:	4620      	mov	r0, r4
   d5360:	f7ff faba 	bl	d48d8 <hal_ble_gap_get_tx_power>
   d5364:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}

int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
   d5366:	a801      	add	r0, sp, #4
   d5368:	f7ff fdc0 	bl	d4eec <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}
   d536c:	4620      	mov	r0, r4
   d536e:	b002      	add	sp, #8
   d5370:	bd10      	pop	{r4, pc}

000d5372 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   d5372:	b530      	push	{r4, r5, lr}
   d5374:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d5376:	2400      	movs	r4, #0
int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
   d5378:	4668      	mov	r0, sp

int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   d537a:	460d      	mov	r5, r1
    WiringBleLock lk;
   d537c:	f7ff fda8 	bl	d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d5380:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d5382:	4621      	mov	r1, r4
   d5384:	a801      	add	r0, sp, #4
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d5386:	9401      	str	r4, [sp, #4]
   d5388:	9402      	str	r4, [sp, #8]
   d538a:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d538c:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d5390:	f7ff fab2 	bl	d48f8 <hal_ble_gap_get_advertising_parameters>
   d5394:	2800      	cmp	r0, #0
   d5396:	db05      	blt.n	d53a4 <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x32>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d5398:	4621      	mov	r1, r4
   d539a:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
   d539c:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d53a0:	f7ff faa2 	bl	d48e8 <hal_ble_gap_set_advertising_parameters>
   d53a4:	4604      	mov	r4, r0
int BleLocalDevice::selectAntenna(BleAntennaType antenna) const {
    return hal_ble_select_antenna(static_cast<hal_ble_ant_type_t>(antenna), nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
    WiringBleLock lk;
   d53a6:	4668      	mov	r0, sp
   d53a8:	f7ff fda0 	bl	d4eec <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d53ac:	4620      	mov	r0, r4
   d53ae:	b005      	add	sp, #20
   d53b0:	bd30      	pop	{r4, r5, pc}

000d53b2 <_ZNK8particle14BleLocalDevice21setAdvertisingTimeoutEt>:

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
   d53b2:	b530      	push	{r4, r5, lr}
   d53b4:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d53b6:	2400      	movs	r4, #0
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d53b8:	4668      	mov	r0, sp
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
   d53ba:	460d      	mov	r5, r1
    WiringBleLock lk;
   d53bc:	f7ff fd88 	bl	d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d53c0:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d53c2:	4621      	mov	r1, r4
   d53c4:	a801      	add	r0, sp, #4
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d53c6:	9401      	str	r4, [sp, #4]
   d53c8:	9402      	str	r4, [sp, #8]
   d53ca:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d53cc:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d53d0:	f7ff fa92 	bl	d48f8 <hal_ble_gap_get_advertising_parameters>
   d53d4:	2800      	cmp	r0, #0
   d53d6:	db05      	blt.n	d53e4 <_ZNK8particle14BleLocalDevice21setAdvertisingTimeoutEt+0x32>
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d53d8:	4621      	mov	r1, r4
   d53da:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
   d53dc:	f8ad 500a 	strh.w	r5, [sp, #10]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d53e0:	f7ff fa82 	bl	d48e8 <hal_ble_gap_set_advertising_parameters>
   d53e4:	4604      	mov	r4, r0
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d53e6:	4668      	mov	r0, sp
   d53e8:	f7ff fd80 	bl	d4eec <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d53ec:	4620      	mov	r0, r4
   d53ee:	b005      	add	sp, #20
   d53f0:	bd30      	pop	{r4, r5, pc}

000d53f2 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>:

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d53f2:	b530      	push	{r4, r5, lr}
   d53f4:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d53f6:	2400      	movs	r4, #0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d53f8:	4668      	mov	r0, sp
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d53fa:	460d      	mov	r5, r1
    WiringBleLock lk;
   d53fc:	f7ff fd68 	bl	d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d5400:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d5402:	4621      	mov	r1, r4
   d5404:	a801      	add	r0, sp, #4
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d5406:	9401      	str	r4, [sp, #4]
   d5408:	9402      	str	r4, [sp, #8]
   d540a:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d540c:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d5410:	f7ff fa72 	bl	d48f8 <hal_ble_gap_get_advertising_parameters>
   d5414:	2800      	cmp	r0, #0
   d5416:	db05      	blt.n	d5424 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE+0x32>
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d5418:	4621      	mov	r1, r4
   d541a:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
   d541c:	f88d 500c 	strb.w	r5, [sp, #12]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d5420:	f7ff fa62 	bl	d48e8 <hal_ble_gap_set_advertising_parameters>
   d5424:	4604      	mov	r4, r0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d5426:	4668      	mov	r0, sp
   d5428:	f7ff fd60 	bl	d4eec <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d542c:	4620      	mov	r0, r4
   d542e:	b005      	add	sp, #20
   d5430:	bd30      	pop	{r4, r5, pc}

000d5432 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5432:	4608      	mov	r0, r1
   d5434:	b909      	cbnz	r1, d543a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5436:	460a      	mov	r2, r1
   d5438:	e001      	b.n	d543e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d543a:	6a09      	ldr	r1, [r1, #32]
   d543c:	2200      	movs	r2, #0
   d543e:	f7ff ba63 	b.w	d4908 <hal_ble_gap_set_advertising_data>

000d5442 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5442:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5444:	460c      	mov	r4, r1
   d5446:	b911      	cbnz	r1, d544e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5448:	460a      	mov	r2, r1
   d544a:	4608      	mov	r0, r1
   d544c:	e006      	b.n	d545c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d544e:	2101      	movs	r1, #1
   d5450:	4620      	mov	r0, r4
   d5452:	f7ff fe70 	bl	d5136 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5456:	6a21      	ldr	r1, [r4, #32]
   d5458:	2200      	movs	r2, #0
   d545a:	4620      	mov	r0, r4
    }
}
   d545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5460:	f7ff ba5a 	b.w	d4918 <hal_ble_gap_set_scan_response_data>

000d5464 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5464:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5466:	a801      	add	r0, sp, #4
   d5468:	f7ff fd32 	bl	d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d546c:	2000      	movs	r0, #0
   d546e:	f7ff fa5b 	bl	d4928 <hal_ble_gap_start_advertising>
   d5472:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d5474:	a801      	add	r0, sp, #4
   d5476:	f7ff fd39 	bl	d4eec <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d547a:	4620      	mov	r0, r4
   d547c:	b002      	add	sp, #8
   d547e:	bd10      	pop	{r4, pc}

000d5480 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5480:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5482:	4605      	mov	r5, r0
   d5484:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5486:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5488:	4616      	mov	r6, r2
    WiringBleLock lk;
   d548a:	f7ff fd21 	bl	d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d548e:	4621      	mov	r1, r4
   d5490:	4628      	mov	r0, r5
   d5492:	f7ff ffce 	bl	d5432 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5496:	2800      	cmp	r0, #0
   d5498:	db08      	blt.n	d54ac <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d549a:	4631      	mov	r1, r6
   d549c:	4628      	mov	r0, r5
   d549e:	f7ff ffd0 	bl	d5442 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d54a2:	2800      	cmp	r0, #0
   d54a4:	db02      	blt.n	d54ac <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d54a6:	4628      	mov	r0, r5
   d54a8:	f7ff ffdc 	bl	d5464 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d54ac:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d54ae:	a801      	add	r0, sp, #4
   d54b0:	f7ff fd1c 	bl	d4eec <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d54b4:	4620      	mov	r0, r4
   d54b6:	b002      	add	sp, #8
   d54b8:	bd70      	pop	{r4, r5, r6, pc}

000d54ba <_ZNK8particle14BleLocalDevice11advertisingEv>:
int BleLocalDevice::stopAdvertising() const {
    return hal_ble_gap_stop_advertising(nullptr);
}

bool BleLocalDevice::advertising() const {
    return hal_ble_gap_is_advertising(nullptr);
   d54ba:	2000      	movs	r0, #0
   d54bc:	f7ff ba3c 	b.w	d4938 <hal_ble_gap_is_advertising>

000d54c0 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d54c0:	b530      	push	{r4, r5, lr}
   d54c2:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d54c4:	2400      	movs	r4, #0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d54c6:	4668      	mov	r0, sp
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d54c8:	460d      	mov	r5, r1
    WiringBleLock lk;
   d54ca:	f7ff fd01 	bl	d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d54ce:	230c      	movs	r3, #12
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d54d0:	4621      	mov	r1, r4
   d54d2:	a801      	add	r0, sp, #4
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d54d4:	9401      	str	r4, [sp, #4]
   d54d6:	9402      	str	r4, [sp, #8]
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d54d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d54dc:	9403      	str	r4, [sp, #12]
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d54de:	f7ff fa3b 	bl	d4958 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d54e2:	4621      	mov	r1, r4
   d54e4:	a801      	add	r0, sp, #4
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
   d54e6:	f8ad 500c 	strh.w	r5, [sp, #12]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d54ea:	f7ff fa2d 	bl	d4948 <hal_ble_gap_set_scan_parameters>
   d54ee:	4604      	mov	r4, r0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d54f0:	4668      	mov	r0, sp
   d54f2:	f7ff fcfb 	bl	d4eec <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}
   d54f6:	4620      	mov	r0, r4
   d54f8:	b005      	add	sp, #20
   d54fa:	bd30      	pop	{r4, r5, pc}

000d54fc <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>:
int BleLocalDevice::getScanParameters(BleScanParams* params) const {
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   d54fc:	b530      	push	{r4, r5, lr}
   d54fe:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d5500:	a801      	add	r0, sp, #4
int BleLocalDevice::getScanParameters(BleScanParams* params) const {
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   d5502:	4614      	mov	r4, r2
   d5504:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5506:	f7ff fce3 	bl	d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>
   d550a:	2200      	movs	r2, #0
    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
        context_ = context;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d550c:	a902      	add	r1, sp, #8
   d550e:	480c      	ldr	r0, [pc, #48]	; (d5540 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_+0x44>)
   d5510:	9202      	str	r2, [sp, #8]
   d5512:	9203      	str	r2, [sp, #12]
   d5514:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d5516:	9205      	str	r2, [sp, #20]
   d5518:	9206      	str	r2, [sp, #24]
   d551a:	9207      	str	r2, [sp, #28]

    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
        context_ = context;
   d551c:	9409      	str	r4, [sp, #36]	; 0x24
    }

    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
   d551e:	9508      	str	r5, [sp, #32]
        context_ = context;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5520:	f7ff fa22 	bl	d4968 <hal_ble_gap_start_scan>
   d5524:	2800      	cmp	r0, #0
   d5526:	bfb8      	it	lt
   d5528:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d552a:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d552c:	bfa8      	it	ge
   d552e:	9c07      	ldrge	r4, [sp, #28]
   d5530:	f7ff fc7c 	bl	d4e2c <free>
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
    WiringBleLock lk;
   d5534:	a801      	add	r0, sp, #4
   d5536:	f7ff fcd9 	bl	d4eec <_ZN8particle3ble13WiringBleLockD1Ev>
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}
   d553a:	4620      	mov	r0, r4
   d553c:	b00b      	add	sp, #44	; 0x2c
   d553e:	bd30      	pop	{r4, r5, pc}
   d5540:	000d592b 	.word	0x000d592b

000d5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5544:	680b      	ldr	r3, [r1, #0]
   d5546:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5548:	b113      	cbz	r3, d5550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d554a:	685a      	ldr	r2, [r3, #4]
   d554c:	3201      	adds	r2, #1
   d554e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5550:	4770      	bx	lr

000d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5552:	b510      	push	{r4, lr}
   d5554:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5556:	6800      	ldr	r0, [r0, #0]
   d5558:	b128      	cbz	r0, d5566 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d555a:	6843      	ldr	r3, [r0, #4]
   d555c:	3b01      	subs	r3, #1
   d555e:	6043      	str	r3, [r0, #4]
   d5560:	b90b      	cbnz	r3, d5566 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5562:	f7ff fca5 	bl	d4eb0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5566:	4620      	mov	r0, r4
   d5568:	bd10      	pop	{r4, pc}

000d556a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d556a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d556c:	6804      	ldr	r4, [r0, #0]
   d556e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5570:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5572:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5576:	42a6      	cmp	r6, r4
   d5578:	d004      	beq.n	d5584 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d557a:	1d20      	adds	r0, r4, #4
   d557c:	f7ff ffe9 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5580:	3408      	adds	r4, #8
   d5582:	e7f8      	b.n	d5576 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5584:	6828      	ldr	r0, [r5, #0]
   d5586:	f7ff fc51 	bl	d4e2c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d558a:	4628      	mov	r0, r5
   d558c:	bd70      	pop	{r4, r5, r6, pc}

000d558e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d558e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5590:	6804      	ldr	r4, [r0, #0]
   d5592:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5594:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5596:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d559a:	42a6      	cmp	r6, r4
   d559c:	d004      	beq.n	d55a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d559e:	1d20      	adds	r0, r4, #4
   d55a0:	f7ff ffd7 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55a4:	3408      	adds	r4, #8
   d55a6:	e7f8      	b.n	d559a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d55a8:	6828      	ldr	r0, [r5, #0]
   d55aa:	f7ff fc3f 	bl	d4e2c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d55ae:	4628      	mov	r0, r5
   d55b0:	bd70      	pop	{r4, r5, r6, pc}

000d55b2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d55b2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d55b4:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d55b6:	f104 0018 	add.w	r0, r4, #24
   d55ba:	f7ff ffe8 	bl	d558e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d55be:	f104 000c 	add.w	r0, r4, #12
   d55c2:	f7ff ffd2 	bl	d556a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d55c6:	4620      	mov	r0, r4
   d55c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d55cc:	f7fe bd65 	b.w	d409a <_ZdlPv>

000d55d0 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d55d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55d2:	6804      	ldr	r4, [r0, #0]
   d55d4:	4607      	mov	r7, r0
   d55d6:	b1c4      	cbz	r4, d560a <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d55d8:	69a5      	ldr	r5, [r4, #24]
   d55da:	69e3      	ldr	r3, [r4, #28]
   d55dc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d55e0:	42ae      	cmp	r6, r5
   d55e2:	d004      	beq.n	d55ee <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55e4:	1d28      	adds	r0, r5, #4
   d55e6:	f7ff ffb4 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55ea:	3508      	adds	r5, #8
   d55ec:	e7f8      	b.n	d55e0 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d55ee:	69a0      	ldr	r0, [r4, #24]
   d55f0:	f7ff fc1c 	bl	d4e2c <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d55f4:	f104 000c 	add.w	r0, r4, #12
   d55f8:	f7ff ffc9 	bl	d558e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d55fc:	4620      	mov	r0, r4
   d55fe:	f7ff ffb4 	bl	d556a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5602:	2134      	movs	r1, #52	; 0x34
   d5604:	4620      	mov	r0, r4
   d5606:	f001 fb6e 	bl	d6ce6 <_ZdlPvj>
   d560a:	4638      	mov	r0, r7
   d560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5610 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5610:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5612:	2500      	movs	r5, #0
   d5614:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5616:	6045      	str	r5, [r0, #4]
   d5618:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d561a:	2024      	movs	r0, #36	; 0x24
   d561c:	f7fe fd3b 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5620:	4604      	mov	r4, r0
   d5622:	b178      	cbz	r0, d5644 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5624:	4603      	mov	r3, r0
   d5626:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d562a:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d562e:	f8c0 5002 	str.w	r5, [r0, #2]
   d5632:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5634:	7285      	strb	r5, [r0, #10]
   d5636:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5638:	60c5      	str	r5, [r0, #12]
   d563a:	6105      	str	r5, [r0, #16]
   d563c:	6145      	str	r5, [r0, #20]
   d563e:	6185      	str	r5, [r0, #24]
   d5640:	61c5      	str	r5, [r0, #28]
   d5642:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5644:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5646:	2014      	movs	r0, #20
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	f7fe fd24 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d564e:	4603      	mov	r3, r0
   d5650:	b128      	cbz	r0, d565e <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5652:	2201      	movs	r2, #1
   d5654:	6042      	str	r2, [r0, #4]
   d5656:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5658:	4a08      	ldr	r2, [pc, #32]	; (d567c <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d565a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d565c:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d565e:	a802      	add	r0, sp, #8
   d5660:	6872      	ldr	r2, [r6, #4]
   d5662:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5666:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5668:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d566a:	f7ff ff72 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d566e:	6833      	ldr	r3, [r6, #0]
   d5670:	b90b      	cbnz	r3, d5676 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5672:	f7ff fc13 	bl	d4e9c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d5676:	4630      	mov	r0, r6
   d5678:	b002      	add	sp, #8
   d567a:	bd70      	pop	{r4, r5, r6, pc}
   d567c:	000d72d4 	.word	0x000d72d4

000d5680 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5680:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5682:	b570      	push	{r4, r5, r6, lr}
   d5684:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5686:	d91a      	bls.n	d56be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5688:	4290      	cmp	r0, r2
   d568a:	d219      	bcs.n	d56c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d568c:	f1a1 0608 	sub.w	r6, r1, #8
   d5690:	1a51      	subs	r1, r2, r1
   d5692:	3904      	subs	r1, #4
   d5694:	1f15      	subs	r5, r2, #4
   d5696:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5698:	1f2b      	subs	r3, r5, #4
   d569a:	429e      	cmp	r6, r3
   d569c:	d025      	beq.n	d56ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d569e:	2c04      	cmp	r4, #4
   d56a0:	d007      	beq.n	d56b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56a2:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d56a6:	f844 3c04 	str.w	r3, [r4, #-4]
   d56aa:	4629      	mov	r1, r5
   d56ac:	4620      	mov	r0, r4
   d56ae:	f7ff ff49 	bl	d5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56b2:	4628      	mov	r0, r5
   d56b4:	f7ff ff4d 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56b8:	3d08      	subs	r5, #8
   d56ba:	3c08      	subs	r4, #8
   d56bc:	e7ec      	b.n	d5698 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d56be:	d014      	beq.n	d56ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d56c0:	1d0c      	adds	r4, r1, #4
   d56c2:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d56c4:	1f23      	subs	r3, r4, #4
   d56c6:	429d      	cmp	r5, r3
   d56c8:	d00f      	beq.n	d56ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d56ca:	2e04      	cmp	r6, #4
   d56cc:	d007      	beq.n	d56de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d56d2:	f846 3c04 	str.w	r3, [r6, #-4]
   d56d6:	4621      	mov	r1, r4
   d56d8:	4630      	mov	r0, r6
   d56da:	f7ff ff33 	bl	d5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56de:	4620      	mov	r0, r4
   d56e0:	f7ff ff37 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56e4:	3408      	adds	r4, #8
   d56e6:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d56e8:	e7ec      	b.n	d56c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d56ea:	bd70      	pop	{r4, r5, r6, pc}

000d56ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d56ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d56f0:	6804      	ldr	r4, [r0, #0]
   d56f2:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d56f4:	4605      	mov	r5, r0
   d56f6:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d56f8:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d56fc:	42a7      	cmp	r7, r4
   d56fe:	d018      	beq.n	d5732 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5700:	4641      	mov	r1, r8
   d5702:	4620      	mov	r0, r4
   d5704:	f7ff fdb0 	bl	d5268 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5708:	4606      	mov	r6, r0
   d570a:	b908      	cbnz	r0, d5710 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d570c:	3408      	adds	r4, #8
   d570e:	e7f5      	b.n	d56fc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5710:	b18c      	cbz	r4, d5736 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5712:	1d20      	adds	r0, r4, #4
   d5714:	f7ff ff1d 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5718:	682b      	ldr	r3, [r5, #0]
   d571a:	686a      	ldr	r2, [r5, #4]
   d571c:	f104 0108 	add.w	r1, r4, #8
   d5720:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5724:	4620      	mov	r0, r4
   d5726:	f7ff ffab 	bl	d5680 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d572a:	686b      	ldr	r3, [r5, #4]
   d572c:	3b01      	subs	r3, #1
   d572e:	606b      	str	r3, [r5, #4]
    return true;
   d5730:	e002      	b.n	d5738 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5732:	2600      	movs	r6, #0
   d5734:	e000      	b.n	d5738 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5736:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5738:	4630      	mov	r0, r6
   d573a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d573e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d573e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5740:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5742:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5746:	6847      	ldr	r7, [r0, #4]
   d5748:	9300      	str	r3, [sp, #0]
   d574a:	a801      	add	r0, sp, #4
   d574c:	f7ff fefa 	bl	d5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5750:	6866      	ldr	r6, [r4, #4]
   d5752:	68a3      	ldr	r3, [r4, #8]
   d5754:	429e      	cmp	r6, r3
   d5756:	db14      	blt.n	d5782 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5758:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d575a:	2e00      	cmp	r6, #0
   d575c:	dd0b      	ble.n	d5776 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d575e:	00f0      	lsls	r0, r6, #3
   d5760:	f7ff fb5c 	bl	d4e1c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5764:	4605      	mov	r5, r0
   d5766:	b318      	cbz	r0, d57b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5768:	e894 0006 	ldmia.w	r4, {r1, r2}
   d576c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5770:	f7ff ff86 	bl	d5680 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5774:	e000      	b.n	d5778 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5776:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5778:	6820      	ldr	r0, [r4, #0]
   d577a:	f7ff fb57 	bl	d4e2c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d577e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5780:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5782:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5784:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5786:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d578a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d578e:	4629      	mov	r1, r5
   d5790:	f105 0008 	add.w	r0, r5, #8
   d5794:	f7ff ff74 	bl	d5680 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5798:	b135      	cbz	r5, d57a8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d579a:	9b00      	ldr	r3, [sp, #0]
   d579c:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d57a0:	a901      	add	r1, sp, #4
   d57a2:	1d28      	adds	r0, r5, #4
   d57a4:	f7ff fece 	bl	d5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d57a8:	6863      	ldr	r3, [r4, #4]
   d57aa:	3301      	adds	r3, #1
   d57ac:	6063      	str	r3, [r4, #4]
   d57ae:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57b0:	a801      	add	r0, sp, #4
   d57b2:	f7ff fece 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d57b6:	4628      	mov	r0, r5
   d57b8:	b003      	add	sp, #12
   d57ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d57bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d57bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d57c0:	4604      	mov	r4, r0
   d57c2:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d57c4:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d57c6:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d57c8:	f7ff fb82 	bl	d4ed0 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d57cc:	6823      	ldr	r3, [r4, #0]
   d57ce:	2b03      	cmp	r3, #3
   d57d0:	d002      	beq.n	d57d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d57d2:	2b04      	cmp	r3, #4
   d57d4:	d042      	beq.n	d585c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d57d6:	e087      	b.n	d58e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d57d8:	a804      	add	r0, sp, #16
   d57da:	f7ff ff19 	bl	d5610 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d57de:	9b04      	ldr	r3, [sp, #16]
   d57e0:	8922      	ldrh	r2, [r4, #8]
   d57e2:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d57e4:	6862      	ldr	r2, [r4, #4]
   d57e6:	9904      	ldr	r1, [sp, #16]
   d57e8:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d57ec:	f8c1 3002 	str.w	r3, [r1, #2]
   d57f0:	6853      	ldr	r3, [r2, #4]
   d57f2:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d57f6:	a807      	add	r0, sp, #28
   d57f8:	9b04      	ldr	r3, [sp, #16]
   d57fa:	9306      	str	r3, [sp, #24]
   d57fc:	a905      	add	r1, sp, #20
   d57fe:	f7ff fea1 	bl	d5544 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5802:	a906      	add	r1, sp, #24
   d5804:	f105 0018 	add.w	r0, r5, #24
   d5808:	f7ff ff99 	bl	d573e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d580c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d580e:	a807      	add	r0, sp, #28
   d5810:	f7ff fe9f 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5814:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5816:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5818:	b974      	cbnz	r4, d5838 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d581a:	4b36      	ldr	r3, [pc, #216]	; (d58f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d581c:	9300      	str	r3, [sp, #0]
   d581e:	aa06      	add	r2, sp, #24
   d5820:	4623      	mov	r3, r4
   d5822:	4935      	ldr	r1, [pc, #212]	; (d58f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5824:	9407      	str	r4, [sp, #28]
   d5826:	2032      	movs	r0, #50	; 0x32
   d5828:	f7ff fa64 	bl	d4cf4 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d582c:	9b04      	ldr	r3, [sp, #16]
   d582e:	4621      	mov	r1, r4
   d5830:	8818      	ldrh	r0, [r3, #0]
   d5832:	f7ff f8ab 	bl	d498c <hal_ble_gap_disconnect>
   d5836:	e00d      	b.n	d5854 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5838:	4a30      	ldr	r2, [pc, #192]	; (d58fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d583a:	9200      	str	r2, [sp, #0]
   d583c:	2300      	movs	r3, #0
   d583e:	aa06      	add	r2, sp, #24
   d5840:	492d      	ldr	r1, [pc, #180]	; (d58f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5842:	9307      	str	r3, [sp, #28]
   d5844:	2001      	movs	r0, #1
   d5846:	f7ff fa55 	bl	d4cf4 <log_message>
                if (impl->connectedCb_) {
   d584a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d584c:	b113      	cbz	r3, d5854 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d584e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5850:	a804      	add	r0, sp, #16
   d5852:	4798      	blx	r3
   d5854:	a805      	add	r0, sp, #20
   d5856:	f7ff fe7c 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d585a:	e045      	b.n	d58e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d585c:	8921      	ldrh	r1, [r4, #8]
   d585e:	4628      	mov	r0, r5
   d5860:	f7ff fce9 	bl	d5236 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5864:	4607      	mov	r7, r0
   d5866:	2800      	cmp	r0, #0
   d5868:	d03e      	beq.n	d58e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d586a:	6804      	ldr	r4, [r0, #0]
   d586c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d586e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5870:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5874:	8022      	strh	r2, [r4, #0]
   d5876:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d587a:	4299      	cmp	r1, r3
   d587c:	d003      	beq.n	d5886 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d587e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5882:	8042      	strh	r2, [r0, #2]
   d5884:	e7f9      	b.n	d587a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5886:	68e6      	ldr	r6, [r4, #12]
   d5888:	6923      	ldr	r3, [r4, #16]
   d588a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d588e:	45b0      	cmp	r8, r6
   d5890:	d004      	beq.n	d589c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5892:	1d30      	adds	r0, r6, #4
   d5894:	f7ff fe5d 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5898:	3608      	adds	r6, #8
   d589a:	e7f8      	b.n	d588e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d589c:	2300      	movs	r3, #0
   d589e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d58a0:	69a6      	ldr	r6, [r4, #24]
   d58a2:	69e3      	ldr	r3, [r4, #28]
   d58a4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d58a8:	45b0      	cmp	r8, r6
   d58aa:	d004      	beq.n	d58b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d58ac:	1d30      	adds	r0, r6, #4
   d58ae:	f7ff fe50 	bl	d5552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d58b2:	3608      	adds	r6, #8
   d58b4:	e7f8      	b.n	d58a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d58b6:	2300      	movs	r3, #0
   d58b8:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d58ba:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d58bc:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d58be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d58c0:	b113      	cbz	r3, d58c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d58c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d58c4:	4638      	mov	r0, r7
   d58c6:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d58c8:	2320      	movs	r3, #32
   d58ca:	4a0d      	ldr	r2, [pc, #52]	; (d5900 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d58cc:	9306      	str	r3, [sp, #24]
   d58ce:	9200      	str	r2, [sp, #0]
   d58d0:	2300      	movs	r3, #0
   d58d2:	4909      	ldr	r1, [pc, #36]	; (d58f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d58d4:	9307      	str	r3, [sp, #28]
   d58d6:	2001      	movs	r0, #1
   d58d8:	aa06      	add	r2, sp, #24
   d58da:	f7ff fa0b 	bl	d4cf4 <log_message>
                    impl->peers_.removeOne(*peer);
   d58de:	4639      	mov	r1, r7
   d58e0:	f105 0018 	add.w	r0, r5, #24
   d58e4:	f7ff ff02 	bl	d56ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d58e8:	a803      	add	r0, sp, #12
   d58ea:	f7ff faff 	bl	d4eec <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d58ee:	b00e      	add	sp, #56	; 0x38
   d58f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58f4:	000d734a 	.word	0x000d734a
   d58f8:	000d72e8 	.word	0x000d72e8
   d58fc:	000d7370 	.word	0x000d7370
   d5900:	000d738d 	.word	0x000d738d

000d5904 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5904:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d5906:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5908:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d590a:	dd06      	ble.n	d591a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d590c:	2154      	movs	r1, #84	; 0x54
   d590e:	4369      	muls	r1, r5
   d5910:	6800      	ldr	r0, [r0, #0]
   d5912:	f7ff fa93 	bl	d4e3c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d5916:	b920      	cbnz	r0, d5922 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d5918:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d591a:	6800      	ldr	r0, [r0, #0]
   d591c:	f7ff fa86 	bl	d4e2c <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5920:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d5922:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5924:	60a5      	str	r5, [r4, #8]
        return true;
   d5926:	2001      	movs	r0, #1
    }
   d5928:	bd38      	pop	{r3, r4, r5, pc}

000d592a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d592a:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d592c:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d592e:	b0c0      	sub	sp, #256	; 0x100
   d5930:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5932:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5934:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5936:	a801      	add	r0, sp, #4
   d5938:	2100      	movs	r1, #0
   d593a:	f001 fb80 	bl	d703e <memset>
   d593e:	a803      	add	r0, sp, #12
   d5940:	f7ff fbdf 	bl	d5102 <_ZN8particle18BleAdvertisingDataC1Ev>
   d5944:	a80c      	add	r0, sp, #48	; 0x30
   d5946:	f7ff fbdc 	bl	d5102 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d594a:	462a      	mov	r2, r5
   d594c:	ab01      	add	r3, sp, #4
   d594e:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d5952:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5954:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5956:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5958:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d595a:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d595c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5960:	a80c      	add	r0, sp, #48	; 0x30
   d5962:	f7ff fb4d 	bl	d5000 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d5966:	89aa      	ldrh	r2, [r5, #12]
   d5968:	6869      	ldr	r1, [r5, #4]
   d596a:	a803      	add	r0, sp, #12
   d596c:	f7ff fb48 	bl	d5000 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d5970:	69a5      	ldr	r5, [r4, #24]
   d5972:	b11d      	cbz	r5, d597c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d5974:	69e1      	ldr	r1, [r4, #28]
   d5976:	a801      	add	r0, sp, #4
   d5978:	47a8      	blx	r5
   d597a:	e03c      	b.n	d59f6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d597c:	68e0      	ldr	r0, [r4, #12]
   d597e:	b198      	cbz	r0, d59a8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d5980:	6963      	ldr	r3, [r4, #20]
   d5982:	6922      	ldr	r2, [r4, #16]
   d5984:	4293      	cmp	r3, r2
   d5986:	d239      	bcs.n	d59fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d5988:	1c5a      	adds	r2, r3, #1
   d598a:	6162      	str	r2, [r4, #20]
   d598c:	fb06 0003 	mla	r0, r6, r3, r0
   d5990:	2251      	movs	r2, #81	; 0x51
   d5992:	a901      	add	r1, sp, #4
   d5994:	f001 fb2d 	bl	d6ff2 <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d5998:	6962      	ldr	r2, [r4, #20]
   d599a:	6923      	ldr	r3, [r4, #16]
   d599c:	429a      	cmp	r2, r3
   d599e:	d32d      	bcc.n	d59fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d59a0:	4628      	mov	r0, r5
   d59a2:	f7fe ffe9 	bl	d4978 <hal_ble_gap_stop_scan>
   d59a6:	e029      	b.n	d59fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d59a8:	4632      	mov	r2, r6
   d59aa:	a901      	add	r1, sp, #4
   d59ac:	a816      	add	r0, sp, #88	; 0x58
   d59ae:	f001 fb20 	bl	d6ff2 <memcpy>
   d59b2:	4632      	mov	r2, r6
   d59b4:	a916      	add	r1, sp, #88	; 0x58
   d59b6:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d59b8:	6865      	ldr	r5, [r4, #4]
   d59ba:	f001 fb1a 	bl	d6ff2 <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d59be:	68a3      	ldr	r3, [r4, #8]
   d59c0:	429d      	cmp	r5, r3
   d59c2:	db04      	blt.n	d59ce <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d59c4:	1c69      	adds	r1, r5, #1
   d59c6:	4620      	mov	r0, r4
   d59c8:	f7ff ff9c 	bl	d5904 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d59cc:	b1b0      	cbz	r0, d59fc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d59ce:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d59d0:	6822      	ldr	r2, [r4, #0]
   d59d2:	2654      	movs	r6, #84	; 0x54
   d59d4:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d59d8:	fb06 2203 	mla	r2, r6, r3, r2
   d59dc:	1b52      	subs	r2, r2, r5
   d59de:	4629      	mov	r1, r5
   d59e0:	19a8      	adds	r0, r5, r6
   d59e2:	f001 fb11 	bl	d7008 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d59e6:	4632      	mov	r2, r6
   d59e8:	a92b      	add	r1, sp, #172	; 0xac
   d59ea:	4628      	mov	r0, r5
   d59ec:	f001 fb01 	bl	d6ff2 <memcpy>
    ++size_;
   d59f0:	6863      	ldr	r3, [r4, #4]
   d59f2:	3301      	adds	r3, #1
   d59f4:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d59f6:	6963      	ldr	r3, [r4, #20]
   d59f8:	3301      	adds	r3, #1
   d59fa:	6163      	str	r3, [r4, #20]
        }
    }
   d59fc:	b040      	add	sp, #256	; 0x100
   d59fe:	bd70      	pop	{r4, r5, r6, pc}

000d5a00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5a00:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a02:	4c06      	ldr	r4, [pc, #24]	; (d5a1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5a04:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5a06:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a08:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5a0a:	f7fe ffeb 	bl	d49e4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5a0e:	4620      	mov	r0, r4
   d5a10:	4a03      	ldr	r2, [pc, #12]	; (d5a20 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5a12:	4904      	ldr	r1, [pc, #16]	; (d5a24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5a18:	f001 b960 	b.w	d6cdc <__aeabi_atexit>
   d5a1c:	2003e3cc 	.word	0x2003e3cc
   d5a20:	2003dea0 	.word	0x2003dea0
   d5a24:	000d4e8b 	.word	0x000d4e8b

000d5a28 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a28:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a2a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a2c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5a2e:	b113      	cbz	r3, d5a36 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a30:	2203      	movs	r2, #3
   d5a32:	4601      	mov	r1, r0
   d5a34:	4798      	blx	r3
    }
   d5a36:	4620      	mov	r0, r4
   d5a38:	bd10      	pop	{r4, pc}

000d5a3a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a3a:	2200      	movs	r2, #0
   d5a3c:	4611      	mov	r1, r2
   d5a3e:	6840      	ldr	r0, [r0, #4]
   d5a40:	f7ff b9d4 	b.w	d4dec <network_listening>

000d5a44 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a44:	2200      	movs	r2, #0
   d5a46:	4611      	mov	r1, r2
   d5a48:	6840      	ldr	r0, [r0, #4]
   d5a4a:	f7ff b9df 	b.w	d4e0c <network_get_listen_timeout>

000d5a4e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a4e:	2200      	movs	r2, #0
   d5a50:	6840      	ldr	r0, [r0, #4]
   d5a52:	f7ff b9d3 	b.w	d4dfc <network_set_listen_timeout>

000d5a56 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a56:	2200      	movs	r2, #0
   d5a58:	f081 0101 	eor.w	r1, r1, #1
   d5a5c:	6840      	ldr	r0, [r0, #4]
   d5a5e:	f7ff b9bd 	b.w	d4ddc <network_listen>

000d5a62 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5a62:	2300      	movs	r3, #0
   d5a64:	461a      	mov	r2, r3
   d5a66:	4619      	mov	r1, r3
   d5a68:	6840      	ldr	r0, [r0, #4]
   d5a6a:	f7ff b9af 	b.w	d4dcc <network_off>

000d5a6e <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a6e:	2300      	movs	r3, #0
   d5a70:	461a      	mov	r2, r3
   d5a72:	4619      	mov	r1, r3
   d5a74:	6840      	ldr	r0, [r0, #4]
   d5a76:	f7ff b9a1 	b.w	d4dbc <network_on>

000d5a7a <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a7a:	2200      	movs	r2, #0
   d5a7c:	4611      	mov	r1, r2
   d5a7e:	6840      	ldr	r0, [r0, #4]
   d5a80:	f7ff b994 	b.w	d4dac <network_ready>

000d5a84 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a84:	2200      	movs	r2, #0
   d5a86:	4611      	mov	r1, r2
   d5a88:	6840      	ldr	r0, [r0, #4]
   d5a8a:	f7ff b97f 	b.w	d4d8c <network_connecting>

000d5a8e <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a8e:	2200      	movs	r2, #0
   d5a90:	2102      	movs	r1, #2
   d5a92:	6840      	ldr	r0, [r0, #4]
   d5a94:	f7ff b982 	b.w	d4d9c <network_disconnect>

000d5a98 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a98:	2300      	movs	r3, #0
   d5a9a:	461a      	mov	r2, r3
   d5a9c:	6840      	ldr	r0, [r0, #4]
   d5a9e:	f7ff b96d 	b.w	d4d7c <network_connect>
	...

000d5aa4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5aa4:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5aa6:	2203      	movs	r2, #3
   d5aa8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5aaa:	4a02      	ldr	r2, [pc, #8]	; (d5ab4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5aac:	601a      	str	r2, [r3, #0]
   d5aae:	4770      	bx	lr
   d5ab0:	2003e3d0 	.word	0x2003e3d0
   d5ab4:	000d74a0 	.word	0x000d74a0

000d5ab8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5ab8:	4770      	bx	lr

000d5aba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5abc:	4606      	mov	r6, r0
   d5abe:	4615      	mov	r5, r2
   d5ac0:	460c      	mov	r4, r1
   d5ac2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ac4:	42bc      	cmp	r4, r7
   d5ac6:	d006      	beq.n	d5ad6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5ac8:	6833      	ldr	r3, [r6, #0]
   d5aca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5ace:	689b      	ldr	r3, [r3, #8]
   d5ad0:	4630      	mov	r0, r6
   d5ad2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ad4:	e7f6      	b.n	d5ac4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5ad6:	4628      	mov	r0, r5
   d5ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ada <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5ada:	2200      	movs	r2, #0
   d5adc:	7c00      	ldrb	r0, [r0, #16]
   d5ade:	f7fe bfe1 	b.w	d4aa4 <HAL_I2C_Write_Data>

000d5ae2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5ae2:	2100      	movs	r1, #0
   d5ae4:	7c00      	ldrb	r0, [r0, #16]
   d5ae6:	f7fe bfe5 	b.w	d4ab4 <HAL_I2C_Available_Data>

000d5aea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5aea:	2100      	movs	r1, #0
   d5aec:	7c00      	ldrb	r0, [r0, #16]
   d5aee:	f7fe bfe9 	b.w	d4ac4 <HAL_I2C_Read_Data>

000d5af2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5af2:	2100      	movs	r1, #0
   d5af4:	7c00      	ldrb	r0, [r0, #16]
   d5af6:	f7fe bfed 	b.w	d4ad4 <HAL_I2C_Peek_Data>

000d5afa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5afa:	2100      	movs	r1, #0
   d5afc:	7c00      	ldrb	r0, [r0, #16]
   d5afe:	f7fe bff1 	b.w	d4ae4 <HAL_I2C_Flush_Data>

000d5b02 <_ZN7TwoWireD0Ev>:
   d5b02:	b510      	push	{r4, lr}
   d5b04:	2114      	movs	r1, #20
   d5b06:	4604      	mov	r4, r0
   d5b08:	f001 f8ed 	bl	d6ce6 <_ZdlPvj>
   d5b0c:	4620      	mov	r0, r4
   d5b0e:	bd10      	pop	{r4, pc}

000d5b10 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5b10:	b510      	push	{r4, lr}
   d5b12:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b14:	2300      	movs	r3, #0
   d5b16:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b1c:	60a3      	str	r3, [r4, #8]
   d5b1e:	4b04      	ldr	r3, [pc, #16]	; (d5b30 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5b20:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5b22:	4608      	mov	r0, r1
   d5b24:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5b26:	4611      	mov	r1, r2
   d5b28:	f7fe ffec 	bl	d4b04 <HAL_I2C_Init>
}
   d5b2c:	4620      	mov	r0, r4
   d5b2e:	bd10      	pop	{r4, pc}
   d5b30:	000d74d4 	.word	0x000d74d4

000d5b34 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5b34:	2100      	movs	r1, #0
   d5b36:	7c00      	ldrb	r0, [r0, #16]
   d5b38:	f7fe bfdc 	b.w	d4af4 <HAL_I2C_Is_Enabled>

000d5b3c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5b3c:	4770      	bx	lr

000d5b3e <_ZN9IPAddressD0Ev>:
   d5b3e:	b510      	push	{r4, lr}
   d5b40:	2118      	movs	r1, #24
   d5b42:	4604      	mov	r4, r0
   d5b44:	f001 f8cf 	bl	d6ce6 <_ZdlPvj>
   d5b48:	4620      	mov	r0, r4
   d5b4a:	bd10      	pop	{r4, pc}

000d5b4c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b4e:	7d03      	ldrb	r3, [r0, #20]
   d5b50:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5b52:	b08d      	sub	sp, #52	; 0x34
   d5b54:	460e      	mov	r6, r1
   d5b56:	f100 0704 	add.w	r7, r0, #4
   d5b5a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5b5e:	d002      	beq.n	d5b66 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5b60:	f100 0508 	add.w	r5, r0, #8
   d5b64:	e018      	b.n	d5b98 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b66:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b68:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5b6a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5b6e:	232f      	movs	r3, #47	; 0x2f
   d5b70:	462a      	mov	r2, r5
   d5b72:	200a      	movs	r0, #10
   d5b74:	f7fe ffd6 	bl	d4b24 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5b78:	4628      	mov	r0, r5
   d5b7a:	f001 faa3 	bl	d70c4 <strlen>
   d5b7e:	6833      	ldr	r3, [r6, #0]
   d5b80:	4602      	mov	r2, r0
   d5b82:	68db      	ldr	r3, [r3, #12]
   d5b84:	4629      	mov	r1, r5
   d5b86:	4630      	mov	r0, r6
   d5b88:	4798      	blx	r3
   d5b8a:	e00f      	b.n	d5bac <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5b8c:	b124      	cbz	r4, d5b98 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5b8e:	212e      	movs	r1, #46	; 0x2e
   d5b90:	4630      	mov	r0, r6
   d5b92:	f000 f9ef 	bl	d5f74 <_ZN5Print5printEc>
   d5b96:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5b98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5b9c:	220a      	movs	r2, #10
   d5b9e:	4630      	mov	r0, r6
   d5ba0:	f000 fa01 	bl	d5fa6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5ba4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5ba6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5ba8:	d1f0      	bne.n	d5b8c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5baa:	4620      	mov	r0, r4
    }
    return n;
}
   d5bac:	b00d      	add	sp, #52	; 0x34
   d5bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5bb0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5bb0:	b510      	push	{r4, lr}
   d5bb2:	4b05      	ldr	r3, [pc, #20]	; (d5bc8 <_ZN9IPAddressC1Ev+0x18>)
   d5bb4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5bb6:	2211      	movs	r2, #17
   d5bb8:	f840 3b04 	str.w	r3, [r0], #4
   d5bbc:	2100      	movs	r1, #0
   d5bbe:	f001 fa3e 	bl	d703e <memset>
{
    clear();
}
   d5bc2:	4620      	mov	r0, r4
   d5bc4:	bd10      	pop	{r4, pc}
   d5bc6:	bf00      	nop
   d5bc8:	000d74fc 	.word	0x000d74fc

000d5bcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5bcc:	4603      	mov	r3, r0
   d5bce:	4a07      	ldr	r2, [pc, #28]	; (d5bec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5bd0:	b510      	push	{r4, lr}
   d5bd2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5bd6:	f101 0210 	add.w	r2, r1, #16
   d5bda:	f851 4b04 	ldr.w	r4, [r1], #4
   d5bde:	f843 4b04 	str.w	r4, [r3], #4
   d5be2:	4291      	cmp	r1, r2
   d5be4:	d1f9      	bne.n	d5bda <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5be6:	780a      	ldrb	r2, [r1, #0]
   d5be8:	701a      	strb	r2, [r3, #0]
}
   d5bea:	bd10      	pop	{r4, pc}
   d5bec:	000d74fc 	.word	0x000d74fc

000d5bf0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5bf0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5bf2:	2b04      	cmp	r3, #4
   d5bf4:	d101      	bne.n	d5bfa <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5bf6:	6840      	ldr	r0, [r0, #4]
   d5bf8:	e008      	b.n	d5c0c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5bfa:	2b06      	cmp	r3, #6
   d5bfc:	d10a      	bne.n	d5c14 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5bfe:	6843      	ldr	r3, [r0, #4]
   d5c00:	b953      	cbnz	r3, d5c18 <_ZNK9IPAddresscvbEv+0x28>
   d5c02:	6883      	ldr	r3, [r0, #8]
   d5c04:	b943      	cbnz	r3, d5c18 <_ZNK9IPAddresscvbEv+0x28>
   d5c06:	68c3      	ldr	r3, [r0, #12]
   d5c08:	b933      	cbnz	r3, d5c18 <_ZNK9IPAddresscvbEv+0x28>
   d5c0a:	6900      	ldr	r0, [r0, #16]
   d5c0c:	3000      	adds	r0, #0
   d5c0e:	bf18      	it	ne
   d5c10:	2001      	movne	r0, #1
   d5c12:	4770      	bx	lr
    } else {
        return false;
   d5c14:	2000      	movs	r0, #0
   d5c16:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5c18:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5c1a:	4770      	bx	lr

000d5c1c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5c1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5c1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5c22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5c26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5c2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5c2e:	2304      	movs	r3, #4
   d5c30:	6041      	str	r1, [r0, #4]
   d5c32:	7503      	strb	r3, [r0, #20]
   d5c34:	bd10      	pop	{r4, pc}

000d5c36 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5c36:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5c38:	780d      	ldrb	r5, [r1, #0]
   d5c3a:	788b      	ldrb	r3, [r1, #2]
   d5c3c:	784a      	ldrb	r2, [r1, #1]
   d5c3e:	78c9      	ldrb	r1, [r1, #3]
   d5c40:	9100      	str	r1, [sp, #0]
   d5c42:	4629      	mov	r1, r5
   d5c44:	f7ff ffea 	bl	d5c1c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5c48:	b003      	add	sp, #12
   d5c4a:	bd30      	pop	{r4, r5, pc}

000d5c4c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5c4c:	4b01      	ldr	r3, [pc, #4]	; (d5c54 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5c4e:	4a02      	ldr	r2, [pc, #8]	; (d5c58 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5c50:	601a      	str	r2, [r3, #0]
   d5c52:	4770      	bx	lr
   d5c54:	2003e3d8 	.word	0x2003e3d8
   d5c58:	000d757b 	.word	0x000d757b

000d5c5c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c5c:	2200      	movs	r2, #0
   d5c5e:	4611      	mov	r1, r2
   d5c60:	6840      	ldr	r0, [r0, #4]
   d5c62:	f7ff b8c3 	b.w	d4dec <network_listening>

000d5c66 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c66:	2200      	movs	r2, #0
   d5c68:	4611      	mov	r1, r2
   d5c6a:	6840      	ldr	r0, [r0, #4]
   d5c6c:	f7ff b8ce 	b.w	d4e0c <network_get_listen_timeout>

000d5c70 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c70:	2200      	movs	r2, #0
   d5c72:	6840      	ldr	r0, [r0, #4]
   d5c74:	f7ff b8c2 	b.w	d4dfc <network_set_listen_timeout>

000d5c78 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c78:	2200      	movs	r2, #0
   d5c7a:	f081 0101 	eor.w	r1, r1, #1
   d5c7e:	6840      	ldr	r0, [r0, #4]
   d5c80:	f7ff b8ac 	b.w	d4ddc <network_listen>

000d5c84 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5c84:	2300      	movs	r3, #0
   d5c86:	461a      	mov	r2, r3
   d5c88:	2101      	movs	r1, #1
   d5c8a:	6840      	ldr	r0, [r0, #4]
   d5c8c:	f7ff b89e 	b.w	d4dcc <network_off>

000d5c90 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5c90:	2300      	movs	r3, #0
   d5c92:	461a      	mov	r2, r3
   d5c94:	4619      	mov	r1, r3
   d5c96:	6840      	ldr	r0, [r0, #4]
   d5c98:	f7ff b890 	b.w	d4dbc <network_on>

000d5c9c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5c9c:	2200      	movs	r2, #0
   d5c9e:	4611      	mov	r1, r2
   d5ca0:	6840      	ldr	r0, [r0, #4]
   d5ca2:	f7ff b883 	b.w	d4dac <network_ready>

000d5ca6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ca6:	2200      	movs	r2, #0
   d5ca8:	4611      	mov	r1, r2
   d5caa:	6840      	ldr	r0, [r0, #4]
   d5cac:	f7ff b86e 	b.w	d4d8c <network_connecting>

000d5cb0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5cb0:	2200      	movs	r2, #0
   d5cb2:	2102      	movs	r1, #2
   d5cb4:	6840      	ldr	r0, [r0, #4]
   d5cb6:	f7ff b871 	b.w	d4d9c <network_disconnect>

000d5cba <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cba:	2300      	movs	r3, #0
   d5cbc:	461a      	mov	r2, r3
   d5cbe:	6840      	ldr	r0, [r0, #4]
   d5cc0:	f7ff b85c 	b.w	d4d7c <network_connect>

000d5cc4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5cc4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cc6:	4605      	mov	r5, r0
   d5cc8:	b188      	cbz	r0, d5cee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5cca:	6804      	ldr	r4, [r0, #0]
   d5ccc:	b14c      	cbz	r4, d5ce2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5cce:	68a3      	ldr	r3, [r4, #8]
   d5cd0:	b11b      	cbz	r3, d5cda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5cd2:	2203      	movs	r2, #3
   d5cd4:	4621      	mov	r1, r4
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cda:	2110      	movs	r1, #16
   d5cdc:	4620      	mov	r0, r4
   d5cde:	f001 f802 	bl	d6ce6 <_ZdlPvj>
   d5ce2:	4628      	mov	r0, r5
   d5ce4:	2114      	movs	r1, #20
      }
   d5ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5cea:	f000 bffc 	b.w	d6ce6 <_ZdlPvj>
   d5cee:	bd38      	pop	{r3, r4, r5, pc}

000d5cf0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5cf0:	b110      	cbz	r0, d5cf8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5cf2:	6803      	ldr	r3, [r0, #0]
   d5cf4:	685b      	ldr	r3, [r3, #4]
   d5cf6:	4718      	bx	r3
   d5cf8:	4770      	bx	lr

000d5cfa <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5cfa:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5cfc:	6803      	ldr	r3, [r0, #0]
   d5cfe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5d00:	b1bb      	cbz	r3, d5d32 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5d02:	6858      	ldr	r0, [r3, #4]
   d5d04:	f7fe fe56 	bl	d49b4 <os_thread_is_current>
   d5d08:	b978      	cbnz	r0, d5d2a <_ZN6ThreadD1Ev+0x30>
   d5d0a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5d0c:	7c5a      	ldrb	r2, [r3, #17]
   d5d0e:	b912      	cbnz	r2, d5d16 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5d10:	6858      	ldr	r0, [r3, #4]
   d5d12:	f7fe fe57 	bl	d49c4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5d16:	6823      	ldr	r3, [r4, #0]
   d5d18:	6858      	ldr	r0, [r3, #4]
   d5d1a:	f7fe fe5b 	bl	d49d4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d1e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d20:	2300      	movs	r3, #0
   d5d22:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5d24:	b128      	cbz	r0, d5d32 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5d26:	f7ff ffcd 	bl	d5cc4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d2a:	6820      	ldr	r0, [r4, #0]
   d5d2c:	b108      	cbz	r0, d5d32 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5d2e:	f7ff ffc9 	bl	d5cc4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5d32:	4620      	mov	r0, r4
   d5d34:	bd10      	pop	{r4, pc}

000d5d36 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5d36:	b538      	push	{r3, r4, r5, lr}
   d5d38:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d3a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5d3e:	b108      	cbz	r0, d5d44 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d40:	f7fe f9ad 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5d44:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5d48:	b108      	cbz	r0, d5d4e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5d4a:	f7fe fe53 	bl	d49f4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d4e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5d52:	b135      	cbz	r5, d5d62 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d54:	4628      	mov	r0, r5
   d5d56:	f7ff ffd0 	bl	d5cfa <_ZN6ThreadD1Ev>
   d5d5a:	2104      	movs	r1, #4
   d5d5c:	4628      	mov	r0, r5
   d5d5e:	f000 ffc2 	bl	d6ce6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d62:	6820      	ldr	r0, [r4, #0]
   d5d64:	b108      	cbz	r0, d5d6a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5d66:	f7ff ffc3 	bl	d5cf0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d70 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5d70:	b510      	push	{r4, lr}
   d5d72:	4b04      	ldr	r3, [pc, #16]	; (d5d84 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5d74:	4604      	mov	r4, r0
   d5d76:	f840 3b08 	str.w	r3, [r0], #8
   d5d7a:	f7ff ffdc 	bl	d5d36 <_ZN5spark11MeshPublishD1Ev>
   d5d7e:	4620      	mov	r0, r4
   d5d80:	bd10      	pop	{r4, pc}
   d5d82:	bf00      	nop
   d5d84:	000d75ec 	.word	0x000d75ec

000d5d88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5d88:	b538      	push	{r3, r4, r5, lr}
   d5d8a:	4c0e      	ldr	r4, [pc, #56]	; (d5dc4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5d8c:	4b0e      	ldr	r3, [pc, #56]	; (d5dc8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5d8e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5d90:	2500      	movs	r5, #0
   d5d92:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5d94:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5d98:	6063      	str	r3, [r4, #4]
   d5d9a:	60a5      	str	r5, [r4, #8]
   d5d9c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5da0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5da4:	f7fe fe1e 	bl	d49e4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5da8:	4b08      	ldr	r3, [pc, #32]	; (d5dcc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5daa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5dae:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5db2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5db4:	4620      	mov	r0, r4
   d5db6:	4a06      	ldr	r2, [pc, #24]	; (d5dd0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5db8:	4906      	ldr	r1, [pc, #24]	; (d5dd4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5dbe:	f000 bf8d 	b.w	d6cdc <__aeabi_atexit>
   d5dc2:	bf00      	nop
   d5dc4:	2003e3dc 	.word	0x2003e3dc
   d5dc8:	000d7620 	.word	0x000d7620
   d5dcc:	000d75ec 	.word	0x000d75ec
   d5dd0:	2003dea0 	.word	0x2003dea0
   d5dd4:	000d5d71 	.word	0x000d5d71

000d5dd8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5dd8:	2300      	movs	r3, #0
   d5dda:	461a      	mov	r2, r3
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	f7fe bfcd 	b.w	d4d7c <network_connect>

000d5de2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5de2:	2200      	movs	r2, #0
   d5de4:	2102      	movs	r1, #2
   d5de6:	6840      	ldr	r0, [r0, #4]
   d5de8:	f7fe bfd8 	b.w	d4d9c <network_disconnect>

000d5dec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5dec:	2200      	movs	r2, #0
   d5dee:	4611      	mov	r1, r2
   d5df0:	6840      	ldr	r0, [r0, #4]
   d5df2:	f7fe bfcb 	b.w	d4d8c <network_connecting>

000d5df6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5df6:	2200      	movs	r2, #0
   d5df8:	4611      	mov	r1, r2
   d5dfa:	6840      	ldr	r0, [r0, #4]
   d5dfc:	f7fe bfd6 	b.w	d4dac <network_ready>

000d5e00 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5e00:	2300      	movs	r3, #0
   d5e02:	461a      	mov	r2, r3
   d5e04:	4619      	mov	r1, r3
   d5e06:	6840      	ldr	r0, [r0, #4]
   d5e08:	f7fe bfd8 	b.w	d4dbc <network_on>

000d5e0c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5e0c:	2300      	movs	r3, #0
   d5e0e:	461a      	mov	r2, r3
   d5e10:	4619      	mov	r1, r3
   d5e12:	6840      	ldr	r0, [r0, #4]
   d5e14:	f7fe bfda 	b.w	d4dcc <network_off>

000d5e18 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5e18:	2200      	movs	r2, #0
   d5e1a:	f081 0101 	eor.w	r1, r1, #1
   d5e1e:	6840      	ldr	r0, [r0, #4]
   d5e20:	f7fe bfdc 	b.w	d4ddc <network_listen>

000d5e24 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5e24:	2200      	movs	r2, #0
   d5e26:	6840      	ldr	r0, [r0, #4]
   d5e28:	f7fe bfe8 	b.w	d4dfc <network_set_listen_timeout>

000d5e2c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e2c:	2200      	movs	r2, #0
   d5e2e:	4611      	mov	r1, r2
   d5e30:	6840      	ldr	r0, [r0, #4]
   d5e32:	f7fe bfeb 	b.w	d4e0c <network_get_listen_timeout>

000d5e36 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e36:	2200      	movs	r2, #0
   d5e38:	4611      	mov	r1, r2
   d5e3a:	6840      	ldr	r0, [r0, #4]
   d5e3c:	f7fe bfd6 	b.w	d4dec <network_listening>

000d5e40 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e44:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e46:	b095      	sub	sp, #84	; 0x54
   d5e48:	4616      	mov	r6, r2
   d5e4a:	460d      	mov	r5, r1
   d5e4c:	4607      	mov	r7, r0
    IPAddress addr;
   d5e4e:	f7ff feaf 	bl	d5bb0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5e52:	4621      	mov	r1, r4
   d5e54:	2220      	movs	r2, #32
   d5e56:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e58:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e5a:	f001 f8f0 	bl	d703e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e5e:	2340      	movs	r3, #64	; 0x40
   d5e60:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e62:	4621      	mov	r1, r4
   d5e64:	466b      	mov	r3, sp
   d5e66:	aa0c      	add	r2, sp, #48	; 0x30
   d5e68:	4630      	mov	r0, r6
   d5e6a:	f7fe fe7b 	bl	d4b64 <netdb_getaddrinfo>
    if (!r) {
   d5e6e:	4604      	mov	r4, r0
   d5e70:	2800      	cmp	r0, #0
   d5e72:	d144      	bne.n	d5efe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e74:	4602      	mov	r2, r0
   d5e76:	2101      	movs	r1, #1
   d5e78:	6868      	ldr	r0, [r5, #4]
   d5e7a:	f7fe ff97 	bl	d4dac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e7e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e80:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e82:	4622      	mov	r2, r4
   d5e84:	6868      	ldr	r0, [r5, #4]
   d5e86:	f7fe ff91 	bl	d4dac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e8a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e8c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5e8e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e90:	2e00      	cmp	r6, #0
   d5e92:	d034      	beq.n	d5efe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5e94:	2900      	cmp	r1, #0
   d5e96:	d132      	bne.n	d5efe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e98:	6873      	ldr	r3, [r6, #4]
   d5e9a:	2b02      	cmp	r3, #2
   d5e9c:	d002      	beq.n	d5ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5e9e:	2b0a      	cmp	r3, #10
   d5ea0:	d009      	beq.n	d5eb6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5ea2:	e02a      	b.n	d5efa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5ea4:	f1b8 0f00 	cmp.w	r8, #0
   d5ea8:	d027      	beq.n	d5efa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5eaa:	6971      	ldr	r1, [r6, #20]
   d5eac:	4638      	mov	r0, r7
   d5eae:	3104      	adds	r1, #4
   d5eb0:	f7ff fec1 	bl	d5c36 <_ZN9IPAddressaSEPKh>
   d5eb4:	e020      	b.n	d5ef8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5eb6:	f1b9 0f00 	cmp.w	r9, #0
   d5eba:	d01e      	beq.n	d5efa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5ebc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5ebe:	2211      	movs	r2, #17
   d5ec0:	a801      	add	r0, sp, #4
   d5ec2:	f001 f8bc 	bl	d703e <memset>
                    a.v = 6;
   d5ec6:	2306      	movs	r3, #6
   d5ec8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ecc:	ad01      	add	r5, sp, #4
   d5ece:	f104 0308 	add.w	r3, r4, #8
   d5ed2:	3418      	adds	r4, #24
   d5ed4:	6818      	ldr	r0, [r3, #0]
   d5ed6:	6859      	ldr	r1, [r3, #4]
   d5ed8:	462a      	mov	r2, r5
   d5eda:	c203      	stmia	r2!, {r0, r1}
   d5edc:	3308      	adds	r3, #8
   d5ede:	42a3      	cmp	r3, r4
   d5ee0:	4615      	mov	r5, r2
   d5ee2:	d1f7      	bne.n	d5ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5ee4:	a901      	add	r1, sp, #4
   d5ee6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5ee8:	ad07      	add	r5, sp, #28
   d5eea:	f7ff fe6f 	bl	d5bcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5ef0:	1d3c      	adds	r4, r7, #4
   d5ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ef4:	682b      	ldr	r3, [r5, #0]
   d5ef6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5ef8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5efa:	69f6      	ldr	r6, [r6, #28]
   d5efc:	e7c8      	b.n	d5e90 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5efe:	9800      	ldr	r0, [sp, #0]
   d5f00:	f7fe fe28 	bl	d4b54 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5f04:	4638      	mov	r0, r7
   d5f06:	b015      	add	sp, #84	; 0x54
   d5f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5f0c:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5f0e:	4a03      	ldr	r2, [pc, #12]	; (d5f1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5f10:	601a      	str	r2, [r3, #0]
   d5f12:	2200      	movs	r2, #0
   d5f14:	605a      	str	r2, [r3, #4]
   d5f16:	4770      	bx	lr
   d5f18:	2003e5b0 	.word	0x2003e5b0
   d5f1c:	000d7620 	.word	0x000d7620

000d5f20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f22:	4606      	mov	r6, r0
   d5f24:	460d      	mov	r5, r1
   d5f26:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5f28:	2400      	movs	r4, #0
  while (size--) {
   d5f2a:	42bd      	cmp	r5, r7
   d5f2c:	d00c      	beq.n	d5f48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5f2e:	6833      	ldr	r3, [r6, #0]
   d5f30:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5f34:	689b      	ldr	r3, [r3, #8]
   d5f36:	4630      	mov	r0, r6
   d5f38:	4798      	blx	r3
     if (chunk>=0)
   d5f3a:	2800      	cmp	r0, #0
   d5f3c:	db01      	blt.n	d5f42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5f3e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5f40:	e7f3      	b.n	d5f2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5f42:	2c00      	cmp	r4, #0
   d5f44:	bf08      	it	eq
   d5f46:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5f48:	4620      	mov	r0, r4
   d5f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f4c:	b570      	push	{r4, r5, r6, lr}
   d5f4e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5f50:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5f52:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f54:	b149      	cbz	r1, d5f6a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f56:	f001 f8b5 	bl	d70c4 <strlen>
   d5f5a:	682b      	ldr	r3, [r5, #0]
   d5f5c:	4602      	mov	r2, r0
   d5f5e:	4621      	mov	r1, r4
   d5f60:	4628      	mov	r0, r5
   d5f62:	68db      	ldr	r3, [r3, #12]
    }
   d5f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5f68:	4718      	bx	r3
    }
   d5f6a:	bd70      	pop	{r4, r5, r6, pc}

000d5f6c <_ZN5Print5printEPKc>:
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	f7ff ffed 	bl	d5f4c <_ZN5Print5writeEPKc>
   d5f72:	bd08      	pop	{r3, pc}

000d5f74 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5f74:	6803      	ldr	r3, [r0, #0]
   d5f76:	689b      	ldr	r3, [r3, #8]
   d5f78:	4718      	bx	r3

000d5f7a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5f7c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f7e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5f80:	f7ff fff8 	bl	d5f74 <_ZN5Print5printEc>
  n += print('\n');
   d5f84:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5f86:	4604      	mov	r4, r0
  n += print('\n');
   d5f88:	4628      	mov	r0, r5
   d5f8a:	f7ff fff3 	bl	d5f74 <_ZN5Print5printEc>
  return n;
}
   d5f8e:	4420      	add	r0, r4
   d5f90:	bd38      	pop	{r3, r4, r5, pc}

000d5f92 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5f92:	b538      	push	{r3, r4, r5, lr}
   d5f94:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f96:	f7ff ffd9 	bl	d5f4c <_ZN5Print5writeEPKc>
   d5f9a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5f9c:	4628      	mov	r0, r5
   d5f9e:	f7ff ffec 	bl	d5f7a <_ZN5Print7printlnEv>
  return n;
}
   d5fa2:	4420      	add	r0, r4
   d5fa4:	bd38      	pop	{r3, r4, r5, pc}

000d5fa6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5fa6:	b530      	push	{r4, r5, lr}
   d5fa8:	b08b      	sub	sp, #44	; 0x2c
   d5faa:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5fac:	2100      	movs	r1, #0
   d5fae:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5fb2:	2a01      	cmp	r2, #1
   d5fb4:	bf98      	it	ls
   d5fb6:	220a      	movls	r2, #10
   d5fb8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5fbc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5fc0:	fb05 3312 	mls	r3, r5, r2, r3
   d5fc4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5fc8:	2b09      	cmp	r3, #9
   d5fca:	bf94      	ite	ls
   d5fcc:	3330      	addls	r3, #48	; 0x30
   d5fce:	3337      	addhi	r3, #55	; 0x37
   d5fd0:	b2db      	uxtb	r3, r3
   d5fd2:	4621      	mov	r1, r4
   d5fd4:	f804 3901 	strb.w	r3, [r4], #-1
   d5fd8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5fda:	2d00      	cmp	r5, #0
   d5fdc:	d1ee      	bne.n	d5fbc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5fde:	f7ff ffb5 	bl	d5f4c <_ZN5Print5writeEPKc>
}
   d5fe2:	b00b      	add	sp, #44	; 0x2c
   d5fe4:	bd30      	pop	{r4, r5, pc}

000d5fe6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5fe6:	b510      	push	{r4, lr}
   d5fe8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5fea:	f7ff fd1d 	bl	d5a28 <_ZNSt14_Function_baseD1Ev>
   d5fee:	4620      	mov	r0, r4
   d5ff0:	bd10      	pop	{r4, pc}
	...

000d5ff4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5ff4:	4803      	ldr	r0, [pc, #12]	; (d6004 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5ff6:	4a04      	ldr	r2, [pc, #16]	; (d6008 <_GLOBAL__sub_I_RGB+0x14>)
   d5ff8:	4904      	ldr	r1, [pc, #16]	; (d600c <_GLOBAL__sub_I_RGB+0x18>)
   d5ffa:	2300      	movs	r3, #0
   d5ffc:	6083      	str	r3, [r0, #8]
   d5ffe:	f000 be6d 	b.w	d6cdc <__aeabi_atexit>
   d6002:	bf00      	nop
   d6004:	2003e5b8 	.word	0x2003e5b8
   d6008:	2003dea0 	.word	0x2003dea0
   d600c:	000d5fe7 	.word	0x000d5fe7

000d6010 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d6010:	4770      	bx	lr

000d6012 <_ZN8SPIClassD0Ev>:
   d6012:	b510      	push	{r4, lr}
   d6014:	210c      	movs	r1, #12
   d6016:	4604      	mov	r4, r0
   d6018:	f000 fe65 	bl	d6ce6 <_ZdlPvj>
   d601c:	4620      	mov	r0, r4
   d601e:	bd10      	pop	{r4, pc}

000d6020 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6020:	b510      	push	{r4, lr}
   d6022:	4b05      	ldr	r3, [pc, #20]	; (d6038 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d6024:	6003      	str	r3, [r0, #0]
   d6026:	4604      	mov	r4, r0
{
    _spi = spi;
   d6028:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d602a:	4608      	mov	r0, r1
   d602c:	f7fe fdd2 	bl	d4bd4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6030:	2300      	movs	r3, #0
   d6032:	60a3      	str	r3, [r4, #8]
}
   d6034:	4620      	mov	r0, r4
   d6036:	bd10      	pop	{r4, pc}
   d6038:	000d7654 	.word	0x000d7654

000d603c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d603c:	7900      	ldrb	r0, [r0, #4]
   d603e:	f7fe bdd1 	b.w	d4be4 <HAL_SPI_Is_Enabled>

000d6042 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6042:	b510      	push	{r4, lr}
   d6044:	4604      	mov	r4, r0
{
	free(buffer);
   d6046:	6800      	ldr	r0, [r0, #0]
   d6048:	f7fe fef0 	bl	d4e2c <free>
}
   d604c:	4620      	mov	r0, r4
   d604e:	bd10      	pop	{r4, pc}

000d6050 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6050:	b510      	push	{r4, lr}
   d6052:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6054:	6800      	ldr	r0, [r0, #0]
   d6056:	b108      	cbz	r0, d605c <_ZN6String10invalidateEv+0xc>
   d6058:	f7fe fee8 	bl	d4e2c <free>
	buffer = NULL;
   d605c:	2300      	movs	r3, #0
   d605e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6060:	60a3      	str	r3, [r4, #8]
   d6062:	6063      	str	r3, [r4, #4]
   d6064:	bd10      	pop	{r4, pc}

000d6066 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6066:	b538      	push	{r3, r4, r5, lr}
   d6068:	4604      	mov	r4, r0
   d606a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d606c:	6800      	ldr	r0, [r0, #0]
   d606e:	3101      	adds	r1, #1
   d6070:	f7fe fee4 	bl	d4e3c <realloc>
	if (newbuffer) {
   d6074:	b110      	cbz	r0, d607c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6076:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d607a:	2001      	movs	r0, #1
	}
	return 0;
}
   d607c:	bd38      	pop	{r3, r4, r5, pc}

000d607e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d607e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6080:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6082:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6084:	b113      	cbz	r3, d608c <_ZN6String7reserveEj+0xe>
   d6086:	6843      	ldr	r3, [r0, #4]
   d6088:	428b      	cmp	r3, r1
   d608a:	d207      	bcs.n	d609c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d608c:	4620      	mov	r0, r4
   d608e:	f7ff ffea 	bl	d6066 <_ZN6String12changeBufferEj>
   d6092:	b120      	cbz	r0, d609e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6094:	68a3      	ldr	r3, [r4, #8]
   d6096:	b90b      	cbnz	r3, d609c <_ZN6String7reserveEj+0x1e>
   d6098:	6822      	ldr	r2, [r4, #0]
   d609a:	7013      	strb	r3, [r2, #0]
   d609c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d609e:	bd10      	pop	{r4, pc}

000d60a0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d60a0:	b570      	push	{r4, r5, r6, lr}
   d60a2:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d60a4:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d60a6:	4604      	mov	r4, r0
   d60a8:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d60aa:	f7ff ffe8 	bl	d607e <_ZN6String7reserveEj>
   d60ae:	b918      	cbnz	r0, d60b8 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d60b0:	4620      	mov	r0, r4
   d60b2:	f7ff ffcd 	bl	d6050 <_ZN6String10invalidateEv>
		return *this;
   d60b6:	e009      	b.n	d60cc <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d60b8:	462a      	mov	r2, r5
   d60ba:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d60bc:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d60be:	6820      	ldr	r0, [r4, #0]
   d60c0:	f000 ff97 	bl	d6ff2 <memcpy>
	buffer[len] = 0;
   d60c4:	6822      	ldr	r2, [r4, #0]
   d60c6:	68a3      	ldr	r3, [r4, #8]
   d60c8:	2100      	movs	r1, #0
   d60ca:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d60cc:	4620      	mov	r0, r4
   d60ce:	bd70      	pop	{r4, r5, r6, pc}

000d60d0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d60d0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d60d2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d60d4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d60d6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d60d8:	6043      	str	r3, [r0, #4]
	len = 0;
   d60da:	6083      	str	r3, [r0, #8]
	flags = 0;
   d60dc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d60de:	460d      	mov	r5, r1
   d60e0:	b139      	cbz	r1, d60f2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d60e2:	4608      	mov	r0, r1
   d60e4:	f000 ffee 	bl	d70c4 <strlen>
   d60e8:	4629      	mov	r1, r5
   d60ea:	4602      	mov	r2, r0
   d60ec:	4620      	mov	r0, r4
   d60ee:	f7ff ffd7 	bl	d60a0 <_ZN6String4copyEPKcj>
}
   d60f2:	4620      	mov	r0, r4
   d60f4:	bd38      	pop	{r3, r4, r5, pc}

000d60f6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d60f6:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d60f8:	b510      	push	{r4, lr}
   d60fa:	460b      	mov	r3, r1
   d60fc:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d60fe:	d007      	beq.n	d6110 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6100:	6809      	ldr	r1, [r1, #0]
   d6102:	b119      	cbz	r1, d610c <_ZN6StringaSERKS_+0x16>
   d6104:	689a      	ldr	r2, [r3, #8]
   d6106:	f7ff ffcb 	bl	d60a0 <_ZN6String4copyEPKcj>
   d610a:	e001      	b.n	d6110 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d610c:	f7ff ffa0 	bl	d6050 <_ZN6String10invalidateEv>

	return *this;
}
   d6110:	4620      	mov	r0, r4
   d6112:	bd10      	pop	{r4, pc}

000d6114 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6114:	b538      	push	{r3, r4, r5, lr}
   d6116:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6118:	460c      	mov	r4, r1
   d611a:	b141      	cbz	r1, d612e <_ZN6StringaSEPKc+0x1a>
   d611c:	4608      	mov	r0, r1
   d611e:	f000 ffd1 	bl	d70c4 <strlen>
   d6122:	4621      	mov	r1, r4
   d6124:	4602      	mov	r2, r0
   d6126:	4628      	mov	r0, r5
   d6128:	f7ff ffba 	bl	d60a0 <_ZN6String4copyEPKcj>
   d612c:	e001      	b.n	d6132 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d612e:	f7ff ff8f 	bl	d6050 <_ZN6String10invalidateEv>

	return *this;
}
   d6132:	4628      	mov	r0, r5
   d6134:	bd38      	pop	{r3, r4, r5, pc}

000d6136 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6136:	b570      	push	{r4, r5, r6, lr}
   d6138:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d613a:	460e      	mov	r6, r1
   d613c:	b909      	cbnz	r1, d6142 <_ZN6String6concatEPKcj+0xc>
   d613e:	2000      	movs	r0, #0
   d6140:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6142:	b16a      	cbz	r2, d6160 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6144:	6883      	ldr	r3, [r0, #8]
   d6146:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6148:	4629      	mov	r1, r5
   d614a:	f7ff ff98 	bl	d607e <_ZN6String7reserveEj>
   d614e:	2800      	cmp	r0, #0
   d6150:	d0f5      	beq.n	d613e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6152:	6820      	ldr	r0, [r4, #0]
   d6154:	68a3      	ldr	r3, [r4, #8]
   d6156:	4631      	mov	r1, r6
   d6158:	4418      	add	r0, r3
   d615a:	f000 ffab 	bl	d70b4 <strcpy>
	len = newlen;
   d615e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6160:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6162:	bd70      	pop	{r4, r5, r6, pc}

000d6164 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6164:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6166:	688a      	ldr	r2, [r1, #8]
   d6168:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d616a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d616c:	f7ff ffe3 	bl	d6136 <_ZN6String6concatEPKcj>
   d6170:	b910      	cbnz	r0, d6178 <_ZplRK15StringSumHelperRK6String+0x14>
   d6172:	4620      	mov	r0, r4
   d6174:	f7ff ff6c 	bl	d6050 <_ZN6String10invalidateEv>
	return a;
}
   d6178:	4620      	mov	r0, r4
   d617a:	bd10      	pop	{r4, pc}

000d617c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d617c:	b538      	push	{r3, r4, r5, lr}
   d617e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6180:	460d      	mov	r5, r1
   d6182:	b141      	cbz	r1, d6196 <_ZplRK15StringSumHelperPKc+0x1a>
   d6184:	4608      	mov	r0, r1
   d6186:	f000 ff9d 	bl	d70c4 <strlen>
   d618a:	4629      	mov	r1, r5
   d618c:	4602      	mov	r2, r0
   d618e:	4620      	mov	r0, r4
   d6190:	f7ff ffd1 	bl	d6136 <_ZN6String6concatEPKcj>
   d6194:	b910      	cbnz	r0, d619c <_ZplRK15StringSumHelperPKc+0x20>
   d6196:	4620      	mov	r0, r4
   d6198:	f7ff ff5a 	bl	d6050 <_ZN6String10invalidateEv>
	return a;
}
   d619c:	4620      	mov	r0, r4
   d619e:	bd38      	pop	{r3, r4, r5, pc}

000d61a0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d61a0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61a2:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d61a4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d61a6:	b912      	cbnz	r2, d61ae <_ZNK6String6equalsEPKc+0xe>
   d61a8:	b919      	cbnz	r1, d61b2 <_ZNK6String6equalsEPKc+0x12>
   d61aa:	2001      	movs	r0, #1
   d61ac:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d61ae:	b911      	cbnz	r1, d61b6 <_ZNK6String6equalsEPKc+0x16>
   d61b0:	6803      	ldr	r3, [r0, #0]
   d61b2:	7818      	ldrb	r0, [r3, #0]
   d61b4:	e002      	b.n	d61bc <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d61b6:	6800      	ldr	r0, [r0, #0]
   d61b8:	f000 ff72 	bl	d70a0 <strcmp>
   d61bc:	fab0 f080 	clz	r0, r0
   d61c0:	0940      	lsrs	r0, r0, #5
}
   d61c2:	bd08      	pop	{r3, pc}

000d61c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d61c4:	b510      	push	{r4, lr}
   d61c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d61c8:	6800      	ldr	r0, [r0, #0]
   d61ca:	b118      	cbz	r0, d61d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d61cc:	f7fe fe2e 	bl	d4e2c <free>
            wakeupSource_ = nullptr;
   d61d0:	2300      	movs	r3, #0
   d61d2:	6023      	str	r3, [r4, #0]
   d61d4:	bd10      	pop	{r4, pc}

000d61d6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d61d6:	b510      	push	{r4, lr}
   d61d8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d61da:	f7ff fff3 	bl	d61c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d61de:	4620      	mov	r0, r4
   d61e0:	bd10      	pop	{r4, pc}
	...

000d61e4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d61e4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d61e6:	4c09      	ldr	r4, [pc, #36]	; (d620c <_GLOBAL__sub_I_System+0x28>)
   d61e8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d61ea:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d61ee:	6020      	str	r0, [r4, #0]
   d61f0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d61f2:	71a0      	strb	r0, [r4, #6]
   d61f4:	8120      	strh	r0, [r4, #8]
   d61f6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d61f8:	f7fe fd8c 	bl	d4d14 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d61fc:	4620      	mov	r0, r4
   d61fe:	4a04      	ldr	r2, [pc, #16]	; (d6210 <_GLOBAL__sub_I_System+0x2c>)
   d6200:	4904      	ldr	r1, [pc, #16]	; (d6214 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6206:	f000 bd69 	b.w	d6cdc <__aeabi_atexit>
   d620a:	bf00      	nop
   d620c:	2003e5c8 	.word	0x2003e5c8
   d6210:	2003dea0 	.word	0x2003dea0
   d6214:	000d61d7 	.word	0x000d61d7

000d6218 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6218:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d621a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d621c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d621e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6222:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6224:	2201      	movs	r2, #1
   d6226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d622a:	4621      	mov	r1, r4
   d622c:	47a8      	blx	r5
}
   d622e:	b003      	add	sp, #12
   d6230:	bd30      	pop	{r4, r5, pc}

000d6232 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6232:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6234:	6803      	ldr	r3, [r0, #0]
   d6236:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d623c:	46a4      	mov	ip, r4
}
   d623e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6242:	4760      	bx	ip

000d6244 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6244:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6246:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6248:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d624a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d624e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6250:	4621      	mov	r1, r4
   d6252:	4613      	mov	r3, r2
   d6254:	2201      	movs	r2, #1
   d6256:	47a8      	blx	r5
}
   d6258:	b003      	add	sp, #12
   d625a:	bd30      	pop	{r4, r5, pc}

000d625c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d625c:	4770      	bx	lr

000d625e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d625e:	b538      	push	{r3, r4, r5, lr}
   d6260:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6262:	681a      	ldr	r2, [r3, #0]
   d6264:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6266:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6268:	da05      	bge.n	d6276 <_ZN9TCPClient9connectedEv+0x18>
   d626a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d626e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6272:	429a      	cmp	r2, r3
   d6274:	d001      	beq.n	d627a <_ZN9TCPClient9connectedEv+0x1c>
   d6276:	2501      	movs	r5, #1
   d6278:	e00b      	b.n	d6292 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d627a:	6803      	ldr	r3, [r0, #0]
   d627c:	691b      	ldr	r3, [r3, #16]
   d627e:	4798      	blx	r3
   d6280:	2800      	cmp	r0, #0
   d6282:	bf14      	ite	ne
   d6284:	2501      	movne	r5, #1
   d6286:	2500      	moveq	r5, #0
        if (!rv) {
   d6288:	d103      	bne.n	d6292 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d628a:	6823      	ldr	r3, [r4, #0]
   d628c:	4620      	mov	r0, r4
   d628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6290:	4798      	blx	r3
        }
    }
    return rv;
}
   d6292:	4628      	mov	r0, r5
   d6294:	bd38      	pop	{r3, r4, r5, pc}

000d6296 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6296:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6298:	6818      	ldr	r0, [r3, #0]
}
   d629a:	43c0      	mvns	r0, r0
   d629c:	0fc0      	lsrs	r0, r0, #31
   d629e:	4770      	bx	lr

000d62a0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d62a0:	4770      	bx	lr

000d62a2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d62a2:	2000      	movs	r0, #0
   d62a4:	4770      	bx	lr

000d62a6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d62a6:	b510      	push	{r4, lr}
   d62a8:	2114      	movs	r1, #20
   d62aa:	4604      	mov	r4, r0
   d62ac:	f000 fd1b 	bl	d6ce6 <_ZdlPvj>
   d62b0:	4620      	mov	r0, r4
   d62b2:	bd10      	pop	{r4, pc}

000d62b4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d62b4:	f7fd bef1 	b.w	d409a <_ZdlPv>

000d62b8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d62b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d62ba:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d62bc:	2200      	movs	r2, #0
   d62be:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d62c0:	9202      	str	r2, [sp, #8]
   d62c2:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d62c4:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d62c6:	4604      	mov	r4, r0
   d62c8:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d62ca:	d008      	beq.n	d62de <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d62cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d62d0:	fbb3 f1f2 	udiv	r1, r3, r2
   d62d4:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d62d6:	fb02 3111 	mls	r1, r2, r1, r3
   d62da:	434a      	muls	r2, r1
   d62dc:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d62de:	6960      	ldr	r0, [r4, #20]
   d62e0:	2308      	movs	r3, #8
   d62e2:	9300      	str	r3, [sp, #0]
   d62e4:	f241 0205 	movw	r2, #4101	; 0x1005
   d62e8:	446b      	add	r3, sp
   d62ea:	f640 71ff 	movw	r1, #4095	; 0xfff
   d62ee:	6800      	ldr	r0, [r0, #0]
   d62f0:	f7fe fc40 	bl	d4b74 <sock_setsockopt>
    if (ret < 0) {
   d62f4:	2800      	cmp	r0, #0
   d62f6:	db08      	blt.n	d630a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d62f8:	6960      	ldr	r0, [r4, #20]
   d62fa:	2300      	movs	r3, #0
   d62fc:	4632      	mov	r2, r6
   d62fe:	4629      	mov	r1, r5
   d6300:	6800      	ldr	r0, [r0, #0]
   d6302:	f7fe fc57 	bl	d4bb4 <sock_send>
    if (ret < 0) {
   d6306:	2800      	cmp	r0, #0
   d6308:	da04      	bge.n	d6314 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d630a:	f7fe fda7 	bl	d4e5c <__errno>
   d630e:	6803      	ldr	r3, [r0, #0]
   d6310:	6063      	str	r3, [r4, #4]
   d6312:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6314:	b004      	add	sp, #16
   d6316:	bd70      	pop	{r4, r5, r6, pc}

000d6318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6318:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d631a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d631c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d631e:	689b      	ldr	r3, [r3, #8]
   d6320:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6322:	68a3      	ldr	r3, [r4, #8]
   d6324:	3b01      	subs	r3, #1
   d6326:	60a3      	str	r3, [r4, #8]
   d6328:	b92b      	cbnz	r3, d6336 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d632a:	6823      	ldr	r3, [r4, #0]
   d632c:	4620      	mov	r0, r4
   d632e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6334:	4718      	bx	r3
   d6336:	bd10      	pop	{r4, pc}

000d6338 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6338:	b570      	push	{r4, r5, r6, lr}
   d633a:	4604      	mov	r4, r0
   d633c:	694d      	ldr	r5, [r1, #20]
   d633e:	4b05      	ldr	r3, [pc, #20]	; (d6354 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6340:	f844 3b04 	str.w	r3, [r4], #4
   d6344:	358c      	adds	r5, #140	; 0x8c
   d6346:	4606      	mov	r6, r0
   d6348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d634a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d634c:	682b      	ldr	r3, [r5, #0]
   d634e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6350:	4630      	mov	r0, r6
   d6352:	bd70      	pop	{r4, r5, r6, pc}
   d6354:	000d74fc 	.word	0x000d74fc

000d6358 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6358:	b510      	push	{r4, lr}
   d635a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d635c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6360:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6364:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6366:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6368:	d005      	beq.n	d6376 <_ZN9TCPClient4peekEv+0x1e>
   d636a:	6962      	ldr	r2, [r4, #20]
   d636c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6370:	4413      	add	r3, r2
   d6372:	7918      	ldrb	r0, [r3, #4]
   d6374:	bd10      	pop	{r4, pc}
   d6376:	6803      	ldr	r3, [r0, #0]
   d6378:	691b      	ldr	r3, [r3, #16]
   d637a:	4798      	blx	r3
   d637c:	2800      	cmp	r0, #0
   d637e:	d1f4      	bne.n	d636a <_ZN9TCPClient4peekEv+0x12>
   d6380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6384:	bd10      	pop	{r4, pc}

000d6386 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6386:	b510      	push	{r4, lr}
   d6388:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d638a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d638e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6392:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6394:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6396:	d008      	beq.n	d63aa <_ZN9TCPClient4readEv+0x24>
   d6398:	6962      	ldr	r2, [r4, #20]
   d639a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d639e:	1c59      	adds	r1, r3, #1
   d63a0:	4413      	add	r3, r2
   d63a2:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d63a6:	7918      	ldrb	r0, [r3, #4]
   d63a8:	bd10      	pop	{r4, pc}
   d63aa:	6803      	ldr	r3, [r0, #0]
   d63ac:	691b      	ldr	r3, [r3, #16]
   d63ae:	4798      	blx	r3
   d63b0:	2800      	cmp	r0, #0
   d63b2:	d1f1      	bne.n	d6398 <_ZN9TCPClient4readEv+0x12>
   d63b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d63b8:	bd10      	pop	{r4, pc}

000d63ba <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d63ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63bc:	6943      	ldr	r3, [r0, #20]
   d63be:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d63c0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d63c4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d63c8:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d63ca:	4605      	mov	r5, r0
   d63cc:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d63ce:	d106      	bne.n	d63de <_ZN9TCPClient4readEPhj+0x24>
   d63d0:	6803      	ldr	r3, [r0, #0]
   d63d2:	691b      	ldr	r3, [r3, #16]
   d63d4:	4798      	blx	r3
   d63d6:	b910      	cbnz	r0, d63de <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d63d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d63dc:	e014      	b.n	d6408 <_ZN9TCPClient4readEPhj+0x4e>
   d63de:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d63e0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d63e4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d63e8:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d63ea:	42bc      	cmp	r4, r7
   d63ec:	bf28      	it	cs
   d63ee:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d63f0:	4419      	add	r1, r3
   d63f2:	4622      	mov	r2, r4
   d63f4:	3104      	adds	r1, #4
   d63f6:	4630      	mov	r0, r6
   d63f8:	f000 fdfb 	bl	d6ff2 <memcpy>
   d63fc:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d63fe:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6402:	4423      	add	r3, r4
   d6404:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6408:	4620      	mov	r0, r4
   d640a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d640c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d640c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6410:	4698      	mov	r8, r3
    stop();
   d6412:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6414:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6418:	460d      	mov	r5, r1
   d641a:	4606      	mov	r6, r0
   d641c:	4617      	mov	r7, r2
    stop();
   d641e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6420:	ab12      	add	r3, sp, #72	; 0x48
   d6422:	2400      	movs	r4, #0
   d6424:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6428:	4622      	mov	r2, r4
   d642a:	4621      	mov	r1, r4
   d642c:	4628      	mov	r0, r5
   d642e:	f7fe fb99 	bl	d4b64 <netdb_getaddrinfo>
   d6432:	4681      	mov	r9, r0
   d6434:	2800      	cmp	r0, #0
   d6436:	d13d      	bne.n	d64b4 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6438:	9b00      	ldr	r3, [sp, #0]
   d643a:	2b00      	cmp	r3, #0
   d643c:	d056      	beq.n	d64ec <_ZN9TCPClient7connectEPKctm+0xe0>
   d643e:	695b      	ldr	r3, [r3, #20]
   d6440:	2b00      	cmp	r3, #0
   d6442:	d053      	beq.n	d64ec <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d6444:	a806      	add	r0, sp, #24
   d6446:	f7ff fbb3 	bl	d5bb0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d644a:	9b00      	ldr	r3, [sp, #0]
   d644c:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d644e:	7863      	ldrb	r3, [r4, #1]
   d6450:	2b02      	cmp	r3, #2
   d6452:	d101      	bne.n	d6458 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6454:	1d21      	adds	r1, r4, #4
   d6456:	e013      	b.n	d6480 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6458:	2b0a      	cmp	r3, #10
   d645a:	d114      	bne.n	d6486 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d645c:	2211      	movs	r2, #17
   d645e:	4649      	mov	r1, r9
   d6460:	a801      	add	r0, sp, #4
   d6462:	f000 fdec 	bl	d703e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6466:	68a3      	ldr	r3, [r4, #8]
   d6468:	bb33      	cbnz	r3, d64b8 <_ZN9TCPClient7connectEPKctm+0xac>
   d646a:	68e3      	ldr	r3, [r4, #12]
   d646c:	bb23      	cbnz	r3, d64b8 <_ZN9TCPClient7connectEPKctm+0xac>
   d646e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6472:	6925      	ldr	r5, [r4, #16]
   d6474:	f7fe fb5e 	bl	d4b34 <inet_htonl>
   d6478:	4285      	cmp	r5, r0
   d647a:	d11d      	bne.n	d64b8 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d647c:	f104 0114 	add.w	r1, r4, #20
   d6480:	a806      	add	r0, sp, #24
   d6482:	f7ff fbd8 	bl	d5c36 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6486:	a806      	add	r0, sp, #24
   d6488:	f7ff fbb2 	bl	d5bf0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d648c:	2800      	cmp	r0, #0
   d648e:	d02d      	beq.n	d64ec <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d6490:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6492:	ad07      	add	r5, sp, #28
   d6494:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6498:	4b18      	ldr	r3, [pc, #96]	; (d64fc <_ZN9TCPClient7connectEPKctm+0xf0>)
   d649a:	930c      	str	r3, [sp, #48]	; 0x30
   d649c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d649e:	ac0d      	add	r4, sp, #52	; 0x34
   d64a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64a2:	682b      	ldr	r3, [r5, #0]
   d64a4:	7023      	strb	r3, [r4, #0]
   d64a6:	463a      	mov	r2, r7
   d64a8:	4643      	mov	r3, r8
   d64aa:	a90c      	add	r1, sp, #48	; 0x30
   d64ac:	4630      	mov	r0, r6
   d64ae:	47c8      	blx	r9
   d64b0:	4681      	mov	r9, r0
   d64b2:	e01b      	b.n	d64ec <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d64b4:	46a1      	mov	r9, r4
   d64b6:	e019      	b.n	d64ec <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d64b8:	f104 0308 	add.w	r3, r4, #8
   d64bc:	ad01      	add	r5, sp, #4
   d64be:	3418      	adds	r4, #24
   d64c0:	6818      	ldr	r0, [r3, #0]
   d64c2:	6859      	ldr	r1, [r3, #4]
   d64c4:	462a      	mov	r2, r5
   d64c6:	c203      	stmia	r2!, {r0, r1}
   d64c8:	3308      	adds	r3, #8
   d64ca:	42a3      	cmp	r3, r4
   d64cc:	4615      	mov	r5, r2
   d64ce:	d1f7      	bne.n	d64c0 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d64d0:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d64d2:	a901      	add	r1, sp, #4
   d64d4:	a80c      	add	r0, sp, #48	; 0x30
   d64d6:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d64d8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d64dc:	f7ff fb76 	bl	d5bcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d64e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d64e2:	ac07      	add	r4, sp, #28
   d64e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64e6:	682b      	ldr	r3, [r5, #0]
   d64e8:	7023      	strb	r3, [r4, #0]
   d64ea:	e7cc      	b.n	d6486 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d64ec:	9800      	ldr	r0, [sp, #0]
   d64ee:	f7fe fb31 	bl	d4b54 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d64f2:	4648      	mov	r0, r9
   d64f4:	b013      	add	sp, #76	; 0x4c
   d64f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d64fa:	bf00      	nop
   d64fc:	000d74fc 	.word	0x000d74fc

000d6500 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6500:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6502:	2300      	movs	r3, #0
   d6504:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6508:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d650a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d650e:	4770      	bx	lr

000d6510 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6514:	461e      	mov	r6, r3
    stop();
   d6516:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6518:	460c      	mov	r4, r1
   d651a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d651e:	4605      	mov	r5, r0
   d6520:	4617      	mov	r7, r2
    stop();
   d6522:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6524:	7d23      	ldrb	r3, [r4, #20]
   d6526:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d652a:	2b04      	cmp	r3, #4
   d652c:	bf0c      	ite	eq
   d652e:	2002      	moveq	r0, #2
   d6530:	200a      	movne	r0, #10
   d6532:	2206      	movs	r2, #6
   d6534:	2101      	movs	r1, #1
   d6536:	f7fe fb45 	bl	d4bc4 <sock_socket>
   d653a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d653e:	696b      	ldr	r3, [r5, #20]
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	2b00      	cmp	r3, #0
   d6544:	db18      	blt.n	d6578 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d6546:	4628      	mov	r0, r5
   d6548:	f7ff ffda 	bl	d6500 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d654c:	b1d6      	cbz	r6, d6584 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d654e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6550:	a903      	add	r1, sp, #12
   d6552:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6554:	9303      	str	r3, [sp, #12]
   d6556:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d655a:	f7fe fadb 	bl	d4b14 <if_index_to_name>
   d655e:	b958      	cbnz	r0, d6578 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6560:	6968      	ldr	r0, [r5, #20]
   d6562:	2306      	movs	r3, #6
   d6564:	9300      	str	r3, [sp, #0]
   d6566:	f241 020b 	movw	r2, #4107	; 0x100b
   d656a:	ab03      	add	r3, sp, #12
   d656c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6570:	6800      	ldr	r0, [r0, #0]
   d6572:	f7fe faff 	bl	d4b74 <sock_setsockopt>
   d6576:	b128      	cbz	r0, d6584 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6578:	682b      	ldr	r3, [r5, #0]
   d657a:	4628      	mov	r0, r5
   d657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d657e:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6580:	4798      	blx	r3
   d6582:	e03b      	b.n	d65fc <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6584:	261c      	movs	r6, #28
   d6586:	4632      	mov	r2, r6
   d6588:	2100      	movs	r1, #0
   d658a:	a803      	add	r0, sp, #12
   d658c:	f000 fd57 	bl	d703e <memset>
    if (ip.version() == 4) {
   d6590:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6592:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6596:	2b04      	cmp	r3, #4
   d6598:	d10c      	bne.n	d65b4 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d659a:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d659c:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d659e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d65a2:	f7fe facf 	bl	d4b44 <inet_htons>
   d65a6:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d65aa:	6860      	ldr	r0, [r4, #4]
   d65ac:	f7fe fac2 	bl	d4b34 <inet_htonl>
   d65b0:	9004      	str	r0, [sp, #16]
   d65b2:	e013      	b.n	d65dc <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d65b4:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d65b6:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d65b8:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d65bc:	f7fe fac2 	bl	d4b44 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d65c0:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d65c2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d65c6:	1d23      	adds	r3, r4, #4
   d65c8:	f104 0714 	add.w	r7, r4, #20
   d65cc:	6818      	ldr	r0, [r3, #0]
   d65ce:	6859      	ldr	r1, [r3, #4]
   d65d0:	4632      	mov	r2, r6
   d65d2:	c203      	stmia	r2!, {r0, r1}
   d65d4:	3308      	adds	r3, #8
   d65d6:	42bb      	cmp	r3, r7
   d65d8:	4616      	mov	r6, r2
   d65da:	d1f7      	bne.n	d65cc <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d65dc:	696b      	ldr	r3, [r5, #20]
   d65de:	221c      	movs	r2, #28
   d65e0:	a903      	add	r1, sp, #12
   d65e2:	6818      	ldr	r0, [r3, #0]
   d65e4:	f7fe fad6 	bl	d4b94 <sock_connect>
   d65e8:	2800      	cmp	r0, #0
   d65ea:	d1c5      	bne.n	d6578 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d65ec:	3404      	adds	r4, #4
   d65ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d65f0:	696d      	ldr	r5, [r5, #20]
   d65f2:	358c      	adds	r5, #140	; 0x8c
   d65f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d65f6:	6823      	ldr	r3, [r4, #0]
   d65f8:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d65fa:	2401      	movs	r4, #1
}
   d65fc:	4620      	mov	r0, r4
   d65fe:	b00a      	add	sp, #40	; 0x28
   d6600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6604 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6604:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6606:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6608:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d660a:	6818      	ldr	r0, [r3, #0]
   d660c:	2800      	cmp	r0, #0
   d660e:	db01      	blt.n	d6614 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6610:	f7fe fab8 	bl	d4b84 <sock_close>
   d6614:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d661a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d661c:	6960      	ldr	r0, [r4, #20]
   d661e:	2211      	movs	r2, #17
   d6620:	2100      	movs	r1, #0
   d6622:	308c      	adds	r0, #140	; 0x8c
   d6624:	f000 fd0b 	bl	d703e <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6628:	4620      	mov	r0, r4
}
   d662a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d662e:	f7ff bf67 	b.w	d6500 <_ZN9TCPClient12flush_bufferEv>
	...

000d6634 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6634:	b530      	push	{r4, r5, lr}
   d6636:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6638:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d663c:	b08b      	sub	sp, #44	; 0x2c
   d663e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6640:	b11b      	cbz	r3, d664a <_ZN9TCPClient9availableEv+0x16>
   d6642:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6646:	429a      	cmp	r2, r3
   d6648:	d040      	beq.n	d66cc <_ZN9TCPClient9availableEv+0x98>
   d664a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d664c:	6818      	ldr	r0, [r3, #0]
   d664e:	2800      	cmp	r0, #0
   d6650:	db3f      	blt.n	d66d2 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6652:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6656:	2d7f      	cmp	r5, #127	; 0x7f
   d6658:	d83b      	bhi.n	d66d2 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d665a:	1d19      	adds	r1, r3, #4
   d665c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6660:	2308      	movs	r3, #8
   d6662:	4429      	add	r1, r5
   d6664:	f7fe fa9e 	bl	d4ba4 <sock_recv>
            if (ret > 0) {
   d6668:	2800      	cmp	r0, #0
   d666a:	dd0c      	ble.n	d6686 <_ZN9TCPClient9availableEv+0x52>
   d666c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d666e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6672:	b90a      	cbnz	r2, d6678 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6674:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6678:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d667a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d667e:	4418      	add	r0, r3
   d6680:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6684:	e025      	b.n	d66d2 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6686:	f7fe fbe9 	bl	d4e5c <__errno>
   d668a:	6803      	ldr	r3, [r0, #0]
   d668c:	2b0b      	cmp	r3, #11
   d668e:	d020      	beq.n	d66d2 <_ZN9TCPClient9availableEv+0x9e>
   d6690:	f7fe fbe4 	bl	d4e5c <__errno>
   d6694:	6803      	ldr	r3, [r0, #0]
   d6696:	2b0b      	cmp	r3, #11
   d6698:	d01b      	beq.n	d66d2 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d669a:	2320      	movs	r3, #32
   d669c:	2500      	movs	r5, #0
   d669e:	9302      	str	r3, [sp, #8]
   d66a0:	9503      	str	r5, [sp, #12]
   d66a2:	f7fe fbdb 	bl	d4e5c <__errno>
   d66a6:	6803      	ldr	r3, [r0, #0]
   d66a8:	9301      	str	r3, [sp, #4]
   d66aa:	4b0e      	ldr	r3, [pc, #56]	; (d66e4 <_ZN9TCPClient9availableEv+0xb0>)
   d66ac:	9300      	str	r3, [sp, #0]
   d66ae:	aa02      	add	r2, sp, #8
   d66b0:	462b      	mov	r3, r5
   d66b2:	490d      	ldr	r1, [pc, #52]	; (d66e8 <_ZN9TCPClient9availableEv+0xb4>)
   d66b4:	2032      	movs	r0, #50	; 0x32
   d66b6:	f7fe fb1d 	bl	d4cf4 <log_message>
                    sock_close(d_->sock);
   d66ba:	6963      	ldr	r3, [r4, #20]
   d66bc:	6818      	ldr	r0, [r3, #0]
   d66be:	f7fe fa61 	bl	d4b84 <sock_close>
   d66c2:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d66c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d66c8:	601a      	str	r2, [r3, #0]
   d66ca:	e002      	b.n	d66d2 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d66cc:	f7ff ff18 	bl	d6500 <_ZN9TCPClient12flush_bufferEv>
   d66d0:	e7bb      	b.n	d664a <_ZN9TCPClient9availableEv+0x16>
   d66d2:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d66d4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d66d8:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d66dc:	1a18      	subs	r0, r3, r0
}
   d66de:	b00b      	add	sp, #44	; 0x2c
   d66e0:	bd30      	pop	{r4, r5, pc}
   d66e2:	bf00      	nop
   d66e4:	000d76cb 	.word	0x000d76cb
   d66e8:	000d76c4 	.word	0x000d76c4

000d66ec <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d66ec:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d66ee:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d66f0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d66f2:	6001      	str	r1, [r0, #0]
   d66f4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d66f8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d66fc:	3088      	adds	r0, #136	; 0x88
   d66fe:	f7ff fa57 	bl	d5bb0 <_ZN9IPAddressC1Ev>
}
   d6702:	4620      	mov	r0, r4
   d6704:	bd10      	pop	{r4, pc}
	...

000d6708 <_ZN9TCPClientC1Ei>:
   d6708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d670c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d670e:	2300      	movs	r3, #0
   d6710:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6712:	4a14      	ldr	r2, [pc, #80]	; (d6764 <_ZN9TCPClientC1Ei+0x5c>)
   d6714:	6043      	str	r3, [r0, #4]
   d6716:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6718:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d671a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d671c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d671e:	20a0      	movs	r0, #160	; 0xa0
   d6720:	460e      	mov	r6, r1
   d6722:	f7fd fcb8 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6726:	4605      	mov	r5, r0
   d6728:	b110      	cbz	r0, d6730 <_ZN9TCPClientC1Ei+0x28>
   d672a:	4631      	mov	r1, r6
   d672c:	f7ff ffde 	bl	d66ec <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6730:	2014      	movs	r0, #20
   d6732:	f7fd fcb0 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6736:	4603      	mov	r3, r0
   d6738:	b128      	cbz	r0, d6746 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d673a:	2201      	movs	r2, #1
   d673c:	6042      	str	r2, [r0, #4]
   d673e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6740:	4a09      	ldr	r2, [pc, #36]	; (d6768 <_ZN9TCPClientC1Ei+0x60>)
   d6742:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6744:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6746:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6748:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d674a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d674c:	b128      	cbz	r0, d675a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d674e:	6843      	ldr	r3, [r0, #4]
   d6750:	3b01      	subs	r3, #1
   d6752:	6043      	str	r3, [r0, #4]
   d6754:	b90b      	cbnz	r3, d675a <_ZN9TCPClientC1Ei+0x52>
   d6756:	f7ff fddf 	bl	d6318 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d675a:	4620      	mov	r0, r4
   d675c:	f7ff fed0 	bl	d6500 <_ZN9TCPClient12flush_bufferEv>
}
   d6760:	4620      	mov	r0, r4
   d6762:	bd70      	pop	{r4, r5, r6, pc}
   d6764:	000d7680 	.word	0x000d7680
   d6768:	000d7664 	.word	0x000d7664

000d676c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d676c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d676e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6772:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6774:	f7ff ffc8 	bl	d6708 <_ZN9TCPClientC1Ei>
}
   d6778:	4620      	mov	r0, r4
   d677a:	bd10      	pop	{r4, pc}

000d677c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d677c:	b510      	push	{r4, lr}
   d677e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6780:	6800      	ldr	r0, [r0, #0]
   d6782:	2800      	cmp	r0, #0
   d6784:	db01      	blt.n	d678a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6786:	f7fe f9fd 	bl	d4b84 <sock_close>
    }
}
   d678a:	4620      	mov	r0, r4
   d678c:	bd10      	pop	{r4, pc}

000d678e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d678e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6790:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6792:	4620      	mov	r0, r4
   d6794:	f7ff fff2 	bl	d677c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6798:	b124      	cbz	r4, d67a4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d679a:	4620      	mov	r0, r4
   d679c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d67a0:	f7fd bc7b 	b.w	d409a <_ZdlPv>
   d67a4:	bd10      	pop	{r4, pc}
	...

000d67a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d67a8:	4b02      	ldr	r3, [pc, #8]	; (d67b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d67aa:	681a      	ldr	r2, [r3, #0]
   d67ac:	4b02      	ldr	r3, [pc, #8]	; (d67b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d67ae:	601a      	str	r2, [r3, #0]
   d67b0:	4770      	bx	lr
   d67b2:	bf00      	nop
   d67b4:	2003de34 	.word	0x2003de34
   d67b8:	2003e5d4 	.word	0x2003e5d4

000d67bc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d67bc:	4770      	bx	lr

000d67be <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d67be:	7441      	strb	r1, [r0, #17]
   d67c0:	4770      	bx	lr

000d67c2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d67c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d67c4:	7c00      	ldrb	r0, [r0, #16]
   d67c6:	f7fe fa4d 	bl	d4c64 <HAL_USART_Available_Data_For_Write>
}
   d67ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67ce:	bd08      	pop	{r3, pc}

000d67d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d67d0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d67d2:	7c00      	ldrb	r0, [r0, #16]
   d67d4:	f7fe fa1e 	bl	d4c14 <HAL_USART_Available_Data>
}
   d67d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d67dc:	bd08      	pop	{r3, pc}

000d67de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d67de:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d67e0:	7c00      	ldrb	r0, [r0, #16]
   d67e2:	f7fe fa27 	bl	d4c34 <HAL_USART_Peek_Data>
}
   d67e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d67ea:	bf28      	it	cs
   d67ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d67f0:	bd08      	pop	{r3, pc}

000d67f2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d67f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d67f4:	7c00      	ldrb	r0, [r0, #16]
   d67f6:	f7fe fa15 	bl	d4c24 <HAL_USART_Read_Data>
}
   d67fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d67fe:	bf28      	it	cs
   d6800:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6804:	bd08      	pop	{r3, pc}

000d6806 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6806:	7c00      	ldrb	r0, [r0, #16]
   d6808:	f7fe ba1c 	b.w	d4c44 <HAL_USART_Flush_Data>

000d680c <_ZN11USARTSerialD0Ev>:
   d680c:	b510      	push	{r4, lr}
   d680e:	2114      	movs	r1, #20
   d6810:	4604      	mov	r4, r0
   d6812:	f000 fa68 	bl	d6ce6 <_ZdlPvj>
   d6816:	4620      	mov	r0, r4
   d6818:	bd10      	pop	{r4, pc}

000d681a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d681a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d681c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d681e:	4604      	mov	r4, r0
   d6820:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6822:	b925      	cbnz	r5, d682e <_ZN11USARTSerial5writeEh+0x14>
   d6824:	7c00      	ldrb	r0, [r0, #16]
   d6826:	f7fe fa1d 	bl	d4c64 <HAL_USART_Available_Data_For_Write>
   d682a:	2800      	cmp	r0, #0
   d682c:	dd05      	ble.n	d683a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d682e:	4631      	mov	r1, r6
   d6830:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6836:	f7fe b9e5 	b.w	d4c04 <HAL_USART_Write_Data>
  }
  return 0;
}
   d683a:	4628      	mov	r0, r5
   d683c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6840 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6840:	b510      	push	{r4, lr}
   d6842:	4604      	mov	r4, r0
   d6844:	4608      	mov	r0, r1
   d6846:	4611      	mov	r1, r2
   d6848:	2200      	movs	r2, #0
   d684a:	6062      	str	r2, [r4, #4]
   d684c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6850:	60a2      	str	r2, [r4, #8]
   d6852:	4a05      	ldr	r2, [pc, #20]	; (d6868 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6854:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6856:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6858:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d685a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d685c:	461a      	mov	r2, r3
   d685e:	f7fe f9c9 	bl	d4bf4 <HAL_USART_Init>
}
   d6862:	4620      	mov	r0, r4
   d6864:	bd10      	pop	{r4, pc}
   d6866:	bf00      	nop
   d6868:	000d770c 	.word	0x000d770c

000d686c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d686c:	7c00      	ldrb	r0, [r0, #16]
   d686e:	f7fe b9f1 	b.w	d4c54 <HAL_USART_Is_Enabled>
	...

000d6874 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6874:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6876:	4d0c      	ldr	r5, [pc, #48]	; (d68a8 <_Z22__fetch_global_Serial1v+0x34>)
   d6878:	6829      	ldr	r1, [r5, #0]
   d687a:	f011 0401 	ands.w	r4, r1, #1
   d687e:	d111      	bne.n	d68a4 <_Z22__fetch_global_Serial1v+0x30>
   d6880:	4628      	mov	r0, r5
   d6882:	f7fd fc0e 	bl	d40a2 <__cxa_guard_acquire>
   d6886:	b168      	cbz	r0, d68a4 <_Z22__fetch_global_Serial1v+0x30>
   d6888:	4a08      	ldr	r2, [pc, #32]	; (d68ac <_Z22__fetch_global_Serial1v+0x38>)
   d688a:	4b09      	ldr	r3, [pc, #36]	; (d68b0 <_Z22__fetch_global_Serial1v+0x3c>)
   d688c:	4809      	ldr	r0, [pc, #36]	; (d68b4 <_Z22__fetch_global_Serial1v+0x40>)
   d688e:	4621      	mov	r1, r4
   d6890:	f7ff ffd6 	bl	d6840 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6894:	4628      	mov	r0, r5
   d6896:	f7fd fc09 	bl	d40ac <__cxa_guard_release>
   d689a:	4a07      	ldr	r2, [pc, #28]	; (d68b8 <_Z22__fetch_global_Serial1v+0x44>)
   d689c:	4907      	ldr	r1, [pc, #28]	; (d68bc <_Z22__fetch_global_Serial1v+0x48>)
   d689e:	4805      	ldr	r0, [pc, #20]	; (d68b4 <_Z22__fetch_global_Serial1v+0x40>)
   d68a0:	f000 fa1c 	bl	d6cdc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d68a4:	4803      	ldr	r0, [pc, #12]	; (d68b4 <_Z22__fetch_global_Serial1v+0x40>)
   d68a6:	bd38      	pop	{r3, r4, r5, pc}
   d68a8:	2003e670 	.word	0x2003e670
   d68ac:	2003e674 	.word	0x2003e674
   d68b0:	2003e5ec 	.word	0x2003e5ec
   d68b4:	2003e5d8 	.word	0x2003e5d8
   d68b8:	2003dea0 	.word	0x2003dea0
   d68bc:	000d67bd 	.word	0x000d67bd

000d68c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d68c0:	7441      	strb	r1, [r0, #17]
   d68c2:	4770      	bx	lr

000d68c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d68c4:	4770      	bx	lr

000d68c6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d68c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d68c8:	2100      	movs	r1, #0
   d68ca:	7c00      	ldrb	r0, [r0, #16]
   d68cc:	f7fe f9f2 	bl	d4cb4 <HAL_USB_USART_Receive_Data>
}
   d68d0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d68d4:	bf28      	it	cs
   d68d6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d68da:	bd08      	pop	{r3, pc}

000d68dc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d68dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d68de:	2101      	movs	r1, #1
   d68e0:	7c00      	ldrb	r0, [r0, #16]
   d68e2:	f7fe f9e7 	bl	d4cb4 <HAL_USB_USART_Receive_Data>
}
   d68e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d68ea:	bf28      	it	cs
   d68ec:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d68f0:	bd08      	pop	{r3, pc}

000d68f2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d68f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d68f4:	7c00      	ldrb	r0, [r0, #16]
   d68f6:	f7fe f9d5 	bl	d4ca4 <HAL_USB_USART_Available_Data_For_Write>
}
   d68fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68fe:	bd08      	pop	{r3, pc}

000d6900 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6900:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6902:	7c00      	ldrb	r0, [r0, #16]
   d6904:	f7fe f9c6 	bl	d4c94 <HAL_USB_USART_Available_Data>
}
   d6908:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d690c:	bd08      	pop	{r3, pc}

000d690e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d690e:	7c00      	ldrb	r0, [r0, #16]
   d6910:	f7fe b9e0 	b.w	d4cd4 <HAL_USB_USART_Flush_Data>

000d6914 <_ZN9USBSerialD0Ev>:
   d6914:	b510      	push	{r4, lr}
   d6916:	2114      	movs	r1, #20
   d6918:	4604      	mov	r4, r0
   d691a:	f000 f9e4 	bl	d6ce6 <_ZdlPvj>
   d691e:	4620      	mov	r0, r4
   d6920:	bd10      	pop	{r4, pc}

000d6922 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6922:	b538      	push	{r3, r4, r5, lr}
   d6924:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6926:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6928:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d692a:	f7fe f9bb 	bl	d4ca4 <HAL_USB_USART_Available_Data_For_Write>
   d692e:	2800      	cmp	r0, #0
   d6930:	dc01      	bgt.n	d6936 <_ZN9USBSerial5writeEh+0x14>
   d6932:	7c60      	ldrb	r0, [r4, #17]
   d6934:	b128      	cbz	r0, d6942 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6936:	4629      	mov	r1, r5
   d6938:	7c20      	ldrb	r0, [r4, #16]
   d693a:	f7fe f9c3 	bl	d4cc4 <HAL_USB_USART_Send_Data>
   d693e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6942:	bd38      	pop	{r3, r4, r5, pc}

000d6944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6944:	b510      	push	{r4, lr}
   d6946:	4604      	mov	r4, r0
   d6948:	2300      	movs	r3, #0
   d694a:	6063      	str	r3, [r4, #4]
   d694c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6950:	60a3      	str	r3, [r4, #8]
   d6952:	4b05      	ldr	r3, [pc, #20]	; (d6968 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6954:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6956:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6958:	4608      	mov	r0, r1
{
  _serial = serial;
   d695a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d695c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d695e:	4611      	mov	r1, r2
   d6960:	f7fe f988 	bl	d4c74 <HAL_USB_USART_Init>
}
   d6964:	4620      	mov	r0, r4
   d6966:	bd10      	pop	{r4, pc}
   d6968:	000d773c 	.word	0x000d773c

000d696c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d696c:	2200      	movs	r2, #0
   d696e:	7c00      	ldrb	r0, [r0, #16]
   d6970:	f7fe b988 	b.w	d4c84 <HAL_USB_USART_Begin>

000d6974 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6974:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6976:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6978:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d697a:	2100      	movs	r1, #0
   d697c:	f000 fb5f 	bl	d703e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6980:	4620      	mov	r0, r4
   d6982:	bd10      	pop	{r4, pc}

000d6984 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6984:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6986:	4d0e      	ldr	r5, [pc, #56]	; (d69c0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6988:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d698a:	a801      	add	r0, sp, #4
   d698c:	f7ff fff2 	bl	d6974 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6990:	6829      	ldr	r1, [r5, #0]
   d6992:	f011 0401 	ands.w	r4, r1, #1
   d6996:	d110      	bne.n	d69ba <_Z16_fetch_usbserialv+0x36>
   d6998:	4628      	mov	r0, r5
   d699a:	f7fd fb82 	bl	d40a2 <__cxa_guard_acquire>
   d699e:	b160      	cbz	r0, d69ba <_Z16_fetch_usbserialv+0x36>
   d69a0:	aa01      	add	r2, sp, #4
   d69a2:	4621      	mov	r1, r4
   d69a4:	4807      	ldr	r0, [pc, #28]	; (d69c4 <_Z16_fetch_usbserialv+0x40>)
   d69a6:	f7ff ffcd 	bl	d6944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d69aa:	4628      	mov	r0, r5
   d69ac:	f7fd fb7e 	bl	d40ac <__cxa_guard_release>
   d69b0:	4a05      	ldr	r2, [pc, #20]	; (d69c8 <_Z16_fetch_usbserialv+0x44>)
   d69b2:	4906      	ldr	r1, [pc, #24]	; (d69cc <_Z16_fetch_usbserialv+0x48>)
   d69b4:	4803      	ldr	r0, [pc, #12]	; (d69c4 <_Z16_fetch_usbserialv+0x40>)
   d69b6:	f000 f991 	bl	d6cdc <__aeabi_atexit>
	return _usbserial;
}
   d69ba:	4802      	ldr	r0, [pc, #8]	; (d69c4 <_Z16_fetch_usbserialv+0x40>)
   d69bc:	b007      	add	sp, #28
   d69be:	bd30      	pop	{r4, r5, pc}
   d69c0:	2003e6f8 	.word	0x2003e6f8
   d69c4:	2003e6fc 	.word	0x2003e6fc
   d69c8:	2003dea0 	.word	0x2003dea0
   d69cc:	000d68c5 	.word	0x000d68c5

000d69d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d69d0:	2200      	movs	r2, #0
   d69d2:	4611      	mov	r1, r2
   d69d4:	6840      	ldr	r0, [r0, #4]
   d69d6:	f7fe b9e9 	b.w	d4dac <network_ready>

000d69da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d69da:	2200      	movs	r2, #0
   d69dc:	4611      	mov	r1, r2
   d69de:	6840      	ldr	r0, [r0, #4]
   d69e0:	f7fe ba04 	b.w	d4dec <network_listening>

000d69e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d69e4:	2200      	movs	r2, #0
   d69e6:	4611      	mov	r1, r2
   d69e8:	6840      	ldr	r0, [r0, #4]
   d69ea:	f7fe ba0f 	b.w	d4e0c <network_get_listen_timeout>

000d69ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d69ee:	2200      	movs	r2, #0
   d69f0:	6840      	ldr	r0, [r0, #4]
   d69f2:	f7fe ba03 	b.w	d4dfc <network_set_listen_timeout>

000d69f6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d69f6:	2200      	movs	r2, #0
   d69f8:	f081 0101 	eor.w	r1, r1, #1
   d69fc:	6840      	ldr	r0, [r0, #4]
   d69fe:	f7fe b9ed 	b.w	d4ddc <network_listen>

000d6a02 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6a02:	2300      	movs	r3, #0
   d6a04:	461a      	mov	r2, r3
   d6a06:	4619      	mov	r1, r3
   d6a08:	6840      	ldr	r0, [r0, #4]
   d6a0a:	f7fe b9df 	b.w	d4dcc <network_off>

000d6a0e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6a0e:	2300      	movs	r3, #0
   d6a10:	461a      	mov	r2, r3
   d6a12:	4619      	mov	r1, r3
   d6a14:	6840      	ldr	r0, [r0, #4]
   d6a16:	f7fe b9d1 	b.w	d4dbc <network_on>

000d6a1a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a1a:	2200      	movs	r2, #0
   d6a1c:	4611      	mov	r1, r2
   d6a1e:	6840      	ldr	r0, [r0, #4]
   d6a20:	f7fe b9b4 	b.w	d4d8c <network_connecting>

000d6a24 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a24:	2200      	movs	r2, #0
   d6a26:	2102      	movs	r1, #2
   d6a28:	6840      	ldr	r0, [r0, #4]
   d6a2a:	f7fe b9b7 	b.w	d4d9c <network_disconnect>

000d6a2e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a2e:	2300      	movs	r3, #0
   d6a30:	461a      	mov	r2, r3
   d6a32:	6840      	ldr	r0, [r0, #4]
   d6a34:	f7fe b9a2 	b.w	d4d7c <network_connect>

000d6a38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6a38:	4b02      	ldr	r3, [pc, #8]	; (d6a44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6a3a:	2204      	movs	r2, #4
   d6a3c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6a3e:	4a02      	ldr	r2, [pc, #8]	; (d6a48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6a40:	601a      	str	r2, [r3, #0]
   d6a42:	4770      	bx	lr
   d6a44:	2003e710 	.word	0x2003e710
   d6a48:	000d776c 	.word	0x000d776c

000d6a4c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6a4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6a4e:	4b0c      	ldr	r3, [pc, #48]	; (d6a80 <serialEventRun+0x34>)
   d6a50:	b133      	cbz	r3, d6a60 <serialEventRun+0x14>
   d6a52:	f7ff ff97 	bl	d6984 <_Z16_fetch_usbserialv>
   d6a56:	6803      	ldr	r3, [r0, #0]
   d6a58:	691b      	ldr	r3, [r3, #16]
   d6a5a:	4798      	blx	r3
   d6a5c:	2800      	cmp	r0, #0
   d6a5e:	dc09      	bgt.n	d6a74 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6a60:	4b08      	ldr	r3, [pc, #32]	; (d6a84 <serialEventRun+0x38>)
   d6a62:	b163      	cbz	r3, d6a7e <serialEventRun+0x32>
   d6a64:	f7ff ff06 	bl	d6874 <_Z22__fetch_global_Serial1v>
   d6a68:	6803      	ldr	r3, [r0, #0]
   d6a6a:	691b      	ldr	r3, [r3, #16]
   d6a6c:	4798      	blx	r3
   d6a6e:	2800      	cmp	r0, #0
   d6a70:	dc03      	bgt.n	d6a7a <serialEventRun+0x2e>
   d6a72:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6a74:	f3af 8000 	nop.w
   d6a78:	e7f2      	b.n	d6a60 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6a7a:	f3af 8000 	nop.w
   d6a7e:	bd08      	pop	{r3, pc}
	...

000d6a88 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6a88:	b508      	push	{r3, lr}
	serialEventRun();
   d6a8a:	f7ff ffdf 	bl	d6a4c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6a8e:	f7fd ffd9 	bl	d4a44 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6a92:	4b01      	ldr	r3, [pc, #4]	; (d6a98 <_post_loop+0x10>)
   d6a94:	6018      	str	r0, [r3, #0]
   d6a96:	bd08      	pop	{r3, pc}
   d6a98:	2003e720 	.word	0x2003e720

000d6a9c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6a9c:	4802      	ldr	r0, [pc, #8]	; (d6aa8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6a9e:	4a03      	ldr	r2, [pc, #12]	; (d6aac <_Z33system_initialize_user_backup_ramv+0x10>)
   d6aa0:	4903      	ldr	r1, [pc, #12]	; (d6ab0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6aa2:	1a12      	subs	r2, r2, r0
   d6aa4:	f000 baa5 	b.w	d6ff2 <memcpy>
   d6aa8:	2003f400 	.word	0x2003f400
   d6aac:	2003f404 	.word	0x2003f404
   d6ab0:	000d7940 	.word	0x000d7940

000d6ab4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6ab4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ab6:	2300      	movs	r3, #0
   d6ab8:	9300      	str	r3, [sp, #0]
   d6aba:	461a      	mov	r2, r3
   d6abc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ac0:	f7fe f94a 	bl	d4d58 <system_ctrl_set_result>
}
   d6ac4:	b003      	add	sp, #12
   d6ac6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6acc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6acc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6ace:	8843      	ldrh	r3, [r0, #2]
   d6ad0:	2b0a      	cmp	r3, #10
   d6ad2:	d008      	beq.n	d6ae6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6ad4:	2b50      	cmp	r3, #80	; 0x50
   d6ad6:	d109      	bne.n	d6aec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6ad8:	4b09      	ldr	r3, [pc, #36]	; (d6b00 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6ada:	681b      	ldr	r3, [r3, #0]
   d6adc:	b13b      	cbz	r3, d6aee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6ade:	b003      	add	sp, #12
   d6ae0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6ae4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6ae6:	f7ff ffe5 	bl	d6ab4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6aea:	e006      	b.n	d6afa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6aec:	2300      	movs	r3, #0
   d6aee:	9300      	str	r3, [sp, #0]
   d6af0:	461a      	mov	r2, r3
   d6af2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6af6:	f7fe f92f 	bl	d4d58 <system_ctrl_set_result>
        break;
    }
}
   d6afa:	b003      	add	sp, #12
   d6afc:	f85d fb04 	ldr.w	pc, [sp], #4
   d6b00:	2003e718 	.word	0x2003e718

000d6b04 <module_user_init_hook>:

void module_user_init_hook()
{
   d6b04:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6b06:	4c10      	ldr	r4, [pc, #64]	; (d6b48 <module_user_init_hook+0x44>)
   d6b08:	4d10      	ldr	r5, [pc, #64]	; (d6b4c <module_user_init_hook+0x48>)
   d6b0a:	6823      	ldr	r3, [r4, #0]
   d6b0c:	42ab      	cmp	r3, r5
   d6b0e:	4b10      	ldr	r3, [pc, #64]	; (d6b50 <module_user_init_hook+0x4c>)
   d6b10:	bf0c      	ite	eq
   d6b12:	2201      	moveq	r2, #1
   d6b14:	2200      	movne	r2, #0
   d6b16:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6b18:	d002      	beq.n	d6b20 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6b1a:	f7ff ffbf 	bl	d6a9c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6b1e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6b20:	f7fd ff80 	bl	d4a24 <HAL_RNG_GetRandomNumber>
   d6b24:	4604      	mov	r4, r0
    srand(seed);
   d6b26:	f000 fa93 	bl	d7050 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6b2a:	4b0a      	ldr	r3, [pc, #40]	; (d6b54 <module_user_init_hook+0x50>)
   d6b2c:	b113      	cbz	r3, d6b34 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6b2e:	4620      	mov	r0, r4
   d6b30:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6b34:	2100      	movs	r1, #0
   d6b36:	4807      	ldr	r0, [pc, #28]	; (d6b54 <module_user_init_hook+0x50>)
   d6b38:	f7fe f918 	bl	d4d6c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b3c:	2100      	movs	r1, #0
   d6b3e:	4806      	ldr	r0, [pc, #24]	; (d6b58 <module_user_init_hook+0x54>)
}
   d6b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b44:	f7fe b8fe 	b.w	d4d44 <system_ctrl_set_app_request_handler>
   d6b48:	2003f400 	.word	0x2003f400
   d6b4c:	9a271c1e 	.word	0x9a271c1e
   d6b50:	2003e71c 	.word	0x2003e71c
   d6b54:	00000000 	.word	0x00000000
   d6b58:	000d6acd 	.word	0x000d6acd

000d6b5c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6b5c:	b510      	push	{r4, lr}
   d6b5e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6b60:	f000 f89c 	bl	d6c9c <_ZN8particle7globals11instanceSpiEv>
   d6b64:	f7ff fa6a 	bl	d603c <_ZN8SPIClass9isEnabledEv>
   d6b68:	b128      	cbz	r0, d6b76 <pinAvailable+0x1a>
   d6b6a:	f1a4 030b 	sub.w	r3, r4, #11
   d6b6e:	2b02      	cmp	r3, #2
   d6b70:	d801      	bhi.n	d6b76 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d6b72:	2000      	movs	r0, #0
   d6b74:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6b76:	f000 f86b 	bl	d6c50 <_Z19__fetch_global_Wirev>
   d6b7a:	f7fe ffdb 	bl	d5b34 <_ZN7TwoWire9isEnabledEv>
   d6b7e:	b108      	cbz	r0, d6b84 <pinAvailable+0x28>
   d6b80:	2c01      	cmp	r4, #1
   d6b82:	d9f6      	bls.n	d6b72 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6b84:	f7ff fe76 	bl	d6874 <_Z22__fetch_global_Serial1v>
   d6b88:	f7ff fe70 	bl	d686c <_ZN11USARTSerial9isEnabledEv>
   d6b8c:	b118      	cbz	r0, d6b96 <pinAvailable+0x3a>
   d6b8e:	f1a4 0309 	sub.w	r3, r4, #9
   d6b92:	2b01      	cmp	r3, #1
   d6b94:	d9ed      	bls.n	d6b72 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6b96:	2c23      	cmp	r4, #35	; 0x23
   d6b98:	bf8c      	ite	hi
   d6b9a:	2000      	movhi	r0, #0
   d6b9c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6b9e:	bd10      	pop	{r4, pc}

000d6ba0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ba0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6ba2:	b538      	push	{r3, r4, r5, lr}
   d6ba4:	4604      	mov	r4, r0
   d6ba6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ba8:	d80a      	bhi.n	d6bc0 <pinMode+0x20>
   d6baa:	29ff      	cmp	r1, #255	; 0xff
   d6bac:	d008      	beq.n	d6bc0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6bae:	f7ff ffd5 	bl	d6b5c <pinAvailable>
   d6bb2:	b128      	cbz	r0, d6bc0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6bb4:	4629      	mov	r1, r5
   d6bb6:	4620      	mov	r0, r4
}
   d6bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6bbc:	f7fd bf52 	b.w	d4a64 <HAL_Pin_Mode>
   d6bc0:	bd38      	pop	{r3, r4, r5, pc}

000d6bc2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6bc2:	b538      	push	{r3, r4, r5, lr}
   d6bc4:	4604      	mov	r4, r0
   d6bc6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6bc8:	f7fd ff54 	bl	d4a74 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6bcc:	28ff      	cmp	r0, #255	; 0xff
   d6bce:	d010      	beq.n	d6bf2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6bd0:	2806      	cmp	r0, #6
   d6bd2:	d804      	bhi.n	d6bde <digitalWrite+0x1c>
   d6bd4:	234d      	movs	r3, #77	; 0x4d
   d6bd6:	fa23 f000 	lsr.w	r0, r3, r0
   d6bda:	07c3      	lsls	r3, r0, #31
   d6bdc:	d409      	bmi.n	d6bf2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6bde:	4620      	mov	r0, r4
   d6be0:	f7ff ffbc 	bl	d6b5c <pinAvailable>
   d6be4:	b128      	cbz	r0, d6bf2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6be6:	4629      	mov	r1, r5
   d6be8:	4620      	mov	r0, r4
}
   d6bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6bee:	f7fd bf49 	b.w	d4a84 <HAL_GPIO_Write>
   d6bf2:	bd38      	pop	{r3, r4, r5, pc}

000d6bf4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6bf4:	b510      	push	{r4, lr}
   d6bf6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6bf8:	f7fd ff3c 	bl	d4a74 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6bfc:	3804      	subs	r0, #4
   d6bfe:	b2c0      	uxtb	r0, r0
   d6c00:	2801      	cmp	r0, #1
   d6c02:	d908      	bls.n	d6c16 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6c04:	4620      	mov	r0, r4
   d6c06:	f7ff ffa9 	bl	d6b5c <pinAvailable>
   d6c0a:	b120      	cbz	r0, d6c16 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6c0c:	4620      	mov	r0, r4
}
   d6c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6c12:	f7fd bf3f 	b.w	d4a94 <HAL_GPIO_Read>
}
   d6c16:	2000      	movs	r0, #0
   d6c18:	bd10      	pop	{r4, pc}
	...

000d6c1c <_Z17acquireWireBufferv>:
   d6c1c:	b570      	push	{r4, r5, r6, lr}
   d6c1e:	4604      	mov	r4, r0
   d6c20:	2514      	movs	r5, #20
   d6c22:	462a      	mov	r2, r5
   d6c24:	4e09      	ldr	r6, [pc, #36]	; (d6c4c <_Z17acquireWireBufferv+0x30>)
   d6c26:	2100      	movs	r1, #0
   d6c28:	f000 fa09 	bl	d703e <memset>
   d6c2c:	8025      	strh	r5, [r4, #0]
   d6c2e:	2520      	movs	r5, #32
   d6c30:	4631      	mov	r1, r6
   d6c32:	60a5      	str	r5, [r4, #8]
   d6c34:	6125      	str	r5, [r4, #16]
   d6c36:	4628      	mov	r0, r5
   d6c38:	f000 f86f 	bl	d6d1a <_ZnajRKSt9nothrow_t>
   d6c3c:	4631      	mov	r1, r6
   d6c3e:	6060      	str	r0, [r4, #4]
   d6c40:	4628      	mov	r0, r5
   d6c42:	f000 f86a 	bl	d6d1a <_ZnajRKSt9nothrow_t>
   d6c46:	60e0      	str	r0, [r4, #12]
   d6c48:	4620      	mov	r0, r4
   d6c4a:	bd70      	pop	{r4, r5, r6, pc}
   d6c4c:	000d7798 	.word	0x000d7798

000d6c50 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6c50:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c52:	4d0e      	ldr	r5, [pc, #56]	; (d6c8c <_Z19__fetch_global_Wirev+0x3c>)
   d6c54:	6829      	ldr	r1, [r5, #0]
   d6c56:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6c5a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c5c:	d113      	bne.n	d6c86 <_Z19__fetch_global_Wirev+0x36>
   d6c5e:	4628      	mov	r0, r5
   d6c60:	f7fd fa1f 	bl	d40a2 <__cxa_guard_acquire>
   d6c64:	b178      	cbz	r0, d6c86 <_Z19__fetch_global_Wirev+0x36>
   d6c66:	a801      	add	r0, sp, #4
   d6c68:	f7ff ffd8 	bl	d6c1c <_Z17acquireWireBufferv>
   d6c6c:	aa01      	add	r2, sp, #4
   d6c6e:	4621      	mov	r1, r4
   d6c70:	4807      	ldr	r0, [pc, #28]	; (d6c90 <_Z19__fetch_global_Wirev+0x40>)
   d6c72:	f7fe ff4d 	bl	d5b10 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6c76:	4628      	mov	r0, r5
   d6c78:	f7fd fa18 	bl	d40ac <__cxa_guard_release>
   d6c7c:	4a05      	ldr	r2, [pc, #20]	; (d6c94 <_Z19__fetch_global_Wirev+0x44>)
   d6c7e:	4906      	ldr	r1, [pc, #24]	; (d6c98 <_Z19__fetch_global_Wirev+0x48>)
   d6c80:	4803      	ldr	r0, [pc, #12]	; (d6c90 <_Z19__fetch_global_Wirev+0x40>)
   d6c82:	f000 f82b 	bl	d6cdc <__aeabi_atexit>
	return wire;
}
   d6c86:	4802      	ldr	r0, [pc, #8]	; (d6c90 <_Z19__fetch_global_Wirev+0x40>)
   d6c88:	b007      	add	sp, #28
   d6c8a:	bd30      	pop	{r4, r5, pc}
   d6c8c:	2003e724 	.word	0x2003e724
   d6c90:	2003e728 	.word	0x2003e728
   d6c94:	2003dea0 	.word	0x2003dea0
   d6c98:	000d5ab9 	.word	0x000d5ab9

000d6c9c <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d6c9c:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d6c9e:	4d0b      	ldr	r5, [pc, #44]	; (d6ccc <_ZN8particle7globals11instanceSpiEv+0x30>)
   d6ca0:	6829      	ldr	r1, [r5, #0]
   d6ca2:	f011 0401 	ands.w	r4, r1, #1
   d6ca6:	d10f      	bne.n	d6cc8 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d6ca8:	4628      	mov	r0, r5
   d6caa:	f7fd f9fa 	bl	d40a2 <__cxa_guard_acquire>
   d6cae:	b158      	cbz	r0, d6cc8 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d6cb0:	4621      	mov	r1, r4
   d6cb2:	4807      	ldr	r0, [pc, #28]	; (d6cd0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d6cb4:	f7ff f9b4 	bl	d6020 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6cb8:	4628      	mov	r0, r5
   d6cba:	f7fd f9f7 	bl	d40ac <__cxa_guard_release>
   d6cbe:	4a05      	ldr	r2, [pc, #20]	; (d6cd4 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d6cc0:	4905      	ldr	r1, [pc, #20]	; (d6cd8 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d6cc2:	4803      	ldr	r0, [pc, #12]	; (d6cd0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d6cc4:	f000 f80a 	bl	d6cdc <__aeabi_atexit>
    return instance;
}
   d6cc8:	4801      	ldr	r0, [pc, #4]	; (d6cd0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d6cca:	bd38      	pop	{r3, r4, r5, pc}
   d6ccc:	2003e748 	.word	0x2003e748
   d6cd0:	2003e73c 	.word	0x2003e73c
   d6cd4:	2003dea0 	.word	0x2003dea0
   d6cd8:	000d6011 	.word	0x000d6011

000d6cdc <__aeabi_atexit>:
   d6cdc:	460b      	mov	r3, r1
   d6cde:	4601      	mov	r1, r0
   d6ce0:	4618      	mov	r0, r3
   d6ce2:	f000 b969 	b.w	d6fb8 <__cxa_atexit>

000d6ce6 <_ZdlPvj>:
   d6ce6:	f7fd b9d8 	b.w	d409a <_ZdlPv>
	...

000d6cec <_ZSt15get_new_handlerv>:
   d6cec:	4b02      	ldr	r3, [pc, #8]	; (d6cf8 <_ZSt15get_new_handlerv+0xc>)
   d6cee:	6818      	ldr	r0, [r3, #0]
   d6cf0:	f3bf 8f5f 	dmb	sy
   d6cf4:	4770      	bx	lr
   d6cf6:	bf00      	nop
   d6cf8:	2003e74c 	.word	0x2003e74c

000d6cfc <_ZnwjRKSt9nothrow_t>:
   d6cfc:	b510      	push	{r4, lr}
   d6cfe:	2800      	cmp	r0, #0
   d6d00:	bf14      	ite	ne
   d6d02:	4604      	movne	r4, r0
   d6d04:	2401      	moveq	r4, #1
   d6d06:	4620      	mov	r0, r4
   d6d08:	f7fe f888 	bl	d4e1c <malloc>
   d6d0c:	b920      	cbnz	r0, d6d18 <_ZnwjRKSt9nothrow_t+0x1c>
   d6d0e:	f7ff ffed 	bl	d6cec <_ZSt15get_new_handlerv>
   d6d12:	b108      	cbz	r0, d6d18 <_ZnwjRKSt9nothrow_t+0x1c>
   d6d14:	4780      	blx	r0
   d6d16:	e7f6      	b.n	d6d06 <_ZnwjRKSt9nothrow_t+0xa>
   d6d18:	bd10      	pop	{r4, pc}

000d6d1a <_ZnajRKSt9nothrow_t>:
   d6d1a:	f7ff bfef 	b.w	d6cfc <_ZnwjRKSt9nothrow_t>
	...

000d6d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6d20:	4b24      	ldr	r3, [pc, #144]	; (d6db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6d22:	681a      	ldr	r2, [r3, #0]
   d6d24:	07d0      	lsls	r0, r2, #31
   d6d26:	bf5c      	itt	pl
   d6d28:	2201      	movpl	r2, #1
   d6d2a:	601a      	strpl	r2, [r3, #0]
   d6d2c:	4b22      	ldr	r3, [pc, #136]	; (d6db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6d2e:	681a      	ldr	r2, [r3, #0]
   d6d30:	07d1      	lsls	r1, r2, #31
   d6d32:	bf5c      	itt	pl
   d6d34:	2201      	movpl	r2, #1
   d6d36:	601a      	strpl	r2, [r3, #0]
   d6d38:	4b20      	ldr	r3, [pc, #128]	; (d6dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6d3a:	681a      	ldr	r2, [r3, #0]
   d6d3c:	07d2      	lsls	r2, r2, #31
   d6d3e:	bf5c      	itt	pl
   d6d40:	2201      	movpl	r2, #1
   d6d42:	601a      	strpl	r2, [r3, #0]
   d6d44:	4b1e      	ldr	r3, [pc, #120]	; (d6dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6d46:	681a      	ldr	r2, [r3, #0]
   d6d48:	07d0      	lsls	r0, r2, #31
   d6d4a:	bf5c      	itt	pl
   d6d4c:	2201      	movpl	r2, #1
   d6d4e:	601a      	strpl	r2, [r3, #0]
   d6d50:	4b1c      	ldr	r3, [pc, #112]	; (d6dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6d52:	681a      	ldr	r2, [r3, #0]
   d6d54:	07d1      	lsls	r1, r2, #31
   d6d56:	bf5c      	itt	pl
   d6d58:	2201      	movpl	r2, #1
   d6d5a:	601a      	strpl	r2, [r3, #0]
   d6d5c:	4b1a      	ldr	r3, [pc, #104]	; (d6dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6d5e:	681a      	ldr	r2, [r3, #0]
   d6d60:	07d2      	lsls	r2, r2, #31
   d6d62:	bf5c      	itt	pl
   d6d64:	2201      	movpl	r2, #1
   d6d66:	601a      	strpl	r2, [r3, #0]
   d6d68:	4b18      	ldr	r3, [pc, #96]	; (d6dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6d6a:	681a      	ldr	r2, [r3, #0]
   d6d6c:	07d0      	lsls	r0, r2, #31
   d6d6e:	bf5c      	itt	pl
   d6d70:	2201      	movpl	r2, #1
   d6d72:	601a      	strpl	r2, [r3, #0]
   d6d74:	4b16      	ldr	r3, [pc, #88]	; (d6dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6d76:	681a      	ldr	r2, [r3, #0]
   d6d78:	07d1      	lsls	r1, r2, #31
   d6d7a:	bf5c      	itt	pl
   d6d7c:	2201      	movpl	r2, #1
   d6d7e:	601a      	strpl	r2, [r3, #0]
   d6d80:	4b14      	ldr	r3, [pc, #80]	; (d6dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6d82:	681a      	ldr	r2, [r3, #0]
   d6d84:	07d2      	lsls	r2, r2, #31
   d6d86:	bf5c      	itt	pl
   d6d88:	2201      	movpl	r2, #1
   d6d8a:	601a      	strpl	r2, [r3, #0]
   d6d8c:	4b12      	ldr	r3, [pc, #72]	; (d6dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6d8e:	681a      	ldr	r2, [r3, #0]
   d6d90:	07d0      	lsls	r0, r2, #31
   d6d92:	bf5c      	itt	pl
   d6d94:	2201      	movpl	r2, #1
   d6d96:	601a      	strpl	r2, [r3, #0]
   d6d98:	4b10      	ldr	r3, [pc, #64]	; (d6ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6d9a:	681a      	ldr	r2, [r3, #0]
   d6d9c:	07d1      	lsls	r1, r2, #31
   d6d9e:	bf5c      	itt	pl
   d6da0:	2201      	movpl	r2, #1
   d6da2:	601a      	strpl	r2, [r3, #0]
   d6da4:	4b0e      	ldr	r3, [pc, #56]	; (d6de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6da6:	681a      	ldr	r2, [r3, #0]
   d6da8:	07d2      	lsls	r2, r2, #31
   d6daa:	bf5c      	itt	pl
   d6dac:	2201      	movpl	r2, #1
   d6dae:	601a      	strpl	r2, [r3, #0]
   d6db0:	4770      	bx	lr
   d6db2:	bf00      	nop
   d6db4:	2003e77c 	.word	0x2003e77c
   d6db8:	2003e778 	.word	0x2003e778
   d6dbc:	2003e774 	.word	0x2003e774
   d6dc0:	2003e770 	.word	0x2003e770
   d6dc4:	2003e76c 	.word	0x2003e76c
   d6dc8:	2003e768 	.word	0x2003e768
   d6dcc:	2003e764 	.word	0x2003e764
   d6dd0:	2003e760 	.word	0x2003e760
   d6dd4:	2003e75c 	.word	0x2003e75c
   d6dd8:	2003e758 	.word	0x2003e758
   d6ddc:	2003e754 	.word	0x2003e754
   d6de0:	2003e750 	.word	0x2003e750

000d6de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6de4:	4b18      	ldr	r3, [pc, #96]	; (d6e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6de6:	681a      	ldr	r2, [r3, #0]
   d6de8:	07d1      	lsls	r1, r2, #31
   d6dea:	bf5c      	itt	pl
   d6dec:	2201      	movpl	r2, #1
   d6dee:	601a      	strpl	r2, [r3, #0]
   d6df0:	4b16      	ldr	r3, [pc, #88]	; (d6e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6df2:	681a      	ldr	r2, [r3, #0]
   d6df4:	07d2      	lsls	r2, r2, #31
   d6df6:	bf5c      	itt	pl
   d6df8:	2201      	movpl	r2, #1
   d6dfa:	601a      	strpl	r2, [r3, #0]
   d6dfc:	4b14      	ldr	r3, [pc, #80]	; (d6e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6dfe:	681a      	ldr	r2, [r3, #0]
   d6e00:	07d0      	lsls	r0, r2, #31
   d6e02:	bf5c      	itt	pl
   d6e04:	2201      	movpl	r2, #1
   d6e06:	601a      	strpl	r2, [r3, #0]
   d6e08:	4b12      	ldr	r3, [pc, #72]	; (d6e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6e0a:	681a      	ldr	r2, [r3, #0]
   d6e0c:	07d1      	lsls	r1, r2, #31
   d6e0e:	bf5c      	itt	pl
   d6e10:	2201      	movpl	r2, #1
   d6e12:	601a      	strpl	r2, [r3, #0]
   d6e14:	4b10      	ldr	r3, [pc, #64]	; (d6e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6e16:	681a      	ldr	r2, [r3, #0]
   d6e18:	07d2      	lsls	r2, r2, #31
   d6e1a:	bf5c      	itt	pl
   d6e1c:	2201      	movpl	r2, #1
   d6e1e:	601a      	strpl	r2, [r3, #0]
   d6e20:	4b0e      	ldr	r3, [pc, #56]	; (d6e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6e22:	681a      	ldr	r2, [r3, #0]
   d6e24:	07d0      	lsls	r0, r2, #31
   d6e26:	bf5c      	itt	pl
   d6e28:	2201      	movpl	r2, #1
   d6e2a:	601a      	strpl	r2, [r3, #0]
   d6e2c:	4b0c      	ldr	r3, [pc, #48]	; (d6e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6e2e:	681a      	ldr	r2, [r3, #0]
   d6e30:	07d1      	lsls	r1, r2, #31
   d6e32:	bf5c      	itt	pl
   d6e34:	2201      	movpl	r2, #1
   d6e36:	601a      	strpl	r2, [r3, #0]
   d6e38:	4b0a      	ldr	r3, [pc, #40]	; (d6e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6e3a:	681a      	ldr	r2, [r3, #0]
   d6e3c:	07d2      	lsls	r2, r2, #31
   d6e3e:	bf5c      	itt	pl
   d6e40:	2201      	movpl	r2, #1
   d6e42:	601a      	strpl	r2, [r3, #0]
   d6e44:	4770      	bx	lr
   d6e46:	bf00      	nop
   d6e48:	2003e79c 	.word	0x2003e79c
   d6e4c:	2003e798 	.word	0x2003e798
   d6e50:	2003e794 	.word	0x2003e794
   d6e54:	2003e790 	.word	0x2003e790
   d6e58:	2003e78c 	.word	0x2003e78c
   d6e5c:	2003e788 	.word	0x2003e788
   d6e60:	2003e784 	.word	0x2003e784
   d6e64:	2003e780 	.word	0x2003e780

000d6e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6e68:	4b18      	ldr	r3, [pc, #96]	; (d6ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6e6a:	681a      	ldr	r2, [r3, #0]
   d6e6c:	07d1      	lsls	r1, r2, #31
   d6e6e:	bf5c      	itt	pl
   d6e70:	2201      	movpl	r2, #1
   d6e72:	601a      	strpl	r2, [r3, #0]
   d6e74:	4b16      	ldr	r3, [pc, #88]	; (d6ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6e76:	681a      	ldr	r2, [r3, #0]
   d6e78:	07d2      	lsls	r2, r2, #31
   d6e7a:	bf5c      	itt	pl
   d6e7c:	2201      	movpl	r2, #1
   d6e7e:	601a      	strpl	r2, [r3, #0]
   d6e80:	4b14      	ldr	r3, [pc, #80]	; (d6ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6e82:	681a      	ldr	r2, [r3, #0]
   d6e84:	07d0      	lsls	r0, r2, #31
   d6e86:	bf5c      	itt	pl
   d6e88:	2201      	movpl	r2, #1
   d6e8a:	601a      	strpl	r2, [r3, #0]
   d6e8c:	4b12      	ldr	r3, [pc, #72]	; (d6ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6e8e:	681a      	ldr	r2, [r3, #0]
   d6e90:	07d1      	lsls	r1, r2, #31
   d6e92:	bf5c      	itt	pl
   d6e94:	2201      	movpl	r2, #1
   d6e96:	601a      	strpl	r2, [r3, #0]
   d6e98:	4b10      	ldr	r3, [pc, #64]	; (d6edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6e9a:	681a      	ldr	r2, [r3, #0]
   d6e9c:	07d2      	lsls	r2, r2, #31
   d6e9e:	bf5c      	itt	pl
   d6ea0:	2201      	movpl	r2, #1
   d6ea2:	601a      	strpl	r2, [r3, #0]
   d6ea4:	4b0e      	ldr	r3, [pc, #56]	; (d6ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6ea6:	681a      	ldr	r2, [r3, #0]
   d6ea8:	07d0      	lsls	r0, r2, #31
   d6eaa:	bf5c      	itt	pl
   d6eac:	2201      	movpl	r2, #1
   d6eae:	601a      	strpl	r2, [r3, #0]
   d6eb0:	4b0c      	ldr	r3, [pc, #48]	; (d6ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6eb2:	681a      	ldr	r2, [r3, #0]
   d6eb4:	07d1      	lsls	r1, r2, #31
   d6eb6:	bf5c      	itt	pl
   d6eb8:	2201      	movpl	r2, #1
   d6eba:	601a      	strpl	r2, [r3, #0]
   d6ebc:	4b0a      	ldr	r3, [pc, #40]	; (d6ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6ebe:	681a      	ldr	r2, [r3, #0]
   d6ec0:	07d2      	lsls	r2, r2, #31
   d6ec2:	bf5c      	itt	pl
   d6ec4:	2201      	movpl	r2, #1
   d6ec6:	601a      	strpl	r2, [r3, #0]
   d6ec8:	4770      	bx	lr
   d6eca:	bf00      	nop
   d6ecc:	2003e7bc 	.word	0x2003e7bc
   d6ed0:	2003e7b8 	.word	0x2003e7b8
   d6ed4:	2003e7b4 	.word	0x2003e7b4
   d6ed8:	2003e7b0 	.word	0x2003e7b0
   d6edc:	2003e7ac 	.word	0x2003e7ac
   d6ee0:	2003e7a8 	.word	0x2003e7a8
   d6ee4:	2003e7a4 	.word	0x2003e7a4
   d6ee8:	2003e7a0 	.word	0x2003e7a0

000d6eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6eec:	4b24      	ldr	r3, [pc, #144]	; (d6f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6eee:	681a      	ldr	r2, [r3, #0]
   d6ef0:	07d0      	lsls	r0, r2, #31
   d6ef2:	bf5c      	itt	pl
   d6ef4:	2201      	movpl	r2, #1
   d6ef6:	601a      	strpl	r2, [r3, #0]
   d6ef8:	4b22      	ldr	r3, [pc, #136]	; (d6f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6efa:	681a      	ldr	r2, [r3, #0]
   d6efc:	07d1      	lsls	r1, r2, #31
   d6efe:	bf5c      	itt	pl
   d6f00:	2201      	movpl	r2, #1
   d6f02:	601a      	strpl	r2, [r3, #0]
   d6f04:	4b20      	ldr	r3, [pc, #128]	; (d6f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6f06:	681a      	ldr	r2, [r3, #0]
   d6f08:	07d2      	lsls	r2, r2, #31
   d6f0a:	bf5c      	itt	pl
   d6f0c:	2201      	movpl	r2, #1
   d6f0e:	601a      	strpl	r2, [r3, #0]
   d6f10:	4b1e      	ldr	r3, [pc, #120]	; (d6f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6f12:	681a      	ldr	r2, [r3, #0]
   d6f14:	07d0      	lsls	r0, r2, #31
   d6f16:	bf5c      	itt	pl
   d6f18:	2201      	movpl	r2, #1
   d6f1a:	601a      	strpl	r2, [r3, #0]
   d6f1c:	4b1c      	ldr	r3, [pc, #112]	; (d6f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6f1e:	681a      	ldr	r2, [r3, #0]
   d6f20:	07d1      	lsls	r1, r2, #31
   d6f22:	bf5c      	itt	pl
   d6f24:	2201      	movpl	r2, #1
   d6f26:	601a      	strpl	r2, [r3, #0]
   d6f28:	4b1a      	ldr	r3, [pc, #104]	; (d6f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6f2a:	681a      	ldr	r2, [r3, #0]
   d6f2c:	07d2      	lsls	r2, r2, #31
   d6f2e:	bf5c      	itt	pl
   d6f30:	2201      	movpl	r2, #1
   d6f32:	601a      	strpl	r2, [r3, #0]
   d6f34:	4b18      	ldr	r3, [pc, #96]	; (d6f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6f36:	681a      	ldr	r2, [r3, #0]
   d6f38:	07d0      	lsls	r0, r2, #31
   d6f3a:	bf5c      	itt	pl
   d6f3c:	2201      	movpl	r2, #1
   d6f3e:	601a      	strpl	r2, [r3, #0]
   d6f40:	4b16      	ldr	r3, [pc, #88]	; (d6f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6f42:	681a      	ldr	r2, [r3, #0]
   d6f44:	07d1      	lsls	r1, r2, #31
   d6f46:	bf5c      	itt	pl
   d6f48:	2201      	movpl	r2, #1
   d6f4a:	601a      	strpl	r2, [r3, #0]
   d6f4c:	4b14      	ldr	r3, [pc, #80]	; (d6fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6f4e:	681a      	ldr	r2, [r3, #0]
   d6f50:	07d2      	lsls	r2, r2, #31
   d6f52:	bf5c      	itt	pl
   d6f54:	2201      	movpl	r2, #1
   d6f56:	601a      	strpl	r2, [r3, #0]
   d6f58:	4b12      	ldr	r3, [pc, #72]	; (d6fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6f5a:	681a      	ldr	r2, [r3, #0]
   d6f5c:	07d0      	lsls	r0, r2, #31
   d6f5e:	bf5c      	itt	pl
   d6f60:	2201      	movpl	r2, #1
   d6f62:	601a      	strpl	r2, [r3, #0]
   d6f64:	4b10      	ldr	r3, [pc, #64]	; (d6fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6f66:	681a      	ldr	r2, [r3, #0]
   d6f68:	07d1      	lsls	r1, r2, #31
   d6f6a:	bf5c      	itt	pl
   d6f6c:	2201      	movpl	r2, #1
   d6f6e:	601a      	strpl	r2, [r3, #0]
   d6f70:	4b0e      	ldr	r3, [pc, #56]	; (d6fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6f72:	681a      	ldr	r2, [r3, #0]
   d6f74:	07d2      	lsls	r2, r2, #31
   d6f76:	bf5c      	itt	pl
   d6f78:	2201      	movpl	r2, #1
   d6f7a:	601a      	strpl	r2, [r3, #0]
   d6f7c:	4770      	bx	lr
   d6f7e:	bf00      	nop
   d6f80:	2003e7ec 	.word	0x2003e7ec
   d6f84:	2003e7e8 	.word	0x2003e7e8
   d6f88:	2003e7e4 	.word	0x2003e7e4
   d6f8c:	2003e7e0 	.word	0x2003e7e0
   d6f90:	2003e7dc 	.word	0x2003e7dc
   d6f94:	2003e7d8 	.word	0x2003e7d8
   d6f98:	2003e7d4 	.word	0x2003e7d4
   d6f9c:	2003e7d0 	.word	0x2003e7d0
   d6fa0:	2003e7cc 	.word	0x2003e7cc
   d6fa4:	2003e7c8 	.word	0x2003e7c8
   d6fa8:	2003e7c4 	.word	0x2003e7c4
   d6fac:	2003e7c0 	.word	0x2003e7c0

000d6fb0 <atoi>:
   d6fb0:	220a      	movs	r2, #10
   d6fb2:	2100      	movs	r1, #0
   d6fb4:	f000 b914 	b.w	d71e0 <strtol>

000d6fb8 <__cxa_atexit>:
   d6fb8:	b510      	push	{r4, lr}
   d6fba:	4c05      	ldr	r4, [pc, #20]	; (d6fd0 <__cxa_atexit+0x18>)
   d6fbc:	4613      	mov	r3, r2
   d6fbe:	b12c      	cbz	r4, d6fcc <__cxa_atexit+0x14>
   d6fc0:	460a      	mov	r2, r1
   d6fc2:	4601      	mov	r1, r0
   d6fc4:	2002      	movs	r0, #2
   d6fc6:	f3af 8000 	nop.w
   d6fca:	bd10      	pop	{r4, pc}
   d6fcc:	4620      	mov	r0, r4
   d6fce:	bd10      	pop	{r4, pc}
   d6fd0:	00000000 	.word	0x00000000

000d6fd4 <memcmp>:
   d6fd4:	b510      	push	{r4, lr}
   d6fd6:	3901      	subs	r1, #1
   d6fd8:	4402      	add	r2, r0
   d6fda:	4290      	cmp	r0, r2
   d6fdc:	d007      	beq.n	d6fee <memcmp+0x1a>
   d6fde:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6fe2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6fe6:	42a3      	cmp	r3, r4
   d6fe8:	d0f7      	beq.n	d6fda <memcmp+0x6>
   d6fea:	1b18      	subs	r0, r3, r4
   d6fec:	bd10      	pop	{r4, pc}
   d6fee:	2000      	movs	r0, #0
   d6ff0:	bd10      	pop	{r4, pc}

000d6ff2 <memcpy>:
   d6ff2:	b510      	push	{r4, lr}
   d6ff4:	1e43      	subs	r3, r0, #1
   d6ff6:	440a      	add	r2, r1
   d6ff8:	4291      	cmp	r1, r2
   d6ffa:	d004      	beq.n	d7006 <memcpy+0x14>
   d6ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7000:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7004:	e7f8      	b.n	d6ff8 <memcpy+0x6>
   d7006:	bd10      	pop	{r4, pc}

000d7008 <memmove>:
   d7008:	4288      	cmp	r0, r1
   d700a:	b510      	push	{r4, lr}
   d700c:	eb01 0302 	add.w	r3, r1, r2
   d7010:	d801      	bhi.n	d7016 <memmove+0xe>
   d7012:	1e42      	subs	r2, r0, #1
   d7014:	e00b      	b.n	d702e <memmove+0x26>
   d7016:	4298      	cmp	r0, r3
   d7018:	d2fb      	bcs.n	d7012 <memmove+0xa>
   d701a:	1881      	adds	r1, r0, r2
   d701c:	1ad2      	subs	r2, r2, r3
   d701e:	42d3      	cmn	r3, r2
   d7020:	d004      	beq.n	d702c <memmove+0x24>
   d7022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7026:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d702a:	e7f8      	b.n	d701e <memmove+0x16>
   d702c:	bd10      	pop	{r4, pc}
   d702e:	4299      	cmp	r1, r3
   d7030:	d004      	beq.n	d703c <memmove+0x34>
   d7032:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7036:	f802 4f01 	strb.w	r4, [r2, #1]!
   d703a:	e7f8      	b.n	d702e <memmove+0x26>
   d703c:	bd10      	pop	{r4, pc}

000d703e <memset>:
   d703e:	4402      	add	r2, r0
   d7040:	4603      	mov	r3, r0
   d7042:	4293      	cmp	r3, r2
   d7044:	d002      	beq.n	d704c <memset+0xe>
   d7046:	f803 1b01 	strb.w	r1, [r3], #1
   d704a:	e7fa      	b.n	d7042 <memset+0x4>
   d704c:	4770      	bx	lr
	...

000d7050 <srand>:
   d7050:	b538      	push	{r3, r4, r5, lr}
   d7052:	4b12      	ldr	r3, [pc, #72]	; (d709c <srand+0x4c>)
   d7054:	681c      	ldr	r4, [r3, #0]
   d7056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7058:	4605      	mov	r5, r0
   d705a:	b9d3      	cbnz	r3, d7092 <srand+0x42>
   d705c:	2018      	movs	r0, #24
   d705e:	f7fd fedd 	bl	d4e1c <malloc>
   d7062:	f243 330e 	movw	r3, #13070	; 0x330e
   d7066:	63a0      	str	r0, [r4, #56]	; 0x38
   d7068:	8003      	strh	r3, [r0, #0]
   d706a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d706e:	8043      	strh	r3, [r0, #2]
   d7070:	f241 2334 	movw	r3, #4660	; 0x1234
   d7074:	8083      	strh	r3, [r0, #4]
   d7076:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d707a:	80c3      	strh	r3, [r0, #6]
   d707c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7080:	8103      	strh	r3, [r0, #8]
   d7082:	2305      	movs	r3, #5
   d7084:	8143      	strh	r3, [r0, #10]
   d7086:	230b      	movs	r3, #11
   d7088:	8183      	strh	r3, [r0, #12]
   d708a:	2201      	movs	r2, #1
   d708c:	2300      	movs	r3, #0
   d708e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7092:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7094:	2200      	movs	r2, #0
   d7096:	611d      	str	r5, [r3, #16]
   d7098:	615a      	str	r2, [r3, #20]
   d709a:	bd38      	pop	{r3, r4, r5, pc}
   d709c:	2003de9c 	.word	0x2003de9c

000d70a0 <strcmp>:
   d70a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d70a4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d70a8:	2a01      	cmp	r2, #1
   d70aa:	bf28      	it	cs
   d70ac:	429a      	cmpcs	r2, r3
   d70ae:	d0f7      	beq.n	d70a0 <strcmp>
   d70b0:	1ad0      	subs	r0, r2, r3
   d70b2:	4770      	bx	lr

000d70b4 <strcpy>:
   d70b4:	4603      	mov	r3, r0
   d70b6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d70ba:	f803 2b01 	strb.w	r2, [r3], #1
   d70be:	2a00      	cmp	r2, #0
   d70c0:	d1f9      	bne.n	d70b6 <strcpy+0x2>
   d70c2:	4770      	bx	lr

000d70c4 <strlen>:
   d70c4:	4603      	mov	r3, r0
   d70c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d70ca:	2a00      	cmp	r2, #0
   d70cc:	d1fb      	bne.n	d70c6 <strlen+0x2>
   d70ce:	1a18      	subs	r0, r3, r0
   d70d0:	3801      	subs	r0, #1
   d70d2:	4770      	bx	lr

000d70d4 <_strtol_r>:
   d70d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d70d8:	4680      	mov	r8, r0
   d70da:	4840      	ldr	r0, [pc, #256]	; (d71dc <_strtol_r+0x108>)
   d70dc:	f8d0 9000 	ldr.w	r9, [r0]
   d70e0:	460f      	mov	r7, r1
   d70e2:	463d      	mov	r5, r7
   d70e4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d70e8:	eb09 0004 	add.w	r0, r9, r4
   d70ec:	7840      	ldrb	r0, [r0, #1]
   d70ee:	f000 0008 	and.w	r0, r0, #8
   d70f2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d70f6:	b108      	cbz	r0, d70fc <_strtol_r+0x28>
   d70f8:	462f      	mov	r7, r5
   d70fa:	e7f2      	b.n	d70e2 <_strtol_r+0xe>
   d70fc:	2c2d      	cmp	r4, #45	; 0x2d
   d70fe:	d103      	bne.n	d7108 <_strtol_r+0x34>
   d7100:	1cbd      	adds	r5, r7, #2
   d7102:	787c      	ldrb	r4, [r7, #1]
   d7104:	2601      	movs	r6, #1
   d7106:	e003      	b.n	d7110 <_strtol_r+0x3c>
   d7108:	2c2b      	cmp	r4, #43	; 0x2b
   d710a:	bf04      	itt	eq
   d710c:	787c      	ldrbeq	r4, [r7, #1]
   d710e:	1cbd      	addeq	r5, r7, #2
   d7110:	b113      	cbz	r3, d7118 <_strtol_r+0x44>
   d7112:	2b10      	cmp	r3, #16
   d7114:	d10a      	bne.n	d712c <_strtol_r+0x58>
   d7116:	e05b      	b.n	d71d0 <_strtol_r+0xfc>
   d7118:	2c30      	cmp	r4, #48	; 0x30
   d711a:	d157      	bne.n	d71cc <_strtol_r+0xf8>
   d711c:	7828      	ldrb	r0, [r5, #0]
   d711e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7122:	2858      	cmp	r0, #88	; 0x58
   d7124:	d14d      	bne.n	d71c2 <_strtol_r+0xee>
   d7126:	786c      	ldrb	r4, [r5, #1]
   d7128:	2310      	movs	r3, #16
   d712a:	3502      	adds	r5, #2
   d712c:	2e00      	cmp	r6, #0
   d712e:	bf14      	ite	ne
   d7130:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7134:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7138:	2700      	movs	r7, #0
   d713a:	fbbc faf3 	udiv	sl, ip, r3
   d713e:	4638      	mov	r0, r7
   d7140:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7144:	eb09 0e04 	add.w	lr, r9, r4
   d7148:	f89e e001 	ldrb.w	lr, [lr, #1]
   d714c:	f01e 0f04 	tst.w	lr, #4
   d7150:	d001      	beq.n	d7156 <_strtol_r+0x82>
   d7152:	3c30      	subs	r4, #48	; 0x30
   d7154:	e00b      	b.n	d716e <_strtol_r+0x9a>
   d7156:	f01e 0e03 	ands.w	lr, lr, #3
   d715a:	d01b      	beq.n	d7194 <_strtol_r+0xc0>
   d715c:	f1be 0f01 	cmp.w	lr, #1
   d7160:	bf0c      	ite	eq
   d7162:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7166:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d716a:	ebce 0404 	rsb	r4, lr, r4
   d716e:	42a3      	cmp	r3, r4
   d7170:	dd10      	ble.n	d7194 <_strtol_r+0xc0>
   d7172:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d7176:	d00a      	beq.n	d718e <_strtol_r+0xba>
   d7178:	4550      	cmp	r0, sl
   d717a:	d806      	bhi.n	d718a <_strtol_r+0xb6>
   d717c:	d101      	bne.n	d7182 <_strtol_r+0xae>
   d717e:	4564      	cmp	r4, ip
   d7180:	dc03      	bgt.n	d718a <_strtol_r+0xb6>
   d7182:	fb03 4000 	mla	r0, r3, r0, r4
   d7186:	2701      	movs	r7, #1
   d7188:	e001      	b.n	d718e <_strtol_r+0xba>
   d718a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d718e:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7192:	e7d7      	b.n	d7144 <_strtol_r+0x70>
   d7194:	1c7b      	adds	r3, r7, #1
   d7196:	d10c      	bne.n	d71b2 <_strtol_r+0xde>
   d7198:	2e00      	cmp	r6, #0
   d719a:	f04f 0322 	mov.w	r3, #34	; 0x22
   d719e:	bf14      	ite	ne
   d71a0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d71a4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d71a8:	f8c8 3000 	str.w	r3, [r8]
   d71ac:	b92a      	cbnz	r2, d71ba <_strtol_r+0xe6>
   d71ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71b2:	b106      	cbz	r6, d71b6 <_strtol_r+0xe2>
   d71b4:	4240      	negs	r0, r0
   d71b6:	b172      	cbz	r2, d71d6 <_strtol_r+0x102>
   d71b8:	b107      	cbz	r7, d71bc <_strtol_r+0xe8>
   d71ba:	1e69      	subs	r1, r5, #1
   d71bc:	6011      	str	r1, [r2, #0]
   d71be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71c2:	2430      	movs	r4, #48	; 0x30
   d71c4:	2b00      	cmp	r3, #0
   d71c6:	d1b1      	bne.n	d712c <_strtol_r+0x58>
   d71c8:	2308      	movs	r3, #8
   d71ca:	e7af      	b.n	d712c <_strtol_r+0x58>
   d71cc:	230a      	movs	r3, #10
   d71ce:	e7ad      	b.n	d712c <_strtol_r+0x58>
   d71d0:	2c30      	cmp	r4, #48	; 0x30
   d71d2:	d0a3      	beq.n	d711c <_strtol_r+0x48>
   d71d4:	e7aa      	b.n	d712c <_strtol_r+0x58>
   d71d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d71da:	bf00      	nop
   d71dc:	2003de38 	.word	0x2003de38

000d71e0 <strtol>:
   d71e0:	4613      	mov	r3, r2
   d71e2:	460a      	mov	r2, r1
   d71e4:	4601      	mov	r1, r0
   d71e6:	4802      	ldr	r0, [pc, #8]	; (d71f0 <strtol+0x10>)
   d71e8:	6800      	ldr	r0, [r0, #0]
   d71ea:	f7ff bf73 	b.w	d70d4 <_strtol_r>
   d71ee:	bf00      	nop
   d71f0:	2003de9c 	.word	0x2003de9c

000d71f4 <dynalib_user>:
   d71f4:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d7204:	00000000 54544820 2e312f50 000a0d30     .... HTTP/1.0...
   d7214:	736f6c63 6f430065 63656e6e 6e6f6974     close.Connection
   d7224:	534f4800 6f430054 6e65746e 654c2d74     .HOST.Content-Le
   d7234:	6874676e 534f5000 30250054 25007832     ngth.POST.%02x.%
   d7244:	202c646c 202c6425 58323025 3230253a     ld, %d, %02X:%02
   d7254:	30253a58 253a5832 3a583230 58323025     X:%02X:%02X:%02X
   d7264:	3230253a 25202c58 72500073 656c626f     :%02X, %s.Proble
   d7274:	6977206d 67206874 705f7061 6d617261     m with gap_param
   d7284:	6e695f73 203a7469 46006425 73696e69     s_init: %d.Finis
   d7294:	20646568 6e616353 32393100 3836312e     hed Scan.192.168
   d72a4:	312e302e 2f003630 61746164 6b227b00     .0.106./data.{"k
   d72b4:	3a227965 7d220022 54555000 63634100     ey":"."}.PUT.Acc
   d72c4:	00747065 002a2f2a                       ept.*/*.

000d72cc <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d72d4:	000d4e73 000d4e79 000d55b3 000d4e87     sN..yN...U...N..
   d72e4:	000d4e75 69726977 622e676e 5300656c     uN..wiring.ble.S
   d72f4:	74726174 73696420 65766f63 676e6972     tart discovering
   d7304:	72657320 65636976 53002e73 74726174      services..Start
   d7314:	73696420 65766f63 676e6972 61686320      discovering cha
   d7324:	74636172 73697265 73636974 6550002e     racteristics..Pe
   d7334:	64207265 63697665 73692065 73696d20     er device is mis
   d7344:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   d7354:	65707061 7020646e 20726565 746e6543     append peer Cent
   d7364:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   d7374:	65746365 79622064 6e654320 6c617274     ected by Central
   d7384:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   d7394:	65746365 79622064 6d657220 2065746f     ected by remote 
   d73a4:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   d73b4:	6e206464 70207765 20726565 69766564     dd new peer devi
   d73c4:	002e6563 2077654e 69726570 72656870     ce..New peripher
   d73d4:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   d73e4:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   d73f4:	69642064 766f6373 64657265 61686320     d discovered cha
   d7404:	74636172 73697265 2e636974 69614600     racteristic..Fai
   d7414:	2064656c 61206f74 6e657070 69642064     led to append di
   d7424:	766f6373 64657265 72657320 65636976     scovered service
   d7434:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d7444:	6c20646e 6c61636f 61686320 74636172     nd local charact
   d7454:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   d7464:	20646574 72616863 65746361 74736972     ted characterist
   d7474:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   d7484:	002e6465                                ed..

000d7488 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d7488:	5f9b34fb 80000080 00001000 00000000     .4._............

000d7498 <_ZTVN5spark13EthernetClassE>:
	...
   d74a0:	000d5a99 000d5a8f 000d5a85 000d5a7b     .Z...Z...Z..{Z..
   d74b0:	000d5a6f 000d5a63 000d5a57 000d5a4f     oZ..cZ..WZ..OZ..
   d74c0:	000d5a45 000d5a3b 000d5e41              EZ..;Z..A^..

000d74cc <_ZTV7TwoWire>:
	...
   d74d4:	000d5ab9 000d5b03 000d5adb 000d5abb     .Z...[...Z...Z..
   d74e4:	000d5ae3 000d5aeb 000d5af3 000d5afb     .Z...Z...Z...Z..

000d74f4 <_ZTV9IPAddress>:
	...
   d74fc:	000d5b4d 000d5b3d 000d5b3f 64756162     M[..=[..?[..baud
   d750c:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
   d751c:	65707974 72617000 63006d61 6900646d     type.param.cmd.i
   d752c:	6e680064 74730064 66006d72 00746c69     d.hnd.strm.filt.
   d753c:	006c766c 48646461 6c646e61 72007265     lvl.addHandler.r
   d754c:	766f6d65 6e614865 72656c64 756e6500     emoveHandler.enu
   d755c:	6e61486d 72656c64 534a0073 74534e4f     mHandlers.JSONSt
   d756c:	6d616572 48676f4c 6c646e61 61007265     reamLogHandler.a
   d757c:	25007070 75303130 205d0020 00202c00     pp.%010u .] ., .
   d758c:	203a2928 005b2000 65646f63 00203d20     (): . [.code = .
   d759c:	64006925 69617465 3d20736c 00660020     %i.details = .f.
   d75ac:	66006e6c 6f63006e 64006564 69617465     ln.fn.code.detai
   d75bc:	6f6e006c 7400656e 65636172 666e6900     l.none.trace.inf
   d75cc:	6177006f 65006e72 726f7272 6e617000     o.warn.error.pan
   d75dc:	61006369 00006c6c                       ic.all..

000d75e4 <_ZTVN5spark9MeshClassE>:
	...
   d75ec:	000d5cbb 000d5cb1 000d5ca7 000d5c9d     .\...\...\...\..
   d75fc:	000d5c91 000d5c85 000d5c79 000d5c71     .\...\..y\..q\..
   d760c:	000d5c67 000d5c5d 000d5e41              g\..]\..A^..

000d7618 <_ZTVN5spark12NetworkClassE>:
	...
   d7620:	000d5dd9 000d5de3 000d5ded 000d5df7     .]...]...]...]..
   d7630:	000d5e01 000d5e0d 000d5e19 000d5e25     .^...^...^..%^..
   d7640:	000d5e2d 000d5e37 000d5e41              -^..7^..A^..

000d764c <_ZTV8SPIClass>:
	...
   d7654:	000d6011 000d6013                       .`...`..

000d765c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7664:	000d62a1 000d62a7 000d678f 000d62b5     .b...b...g...b..
   d7674:	000d62a3                                .b..

000d7678 <_ZTV9TCPClient>:
	...
   d7680:	000d474d 000d478d 000d6219 000d6233     MG...G...b..3b..
   d7690:	000d6635 000d6387 000d6359 000d625d     5f...c..Yc..]b..
   d76a0:	000d6511 000d640d 000d63bb 000d6605     .e...d...c...f..
   d76b0:	000d625f 000d6297 000d6245 000d62b9     _b...b..Eb...b..
   d76c0:	000d6339 69726977 7200676e 20766365     9c..wiring.recv 
   d76d0:	6f727265 203d2072 5a006425 302b2500     error = %d.Z.%+0
   d76e0:	253a6433 00753230 252d5925 64252d6d     3d:%02u.%Y-%m-%d
   d76f0:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   d7700:	00656d69                                ime.

000d7704 <_ZTV11USARTSerial>:
	...
   d770c:	000d67bd 000d680d 000d681b 000d5f21     .g...h...h..!_..
   d771c:	000d67d1 000d67f3 000d67df 000d6807     .g...g...g...h..
   d772c:	000d67bf 000d67c3                       .g...g..

000d7734 <_ZTV9USBSerial>:
	...
   d773c:	000d68c5 000d6915 000d6923 000d5f21     .h...i..#i..!_..
   d774c:	000d6901 000d68c7 000d68dd 000d690f     .i...h...h...i..
   d775c:	000d68f3 000d68c1                       .h...h..

000d7764 <_ZTVN5spark9WiFiClassE>:
	...
   d776c:	000d6a2f 000d6a25 000d6a1b 000d69d1     /j..%j...j...i..
   d777c:	000d6a0f 000d6a03 000d69f7 000d69ef     .j...j...i...i..
   d778c:	000d69e5 000d69db 000d5e41              .i...i..A^..

000d7798 <_ZSt7nothrow>:
	...

000d7799 <_ctype_>:
   d7799:	20202000 20202020 28282020 20282828     .         ((((( 
   d77a9:	20202020 20202020 20202020 20202020                     
   d77b9:	10108820 10101010 10101010 10101010      ...............
   d77c9:	04040410 04040404 10040404 10101010     ................
   d77d9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d77e9:	01010101 01010101 01010101 10101010     ................
   d77f9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7809:	02020202 02020202 02020202 10101010     ................
   d7819:	00000020 00000000 00000000 00000000      ...............
	...

000d789c <__sf_fake_stdin>:
	...

000d78bc <__sf_fake_stdout>:
	...

000d78dc <__sf_fake_stderr>:
	...
   d78fc:	00000043                                         C.

000d78fe <link_const_variable_data_end>:
	...

000d7900 <link_constructors_location>:
   d7900:	000d4121 	.word	0x000d4121
   d7904:	000d46e1 	.word	0x000d46e1
   d7908:	000d4839 	.word	0x000d4839
   d790c:	000d5a01 	.word	0x000d5a01
   d7910:	000d5aa5 	.word	0x000d5aa5
   d7914:	000d5c4d 	.word	0x000d5c4d
   d7918:	000d5d89 	.word	0x000d5d89
   d791c:	000d5f0d 	.word	0x000d5f0d
   d7920:	000d5ff5 	.word	0x000d5ff5
   d7924:	000d61e5 	.word	0x000d61e5
   d7928:	000d67a9 	.word	0x000d67a9
   d792c:	000d6a39 	.word	0x000d6a39
   d7930:	000d6d21 	.word	0x000d6d21
   d7934:	000d6de5 	.word	0x000d6de5
   d7938:	000d6e69 	.word	0x000d6e69
   d793c:	000d6eed 	.word	0x000d6eed
