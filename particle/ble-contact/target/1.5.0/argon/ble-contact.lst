
/Users/nams/Documents/projects/covid/adafruit/ble_adv_covid/particle/ble-contact/target/1.5.0/argon/ble-contact.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002a14  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6a30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e2b4  000d6a34  0001e2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004d0  2003e320  2003e320  0002e320  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6aa0  000d6aa0  00026aa0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6ac8  000d6ac8  00026ac8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e2bf7  00000000  00000000  00026acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011474  00000000  00000000  001096c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001eeff  00000000  00000000  0011ab37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002938  00000000  00000000  00139a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004b88  00000000  00000000  0013c36e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003556f  00000000  00000000  00140ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002891d  00000000  00000000  00176465  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105f0c  00000000  00000000  0019ed82  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d6c0  00000000  00000000  002a4c90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f9ee 	bl	d640e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa0e 	bl	d645a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2b4 	.word	0x2003e2b4
   d4048:	000d6a34 	.word	0x000d6a34
   d404c:	2003e320 	.word	0x2003e320
   d4050:	2003e320 	.word	0x2003e320
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 ff65 	bl	d5f28 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6a30 	.word	0x000d6a30
   d4080:	000d69f8 	.word	0x000d69f8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b978 	b.w	d4378 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9a9 	bl	d43e0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bf0b 	b.w	d5eac <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc57 	b.w	d4948 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bc5d 	b.w	d4958 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bc5b 	b.w	d4958 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <sd_ble_gap_privacy_set>:
 *                                  Otherwise, the p_device_irk pointer in privacy parameter is an invalid pointer.
 * @retval ::NRF_ERROR_INVALID_PARAM Out of range parameters are provided.
 * @retval ::NRF_ERROR_INVALID_STATE Privacy settings cannot be changed while advertising, scanning
 *                                   or creating a connection.
 */
SVCALL(SD_BLE_GAP_PRIVACY_SET, uint32_t, sd_ble_gap_privacy_set(ble_gap_privacy_params_t const *p_privacy_params));
   d40b2:	df70      	svc	112	; 0x70
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z14sprintf_bufferPcPhh.part.1>:
    Serial.print(buffer);
  }
}
static char m_tx_buffer[64];

void sprintf_buffer(char *buf, uint8_t *data, uint8_t length) {
   d40b8:	3a01      	subs	r2, #1
   d40ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d40bc:	4607      	mov	r7, r0
   d40be:	1e4d      	subs	r5, r1, #1
   d40c0:	188e      	adds	r6, r1, r2
   d40c2:	2400      	movs	r4, #0
  uint8_t size = 0;
  if (length>0) {
    for (uint8_t i=0; i<length; i++) {
   d40c4:	42b5      	cmp	r5, r6
   d40c6:	d008      	beq.n	d40da <_Z14sprintf_bufferPcPhh.part.1+0x22>
      //if (i>0) size+=sprintf(m_tx_buffer+size, "-");
      size+= sprintf(buf+size, "%02x", data[i]);
   d40c8:	1938      	adds	r0, r7, r4
   d40ca:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d40ce:	4903      	ldr	r1, [pc, #12]	; (d40dc <_Z14sprintf_bufferPcPhh.part.1+0x24>)
   d40d0:	f000 fc52 	bl	d4978 <sprintf>
   d40d4:	4420      	add	r0, r4
   d40d6:	b2c4      	uxtb	r4, r0
   d40d8:	e7f4      	b.n	d40c4 <_Z14sprintf_bufferPcPhh.part.1+0xc>
   d40da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d40dc:	000d64f0 	.word	0x000d64f0

000d40e0 <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d40e0:	b40e      	push	{r1, r2, r3}
   d40e2:	b500      	push	{lr}
   d40e4:	b08c      	sub	sp, #48	; 0x30
   d40e6:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d40e8:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d40ea:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d40ee:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40f0:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d40f4:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40f6:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40f8:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d40fa:	aa04      	add	r2, sp, #16
   d40fc:	2032      	movs	r0, #50	; 0x32
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d40fe:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4100:	f000 fb96 	bl	d4830 <log_message_v>
inline void spark::Logger::error(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
    va_end(args);
}
   d4104:	b00c      	add	sp, #48	; 0x30
   d4106:	f85d eb04 	ldr.w	lr, [sp], #4
   d410a:	b003      	add	sp, #12
   d410c:	4770      	bx	lr
	...

000d4110 <_Z6serialPc>:
    { "app", LOG_LEVEL_TRACE }, // enable all app messages
});
*/
bool serial_is_off = true;
void serial(char *buffer)
{
   d4110:	b510      	push	{r4, lr}
   d4112:	4604      	mov	r4, r0
  if (digitalRead(PWR)) {  // There is power, send data to serial port
   d4114:	2022      	movs	r0, #34	; 0x22
   d4116:	f001 ff7f 	bl	d6018 <digitalRead>
   d411a:	b178      	cbz	r0, d413c <_Z6serialPc+0x2c>
    if (serial_is_off) {
   d411c:	4b08      	ldr	r3, [pc, #32]	; (d4140 <_Z6serialPc+0x30>)
   d411e:	781b      	ldrb	r3, [r3, #0]
   d4120:	b12b      	cbz	r3, d412e <_Z6serialPc+0x1e>
      Serial.begin();
   d4122:	f001 fe41 	bl	d5da8 <_Z16_fetch_usbserialv>
   d4126:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d412a:	f001 fe31 	bl	d5d90 <_ZN9USBSerial5beginEl>
    }
    Serial.print(buffer);
   d412e:	f001 fe3b 	bl	d5da8 <_Z16_fetch_usbserialv>
   d4132:	4621      	mov	r1, r4
  }
}
   d4134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  if (digitalRead(PWR)) {  // There is power, send data to serial port
    if (serial_is_off) {
      Serial.begin();
    }
    Serial.print(buffer);
   d4138:	f001 bc70 	b.w	d5a1c <_ZN5Print5printEPKc>
   d413c:	bd10      	pop	{r4, pc}
   d413e:	bf00      	nop
   d4140:	2003e2b4 	.word	0x2003e2b4

000d4144 <_Z14sprintf_bufferPcPhh>:
}
static char m_tx_buffer[64];

void sprintf_buffer(char *buf, uint8_t *data, uint8_t length) {
  uint8_t size = 0;
  if (length>0) {
   d4144:	b10a      	cbz	r2, d414a <_Z14sprintf_bufferPcPhh+0x6>
   d4146:	f7ff bfb7 	b.w	d40b8 <_Z14sprintf_bufferPcPhh.part.1>
   d414a:	4770      	bx	lr

000d414c <_Z5blinkh>:
      size+= sprintf(buf+size, "%02x", data[i]);
    }
  }
}

void blink(uint8_t times) {
   d414c:	b510      	push	{r4, lr}
   d414e:	4604      	mov	r4, r0
  while(times--) {
   d4150:	b16c      	cbz	r4, d416e <_Z5blinkh+0x22>
      digitalWrite(D7, HIGH);
   d4152:	2101      	movs	r1, #1
   d4154:	2007      	movs	r0, #7
   d4156:	f001 ff46 	bl	d5fe6 <digitalWrite>
      delay(10);
   d415a:	200a      	movs	r0, #10
   d415c:	f000 fc14 	bl	d4988 <delay>
   d4160:	3c01      	subs	r4, #1
      digitalWrite(D7, LOW);
   d4162:	2100      	movs	r1, #0
   d4164:	2007      	movs	r0, #7
   d4166:	f001 ff3e 	bl	d5fe6 <digitalWrite>
   d416a:	b2e4      	uxtb	r4, r4
    }
  }
}

void blink(uint8_t times) {
  while(times--) {
   d416c:	e7f0      	b.n	d4150 <_Z5blinkh+0x4>
   d416e:	bd10      	pop	{r4, pc}

000d4170 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv>:
      digitalWrite(D7, HIGH);
      delay(10);
      digitalWrite(D7, LOW);
  }
}
void scanResultCallback(const BleScanResult *scanResult, void *context) {
   d4170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4174:	b0c7      	sub	sp, #284	; 0x11c
   d4176:	4606      	mov	r6, r0
  BleUuid uuids[4];
   d4178:	a812      	add	r0, sp, #72	; 0x48
   d417a:	f000 fc67 	bl	d4a4c <_ZN8particle7BleUuidC1Ev>
   d417e:	a817      	add	r0, sp, #92	; 0x5c
   d4180:	f000 fc64 	bl	d4a4c <_ZN8particle7BleUuidC1Ev>
   d4184:	a81c      	add	r0, sp, #112	; 0x70
   d4186:	f000 fc61 	bl	d4a4c <_ZN8particle7BleUuidC1Ev>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
   d418a:	f106 0708 	add.w	r7, r6, #8
      delay(10);
      digitalWrite(D7, LOW);
  }
}
void scanResultCallback(const BleScanResult *scanResult, void *context) {
  BleUuid uuids[4];
   d418e:	a821      	add	r0, sp, #132	; 0x84
   d4190:	f000 fc5c 	bl	d4a4c <_ZN8particle7BleUuidC1Ev>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
   d4194:	a912      	add	r1, sp, #72	; 0x48
   d4196:	2204      	movs	r2, #4
   d4198:	4638      	mov	r0, r7
   d419a:	f000 fdb3 	bl	d4d04 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
   d419e:	4680      	mov	r8, r0
  // Print out mac info
  BleAddress addr = scanResult->address;
   d41a0:	e896 0003 	ldmia.w	r6, {r0, r1}
   d41a4:	ac08      	add	r4, sp, #32
   d41a6:	e884 0003 	stmia.w	r4, {r0, r1}
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d41aa:	2500      	movs	r5, #0
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
   d41ac:	f04f 0914 	mov.w	r9, #20
   d41b0:	f64f 5a6f 	movw	sl, #64879	; 0xfd6f
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
  // Print out mac info
  BleAddress addr = scanResult->address;
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d41b4:	4545      	cmp	r5, r8
   d41b6:	da58      	bge.n	d426a <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xfa>
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
   d41b8:	ab12      	add	r3, sp, #72	; 0x48
   d41ba:	fb09 3005 	mla	r0, r9, r5, r3
   d41be:	f000 fc82 	bl	d4ac6 <_ZNK8particle7BleUuid7shortedEv>
   d41c2:	4550      	cmp	r0, sl
   d41c4:	d14f      	bne.n	d4266 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xf6>
        blink(1);
   d41c6:	2001      	movs	r0, #1
   d41c8:	f7ff ffc0 	bl	d414c <_Z5blinkh>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41cc:	f000 fa18 	bl	d4600 <HAL_Timer_Get_Milli_Seconds>
        char buffer[128];
        lastSeen = millis();
   d41d0:	4b27      	ldr	r3, [pc, #156]	; (d4270 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x100>)
        lastRSSI = scanResult->rssi;
   d41d2:	f996 6050 	ldrsb.w	r6, [r6, #80]	; 0x50
  for(int i = 0; i < uuidsAvail; i++){
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
        blink(1);
        char buffer[128];
        lastSeen = millis();
   d41d6:	6018      	str	r0, [r3, #0]
        lastRSSI = scanResult->rssi;
   d41d8:	4b26      	ldr	r3, [pc, #152]	; (d4274 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x104>)
   d41da:	4605      	mov	r5, r0
        // Log.trace("UUID: %x", uuids[i].shorted());
        sprintf(buffer,"%ld, %d, %02X:%02X:%02X:%02X:%02X:%02X, ", 
                  lastSeen, lastRSSI, addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
   d41dc:	2105      	movs	r1, #5
   d41de:	4620      	mov	r0, r4
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
        blink(1);
        char buffer[128];
        lastSeen = millis();
        lastRSSI = scanResult->rssi;
   d41e0:	701e      	strb	r6, [r3, #0]
        // Log.trace("UUID: %x", uuids[i].shorted());
        sprintf(buffer,"%ld, %d, %02X:%02X:%02X:%02X:%02X:%02X, ", 
                  lastSeen, lastRSSI, addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
   d41e2:	f000 fc20 	bl	d4a26 <_ZNK8particle10BleAddressixEh>
   d41e6:	2104      	movs	r1, #4
   d41e8:	4680      	mov	r8, r0
   d41ea:	4620      	mov	r0, r4
   d41ec:	f000 fc1b 	bl	d4a26 <_ZNK8particle10BleAddressixEh>
   d41f0:	2103      	movs	r1, #3
   d41f2:	4681      	mov	r9, r0
   d41f4:	4620      	mov	r0, r4
   d41f6:	f000 fc16 	bl	d4a26 <_ZNK8particle10BleAddressixEh>
   d41fa:	2102      	movs	r1, #2
   d41fc:	4682      	mov	sl, r0
   d41fe:	4620      	mov	r0, r4
   d4200:	f000 fc11 	bl	d4a26 <_ZNK8particle10BleAddressixEh>
   d4204:	2101      	movs	r1, #1
   d4206:	4683      	mov	fp, r0
   d4208:	4620      	mov	r0, r4
   d420a:	f000 fc0c 	bl	d4a26 <_ZNK8particle10BleAddressixEh>
   d420e:	2100      	movs	r1, #0
   d4210:	9007      	str	r0, [sp, #28]
   d4212:	4620      	mov	r0, r4
   d4214:	f000 fc07 	bl	d4a26 <_ZNK8particle10BleAddressixEh>
   d4218:	9b07      	ldr	r3, [sp, #28]
   d421a:	4917      	ldr	r1, [pc, #92]	; (d4278 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x108>)
   d421c:	9005      	str	r0, [sp, #20]
   d421e:	462a      	mov	r2, r5
   d4220:	9304      	str	r3, [sp, #16]
   d4222:	e88d 0f00 	stmia.w	sp, {r8, r9, sl, fp}
   d4226:	4633      	mov	r3, r6
   d4228:	a826      	add	r0, sp, #152	; 0x98
   d422a:	f000 fba5 	bl	d4978 <sprintf>
        serial(buffer);
   d422e:	a826      	add	r0, sp, #152	; 0x98
   d4230:	f7ff ff6e 	bl	d4110 <_Z6serialPc>
        uint8_t recv_buffer[31];
        uint8_t len = scanResult->advertisingData.length();
   d4234:	4638      	mov	r0, r7
   d4236:	f000 fc91 	bl	d4b5c <_ZNK8particle18BleAdvertisingData6lengthEv>
        scanResult->advertisingData.get(recv_buffer, len);
   d423a:	b2c4      	uxtb	r4, r0
   d423c:	4622      	mov	r2, r4
   d423e:	a90a      	add	r1, sp, #40	; 0x28
   d4240:	4638      	mov	r0, r7
   d4242:	f000 fc7b 	bl	d4b3c <_ZNK8particle18BleAdvertisingData3getEPhj>
        sprintf_buffer(buffer, recv_buffer, len);
   d4246:	4622      	mov	r2, r4
   d4248:	a90a      	add	r1, sp, #40	; 0x28
   d424a:	a826      	add	r0, sp, #152	; 0x98
   d424c:	f7ff ff7a 	bl	d4144 <_Z14sprintf_bufferPcPhh>
        serial(buffer);
   d4250:	a826      	add	r0, sp, #152	; 0x98
   d4252:	f7ff ff5d 	bl	d4110 <_Z6serialPc>
        sprintf(buffer, "\n");
   d4256:	4909      	ldr	r1, [pc, #36]	; (d427c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x10c>)
   d4258:	a826      	add	r0, sp, #152	; 0x98
   d425a:	f002 f92f 	bl	d64bc <strcpy>
        serial(buffer);
   d425e:	a826      	add	r0, sp, #152	; 0x98
   d4260:	f7ff ff56 	bl	d4110 <_Z6serialPc>
   d4264:	e001      	b.n	d426a <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xfa>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
  // Print out mac info
  BleAddress addr = scanResult->address;
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d4266:	3501      	adds	r5, #1
   d4268:	e7a4      	b.n	d41b4 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x44>
        // BLE.stopScanning();

        return;
    }
  }
}
   d426a:	b047      	add	sp, #284	; 0x11c
   d426c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4270:	2003e338 	.word	0x2003e338
   d4274:	2003e380 	.word	0x2003e380
   d4278:	000d64f5 	.word	0x000d64f5
   d427c:	000d681c 	.word	0x000d681c

000d4280 <_Z15gap_params_initv>:

void gap_params_init() {
   d4280:	b507      	push	{r0, r1, r2, lr}
    unsigned int err_code;
    ble_gap_privacy_params_t prvt_conf;
    memset(&prvt_conf, 0, sizeof(prvt_conf));
   d4282:	2300      	movs	r3, #0
   d4284:	9300      	str	r3, [sp, #0]
   d4286:	9301      	str	r3, [sp, #4]
    prvt_conf.privacy_mode = BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY;
   d4288:	2301      	movs	r3, #1
   d428a:	f88d 3000 	strb.w	r3, [sp]
    prvt_conf.private_addr_type = BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE ;
    prvt_conf.private_addr_cycle_s = 0;
    err_code = sd_ble_gap_privacy_set(&prvt_conf);
   d428e:	4668      	mov	r0, sp
void gap_params_init() {
    unsigned int err_code;
    ble_gap_privacy_params_t prvt_conf;
    memset(&prvt_conf, 0, sizeof(prvt_conf));
    prvt_conf.privacy_mode = BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY;
    prvt_conf.private_addr_type = BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE ;
   d4290:	2303      	movs	r3, #3
   d4292:	f88d 3001 	strb.w	r3, [sp, #1]
    prvt_conf.private_addr_cycle_s = 0;
    err_code = sd_ble_gap_privacy_set(&prvt_conf);
   d4296:	f7ff ff0c 	bl	d40b2 <sd_ble_gap_privacy_set>
    if (err_code !=0) {
   d429a:	4602      	mov	r2, r0
   d429c:	b118      	cbz	r0, d42a6 <_Z15gap_params_initv+0x26>
      Log.error("Problem with gap_params_init: %d", err_code);
   d429e:	4903      	ldr	r1, [pc, #12]	; (d42ac <_Z15gap_params_initv+0x2c>)
   d42a0:	4803      	ldr	r0, [pc, #12]	; (d42b0 <_Z15gap_params_initv+0x30>)
   d42a2:	f7ff ff1d 	bl	d40e0 <_ZNK5spark6Logger5errorEPKcz>
    }
}
   d42a6:	b003      	add	sp, #12
   d42a8:	f85d fb04 	ldr.w	pc, [sp], #4
   d42ac:	000d651e 	.word	0x000d651e
   d42b0:	2003e3d8 	.word	0x2003e3d8

000d42b4 <_Z8calc_RPIPh>:
    sprintf_buffer(m_tx_buffer, m_enc_advdata, adv_len);
    // Log.info(m_tx_buffer);
    // serial(m_tx_buffer);
}

void calc_RPI(uint8_t *data) {
   d42b4:	f100 0210 	add.w	r2, r0, #16
   d42b8:	4603      	mov	r3, r0
    static uint8_t count=0;
    for(uint8_t i=0; i<16; i++) {
      data[i] = i;
   d42ba:	1a19      	subs	r1, r3, r0
   d42bc:	f803 1b01 	strb.w	r1, [r3], #1
    // serial(m_tx_buffer);
}

void calc_RPI(uint8_t *data) {
    static uint8_t count=0;
    for(uint8_t i=0; i<16; i++) {
   d42c0:	4293      	cmp	r3, r2
   d42c2:	d1fa      	bne.n	d42ba <_Z8calc_RPIPh+0x6>
      data[i] = i;
    }  
    data[15]=count++;
   d42c4:	4a02      	ldr	r2, [pc, #8]	; (d42d0 <_Z8calc_RPIPh+0x1c>)
   d42c6:	7813      	ldrb	r3, [r2, #0]
   d42c8:	73c3      	strb	r3, [r0, #15]
   d42ca:	1c59      	adds	r1, r3, #1
   d42cc:	7011      	strb	r1, [r2, #0]
   d42ce:	4770      	bx	lr
   d42d0:	2003e334 	.word	0x2003e334

000d42d4 <_Z16advertising_initv>:

NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);
*/

void advertising_init(void)
{
   d42d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    m_adv_params.p_peer_addr     = NULL;    // Undirected advertisement.
    m_adv_params.filter_policy   = BLE_GAP_ADV_FP_ANY;
    m_adv_params.interval        = NON_CONNECTABLE_ADV_INTERVAL;
    m_adv_params.duration        = 0;       // Never time out.
    */
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
   d42d6:	f000 fd9d 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42da:	2103      	movs	r1, #3
   d42dc:	f000 fdf7 	bl	d4ece <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>
    BleAddress defaultAddr = BLE.address();
   d42e0:	f000 fd98 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42e4:	4601      	mov	r1, r0
   d42e6:	4668      	mov	r0, sp
   d42e8:	f000 fdb2 	bl	d4e50 <_ZNK8particle14BleLocalDevice7addressEv>
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
   d42ec:	f000 fd92 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42f0:	4601      	mov	r1, r0
   d42f2:	a802      	add	r0, sp, #8
   d42f4:	f000 fdac 	bl	d4e50 <_ZNK8particle14BleLocalDevice7addressEv>
   d42f8:	2103      	movs	r1, #3
   d42fa:	a802      	add	r0, sp, #8
   d42fc:	f000 fb90 	bl	d4a20 <_ZN8particle10BleAddress4typeENS_14BleAddressTypeE>
    BLE.setAdvertisingTimeout(2000);
   d4300:	f000 fd88 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4304:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
   d4308:	4c18      	ldr	r4, [pc, #96]	; (d436c <_Z16advertising_initv+0x98>)
    m_adv_params.duration        = 0;       // Never time out.
    */
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
    BleAddress defaultAddr = BLE.address();
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    BLE.setAdvertisingTimeout(2000);
   d430a:	f000 fdc0 	bl	d4e8e <_ZNK8particle14BleLocalDevice21setAdvertisingTimeoutEt>
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
   d430e:	f000 fd81 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4312:	a902      	add	r1, sp, #8
   d4314:	f000 fdab 	bl	d4e6e <_ZNK8particle14BleLocalDevice7txPowerEPa>
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
   d4318:	2302      	movs	r3, #2
   d431a:	7023      	strb	r3, [r4, #0]
    m_enc_advdata[1] = 0xA;
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
   d431c:	70e3      	strb	r3, [r4, #3]
    m_enc_advdata[4] = 0x01;
   d431e:	2301      	movs	r3, #1
   d4320:	7123      	strb	r3, [r4, #4]
    m_enc_advdata[5] = 0x06;
   d4322:	2306      	movs	r3, #6
   d4324:	7163      	strb	r3, [r4, #5]
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    BLE.setAdvertisingTimeout(2000);
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
    m_enc_advdata[1] = 0xA;
   d4326:	220a      	movs	r2, #10
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
   d4328:	2303      	movs	r3, #3
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
   d432a:	2113      	movs	r1, #19
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
    BleAddress defaultAddr = BLE.address();
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    BLE.setAdvertisingTimeout(2000);
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
   d432c:	f88d 0008 	strb.w	r0, [sp, #8]
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
    m_enc_advdata[1] = 0xA;
   d4330:	7062      	strb	r2, [r4, #1]
    m_enc_advdata[2] = txPower; 
   d4332:	70a0      	strb	r0, [r4, #2]
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
   d4334:	226f      	movs	r2, #111	; 0x6f
    m_enc_advdata[1] = 0xA;
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
   d4336:	71a3      	strb	r3, [r4, #6]
    m_enc_advdata[7] = 0x03;
   d4338:	71e3      	strb	r3, [r4, #7]
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
   d433a:	72a1      	strb	r1, [r4, #10]
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
   d433c:	23fd      	movs	r3, #253	; 0xfd
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
   d433e:	2116      	movs	r1, #22
    m_enc_advdata[12] = 0x6F;
    m_enc_advdata[13] = 0xFD;
    // setup RPI
    calc_RPI(m_enc_advdata+14);
   d4340:	f104 000e 	add.w	r0, r4, #14
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
   d4344:	7263      	strb	r3, [r4, #9]
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
    m_enc_advdata[12] = 0x6F;
    m_enc_advdata[13] = 0xFD;
   d4346:	7363      	strb	r3, [r4, #13]
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
   d4348:	7222      	strb	r2, [r4, #8]
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
   d434a:	72e1      	strb	r1, [r4, #11]
    m_enc_advdata[12] = 0x6F;
   d434c:	7322      	strb	r2, [r4, #12]
    m_enc_advdata[13] = 0xFD;
    // setup RPI
    calc_RPI(m_enc_advdata+14);
   d434e:	f7ff ffb1 	bl	d42b4 <_Z8calc_RPIPh>
    size_t adv_len = 14+16;
    advData.set(m_enc_advdata, adv_len);
   d4352:	4621      	mov	r1, r4
   d4354:	221e      	movs	r2, #30
   d4356:	4806      	ldr	r0, [pc, #24]	; (d4370 <_Z16advertising_initv+0x9c>)
   d4358:	f000 fbe0 	bl	d4b1c <_ZN8particle18BleAdvertisingData3setEPKhj>
   d435c:	221e      	movs	r2, #30
   d435e:	4621      	mov	r1, r4
   d4360:	4804      	ldr	r0, [pc, #16]	; (d4374 <_Z16advertising_initv+0xa0>)
   d4362:	f7ff fea9 	bl	d40b8 <_Z14sprintf_bufferPcPhh.part.1>
    sprintf_buffer(m_tx_buffer, m_enc_advdata, adv_len);
    // Log.info(m_tx_buffer);
    // serial(m_tx_buffer);
}
   d4366:	b004      	add	sp, #16
   d4368:	bd10      	pop	{r4, pc}
   d436a:	bf00      	nop
   d436c:	2003e33c 	.word	0x2003e33c
   d4370:	2003e35c 	.word	0x2003e35c
   d4374:	2003e381 	.word	0x2003e381

000d4378 <setup>:
void setup() { Serial.begin(); pinMode(PWR, INPUT); pinMode(CHG, INPUT); } 
void loop() { float voltage = analogRead(BATT) * 0.0011224;}
*/
// setup() runs once, when the device is first turned on.

void setup() {
   d4378:	b510      	push	{r4, lr}
  pinMode(D7, OUTPUT);
   d437a:	2101      	movs	r1, #1
   d437c:	2007      	movs	r0, #7
   d437e:	f001 fe21 	bl	d5fc4 <pinMode>
  pinMode(PWR, INPUT); pinMode(CHG, INPUT);
   d4382:	2100      	movs	r1, #0
   d4384:	2022      	movs	r0, #34	; 0x22
   d4386:	f001 fe1d 	bl	d5fc4 <pinMode>
  serial_is_off = true;
   d438a:	4c13      	ldr	r4, [pc, #76]	; (d43d8 <setup+0x60>)
*/
// setup() runs once, when the device is first turned on.

void setup() {
  pinMode(D7, OUTPUT);
  pinMode(PWR, INPUT); pinMode(CHG, INPUT);
   d438c:	2023      	movs	r0, #35	; 0x23
   d438e:	2100      	movs	r1, #0
   d4390:	f001 fe18 	bl	d5fc4 <pinMode>
  serial_is_off = true;
   d4394:	2301      	movs	r3, #1
  if (digitalRead(PWR)) {  // There is power, send data to serial port
   d4396:	2022      	movs	r0, #34	; 0x22
// setup() runs once, when the device is first turned on.

void setup() {
  pinMode(D7, OUTPUT);
  pinMode(PWR, INPUT); pinMode(CHG, INPUT);
  serial_is_off = true;
   d4398:	7023      	strb	r3, [r4, #0]
  if (digitalRead(PWR)) {  // There is power, send data to serial port
   d439a:	f001 fe3d 	bl	d6018 <digitalRead>
   d439e:	b148      	cbz	r0, d43b4 <setup+0x3c>
    if (serial_is_off) {
   d43a0:	7823      	ldrb	r3, [r4, #0]
   d43a2:	b13b      	cbz	r3, d43b4 <setup+0x3c>
      Serial.begin();
   d43a4:	f001 fd00 	bl	d5da8 <_Z16_fetch_usbserialv>
   d43a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d43ac:	f001 fcf0 	bl	d5d90 <_ZN9USBSerial5beginEl>
      serial_is_off = false;
   d43b0:	2300      	movs	r3, #0
   d43b2:	7023      	strb	r3, [r4, #0]
    }    
  }
  // Serial.print("In setup\n");
  //Log.info("serial_is_off %d", serial_is_off);
  // Put initialization like pinMode and begin functions here.
  BLE.setScanTimeout(100);
   d43b4:	f000 fd2e 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43b8:	2164      	movs	r1, #100	; 0x64
   d43ba:	f000 fdef 	bl	d4f9c <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
  gap_params_init();
   d43be:	f7ff ff5f 	bl	d4280 <_Z15gap_params_initv>
  advertising_init();
   d43c2:	f7ff ff87 	bl	d42d4 <_Z16advertising_initv>
  BLE.advertise(&advData);
   d43c6:	f000 fd25 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43ca:	2200      	movs	r2, #0
   d43cc:	4903      	ldr	r1, [pc, #12]	; (d43dc <setup+0x64>)
}
   d43ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  //Log.info("serial_is_off %d", serial_is_off);
  // Put initialization like pinMode and begin functions here.
  BLE.setScanTimeout(100);
  gap_params_init();
  advertising_init();
  BLE.advertise(&advData);
   d43d2:	f000 bdc3 	b.w	d4f5c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
   d43d6:	bf00      	nop
   d43d8:	2003e2b4 	.word	0x2003e2b4
   d43dc:	2003e35c 	.word	0x2003e35c

000d43e0 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d43e0:	b510      	push	{r4, lr}
   d43e2:	b08a      	sub	sp, #40	; 0x28
   d43e4:	f000 f90c 	bl	d4600 <HAL_Timer_Get_Milli_Seconds>
  /*
  if (digitalRead(PWR)==0) {
    serial_is_off = true;
  }
  */
 if( (millis() > lastSeen + RE_CHECK_MS) ){
   d43e8:	4b0f      	ldr	r3, [pc, #60]	; (d4428 <loop+0x48>)
   d43ea:	681b      	ldr	r3, [r3, #0]
   d43ec:	3364      	adds	r3, #100	; 0x64
   d43ee:	4283      	cmp	r3, r0
   d43f0:	d205      	bcs.n	d43fe <loop+0x1e>
      BLE.scan(scanResultCallback, NULL);
   d43f2:	f000 fd0f 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43f6:	2200      	movs	r2, #0
   d43f8:	490c      	ldr	r1, [pc, #48]	; (d442c <loop+0x4c>)
   d43fa:	f000 fded 	bl	d4fd8 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>
  }
  //Log.info("isadvertising: %d", BLE.advertising());
  if (not BLE.advertising()) {
   d43fe:	f000 fd09 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4402:	f000 fdc8 	bl	d4f96 <_ZNK8particle14BleLocalDevice11advertisingEv>
   d4406:	4604      	mov	r4, r0
   d4408:	b948      	cbnz	r0, d441e <loop+0x3e>
      // Log.info("Check if MAC changed.");
      // Indicate MAC changing 
      gap_params_init();
   d440a:	f7ff ff39 	bl	d4280 <_Z15gap_params_initv>
      advertising_init();
   d440e:	f7ff ff61 	bl	d42d4 <_Z16advertising_initv>
      BLE.advertise(&advData);
   d4412:	f000 fcff 	bl	d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4416:	4622      	mov	r2, r4
   d4418:	4905      	ldr	r1, [pc, #20]	; (d4430 <loop+0x50>)
   d441a:	f000 fd9f 	bl	d4f5c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  }
  BleAdvertisingData tempdata;
   d441e:	a801      	add	r0, sp, #4
   d4420:	f000 fbfd 	bl	d4c1e <_ZN8particle18BleAdvertisingDataC1Ev>
  //Log.info("advertise size: %d ", BLE.getAdvertisingData(&tempdata));
}
   d4424:	b00a      	add	sp, #40	; 0x28
   d4426:	bd10      	pop	{r4, pc}
   d4428:	2003e338 	.word	0x2003e338
   d442c:	000d4171 	.word	0x000d4171
   d4430:	2003e35c 	.word	0x2003e35c

000d4434 <_GLOBAL__sub_I_advData>:
   d4434:	b510      	push	{r4, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4436:	f000 f8eb 	bl	d4610 <HAL_Pin_Map>
// Stores the most recent data related to the device we're looking for
int8_t lastRSSI;
system_tick_t lastSeen = 0;

// The payload going to the cloud
String status;
   d443a:	4c09      	ldr	r4, [pc, #36]	; (d4460 <_GLOBAL__sub_I_advData+0x2c>)
 * Date:  April 20, 2020
 */
#include "Particle.h"
#include "config.h"

BleAdvertisingData advData;
   d443c:	4809      	ldr	r0, [pc, #36]	; (d4464 <_GLOBAL__sub_I_advData+0x30>)
   d443e:	f000 fbee 	bl	d4c1e <_ZN8particle18BleAdvertisingDataC1Ev>

// For debugging only
// SYSTEM_MODE(MANUAL);

// Enable thread
SYSTEM_THREAD(ENABLED);
   d4442:	2100      	movs	r1, #0
   d4444:	2001      	movs	r0, #1
   d4446:	f000 fa0b 	bl	d4860 <system_thread_set_state>
// Stores the most recent data related to the device we're looking for
int8_t lastRSSI;
system_tick_t lastSeen = 0;

// The payload going to the cloud
String status;
   d444a:	4907      	ldr	r1, [pc, #28]	; (d4468 <_GLOBAL__sub_I_advData+0x34>)
   d444c:	4620      	mov	r0, r4
   d444e:	f001 fb81 	bl	d5b54 <_ZN6StringC1EPK19__FlashStringHelper>
   d4452:	4620      	mov	r0, r4
   d4454:	4a05      	ldr	r2, [pc, #20]	; (d446c <_GLOBAL__sub_I_advData+0x38>)
   d4456:	4906      	ldr	r1, [pc, #24]	; (d4470 <_GLOBAL__sub_I_advData+0x3c>)
      advertising_init();
      BLE.advertise(&advData);
  }
  BleAdvertisingData tempdata;
  //Log.info("advertise size: %d ", BLE.getAdvertisingData(&tempdata));
}
   d4458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Stores the most recent data related to the device we're looking for
int8_t lastRSSI;
system_tick_t lastSeen = 0;

// The payload going to the cloud
String status;
   d445c:	f001 be50 	b.w	d6100 <__aeabi_atexit>
   d4460:	2003e324 	.word	0x2003e324
   d4464:	2003e35c 	.word	0x2003e35c
   d4468:	000d681d 	.word	0x000d681d
   d446c:	2003e320 	.word	0x2003e320
   d4470:	000d5ac7 	.word	0x000d5ac7

000d4474 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <hal_ble_stack_init+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	689b      	ldr	r3, [r3, #8]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030278 	.word	0x00030278

000d4484 <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <hal_ble_gap_get_device_address+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	69db      	ldr	r3, [r3, #28]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030278 	.word	0x00030278

000d4494 <hal_ble_gap_get_tx_power>:
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <hal_ble_gap_get_tx_power+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030278 	.word	0x00030278

000d44a4 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <hal_ble_gap_set_advertising_parameters+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030278 	.word	0x00030278

000d44b4 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <hal_ble_gap_get_advertising_parameters+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030278 	.word	0x00030278

000d44c4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <hal_ble_gap_set_advertising_data+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030278 	.word	0x00030278

000d44d4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <hal_ble_gap_set_scan_response_data+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030278 	.word	0x00030278

000d44e4 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <hal_ble_gap_start_advertising+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030278 	.word	0x00030278

000d44f4 <hal_ble_gap_is_advertising>:
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <hal_ble_gap_is_advertising+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030278 	.word	0x00030278

000d4504 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <hal_ble_gap_set_scan_parameters+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030278 	.word	0x00030278

000d4514 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <hal_ble_gap_get_scan_parameters+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030278 	.word	0x00030278

000d4524 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <hal_ble_gap_start_scan+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030278 	.word	0x00030278

000d4534 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b03      	ldr	r3, [pc, #12]	; (d4544 <hal_ble_gap_stop_scan+0x10>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d453e:	9301      	str	r3, [sp, #4]
   d4540:	bd08      	pop	{r3, pc}
   d4542:	0000      	.short	0x0000
   d4544:	00030278 	.word	0x00030278

000d4548 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b03      	ldr	r3, [pc, #12]	; (d4558 <hal_ble_gap_disconnect+0x10>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4552:	9301      	str	r3, [sp, #4]
   d4554:	bd08      	pop	{r3, pc}
   d4556:	0000      	.short	0x0000
   d4558:	00030278 	.word	0x00030278

000d455c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b03      	ldr	r3, [pc, #12]	; (d456c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4566:	9301      	str	r3, [sp, #4]
   d4568:	bd08      	pop	{r3, pc}
   d456a:	0000      	.short	0x0000
   d456c:	00030278 	.word	0x00030278

000d4570 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <os_thread_is_current+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	689b      	ldr	r3, [r3, #8]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030248 	.word	0x00030248

000d4580 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <os_thread_join+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	691b      	ldr	r3, [r3, #16]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030248 	.word	0x00030248

000d4590 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <os_thread_cleanup+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	695b      	ldr	r3, [r3, #20]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030248 	.word	0x00030248

000d45a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <os_mutex_recursive_create+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030248 	.word	0x00030248

000d45b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <os_mutex_recursive_destroy+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030248 	.word	0x00030248

000d45c0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <os_mutex_recursive_lock+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030248 	.word	0x00030248

000d45d0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <os_mutex_recursive_unlock+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030248 	.word	0x00030248

000d45e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_RNG_GetRandomNumber+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	685b      	ldr	r3, [r3, #4]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030218 	.word	0x00030218

000d45f0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_Delay_Microseconds+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	68db      	ldr	r3, [r3, #12]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030218 	.word	0x00030218

000d4600 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	695b      	ldr	r3, [r3, #20]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030218 	.word	0x00030218

000d4610 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_Pin_Map+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	681b      	ldr	r3, [r3, #0]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	0003022c 	.word	0x0003022c

000d4620 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <HAL_Pin_Mode+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	689b      	ldr	r3, [r3, #8]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	0003022c 	.word	0x0003022c

000d4630 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <HAL_Get_Pin_Mode+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	68db      	ldr	r3, [r3, #12]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	0003022c 	.word	0x0003022c

000d4640 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <HAL_GPIO_Write+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	691b      	ldr	r3, [r3, #16]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	0003022c 	.word	0x0003022c

000d4650 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <HAL_GPIO_Read+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	695b      	ldr	r3, [r3, #20]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	0003022c 	.word	0x0003022c

000d4660 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <HAL_I2C_Write_Data+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6a1b      	ldr	r3, [r3, #32]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030228 	.word	0x00030228

000d4670 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <HAL_I2C_Available_Data+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030228 	.word	0x00030228

000d4680 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <HAL_I2C_Read_Data+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030228 	.word	0x00030228

000d4690 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <HAL_I2C_Peek_Data+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030228 	.word	0x00030228

000d46a0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <HAL_I2C_Flush_Data+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030228 	.word	0x00030228

000d46b0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <HAL_I2C_Is_Enabled+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030228 	.word	0x00030228

000d46c0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <HAL_I2C_Init+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030228 	.word	0x00030228

000d46d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <inet_inet_ntop+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	695b      	ldr	r3, [r3, #20]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030264 	.word	0x00030264

000d46e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <netdb_freeaddrinfo+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	689b      	ldr	r3, [r3, #8]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	00030268 	.word	0x00030268

000d46f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <netdb_getaddrinfo+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	68db      	ldr	r3, [r3, #12]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030268 	.word	0x00030268

000d4700 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_SPI_Init+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	69db      	ldr	r3, [r3, #28]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030230 	.word	0x00030230

000d4710 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_SPI_Is_Enabled+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	6a1b      	ldr	r3, [r3, #32]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030230 	.word	0x00030230

000d4720 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_USART_Init+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	681b      	ldr	r3, [r3, #0]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003023c 	.word	0x0003023c

000d4730 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_USART_Write_Data+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	68db      	ldr	r3, [r3, #12]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003023c 	.word	0x0003023c

000d4740 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_USART_Available_Data+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	691b      	ldr	r3, [r3, #16]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	0003023c 	.word	0x0003023c

000d4750 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_USART_Read_Data+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	695b      	ldr	r3, [r3, #20]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	0003023c 	.word	0x0003023c

000d4760 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_USART_Peek_Data+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	699b      	ldr	r3, [r3, #24]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	0003023c 	.word	0x0003023c

000d4770 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_USART_Flush_Data+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	69db      	ldr	r3, [r3, #28]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	0003023c 	.word	0x0003023c

000d4780 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_USART_Is_Enabled+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6a1b      	ldr	r3, [r3, #32]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	0003023c 	.word	0x0003023c

000d4790 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_USART_Available_Data_For_Write+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	0003023c 	.word	0x0003023c

000d47a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_USB_USART_Init+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	681b      	ldr	r3, [r3, #0]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	0003024c 	.word	0x0003024c

000d47b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_USB_USART_Begin+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	685b      	ldr	r3, [r3, #4]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	0003024c 	.word	0x0003024c

000d47c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_USB_USART_Available_Data+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	691b      	ldr	r3, [r3, #16]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003024c 	.word	0x0003024c

000d47d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	695b      	ldr	r3, [r3, #20]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	0003024c 	.word	0x0003024c

000d47e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <HAL_USB_USART_Receive_Data+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	699b      	ldr	r3, [r3, #24]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003024c 	.word	0x0003024c

000d47f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <HAL_USB_USART_Send_Data+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	69db      	ldr	r3, [r3, #28]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003024c 	.word	0x0003024c

000d4800 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <HAL_USB_USART_Flush_Data+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	6a1b      	ldr	r3, [r3, #32]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003024c 	.word	0x0003024c

000d4810 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <panic_+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030260 	.word	0x00030260

000d4820 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <log_message+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030260 	.word	0x00030260

000d4830 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <log_message_v+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030260 	.word	0x00030260

000d4840 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <set_system_mode+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	685b      	ldr	r3, [r3, #4]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030220 	.word	0x00030220

000d4850 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <system_delay_ms+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	695b      	ldr	r3, [r3, #20]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030220 	.word	0x00030220

000d4860 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <system_thread_set_state+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030220 	.word	0x00030220

000d4870 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b03      	ldr	r3, [pc, #12]	; (d4880 <system_ctrl_set_app_request_handler+0x10>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d487a:	9301      	str	r3, [sp, #4]
   d487c:	bd08      	pop	{r3, pc}
   d487e:	0000      	.short	0x0000
   d4880:	00030220 	.word	0x00030220

000d4884 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b03      	ldr	r3, [pc, #12]	; (d4894 <system_ctrl_set_result+0x10>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d488e:	9301      	str	r3, [sp, #4]
   d4890:	bd08      	pop	{r3, pc}
   d4892:	0000      	.short	0x0000
   d4894:	00030220 	.word	0x00030220

000d4898 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030244 	.word	0x00030244

000d48a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <network_connect+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	685b      	ldr	r3, [r3, #4]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030240 	.word	0x00030240

000d48b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <network_connecting+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	689b      	ldr	r3, [r3, #8]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030240 	.word	0x00030240

000d48c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <network_disconnect+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	68db      	ldr	r3, [r3, #12]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030240 	.word	0x00030240

000d48d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <network_ready+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	691b      	ldr	r3, [r3, #16]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030240 	.word	0x00030240

000d48e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <network_on+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	695b      	ldr	r3, [r3, #20]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030240 	.word	0x00030240

000d48f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <network_off+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	699b      	ldr	r3, [r3, #24]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030240 	.word	0x00030240

000d4908 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <network_listen+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	69db      	ldr	r3, [r3, #28]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030240 	.word	0x00030240

000d4918 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <network_listening+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6a1b      	ldr	r3, [r3, #32]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030240 	.word	0x00030240

000d4928 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <network_set_listen_timeout+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030240 	.word	0x00030240

000d4938 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <network_get_listen_timeout+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030240 	.word	0x00030240

000d4948 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <malloc+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	681b      	ldr	r3, [r3, #0]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	0003021c 	.word	0x0003021c

000d4958 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <free+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	685b      	ldr	r3, [r3, #4]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	0003021c 	.word	0x0003021c

000d4968 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <realloc+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	689b      	ldr	r3, [r3, #8]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	0003021c 	.word	0x0003021c

000d4978 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <sprintf+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	68db      	ldr	r3, [r3, #12]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003021c 	.word	0x0003021c

000d4988 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4988:	2100      	movs	r1, #0
   d498a:	f7ff bf61 	b.w	d4850 <system_delay_ms>

000d498e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d498e:	4770      	bx	lr

000d4990 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4990:	2000      	movs	r0, #0
   d4992:	4770      	bx	lr

000d4994 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4994:	b510      	push	{r4, lr}
   d4996:	2114      	movs	r1, #20
   d4998:	4604      	mov	r4, r0
   d499a:	f001 fbb6 	bl	d610a <_ZdlPvj>
   d499e:	4620      	mov	r0, r4
   d49a0:	bd10      	pop	{r4, pc}

000d49a2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d49a2:	f7ff bb7a 	b.w	d409a <_ZdlPv>

000d49a6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d49a6:	b510      	push	{r4, lr}
   d49a8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d49aa:	6800      	ldr	r0, [r0, #0]
   d49ac:	b108      	cbz	r0, d49b2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d49ae:	f7ff fdff 	bl	d45b0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d49b2:	4620      	mov	r0, r4
   d49b4:	bd10      	pop	{r4, pc}
	...

000d49b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d49b8:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d49ba:	200a      	movs	r0, #10
   d49bc:	4a02      	ldr	r2, [pc, #8]	; (d49c8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d49be:	2100      	movs	r1, #0
   d49c0:	f7ff ff26 	bl	d4810 <panic_>
    }
}
   d49c4:	bd08      	pop	{r3, pc}
   d49c6:	bf00      	nop
   d49c8:	000d45f1 	.word	0x000d45f1

000d49cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d49cc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d49ce:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d49d0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d49d2:	689b      	ldr	r3, [r3, #8]
   d49d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d49d6:	68a3      	ldr	r3, [r4, #8]
   d49d8:	3b01      	subs	r3, #1
   d49da:	60a3      	str	r3, [r4, #8]
   d49dc:	b92b      	cbnz	r3, d49ea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d49de:	6823      	ldr	r3, [r4, #0]
   d49e0:	4620      	mov	r0, r4
   d49e2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d49e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d49e8:	4718      	bx	r3
   d49ea:	bd10      	pop	{r4, pc}

000d49ec <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d49ec:	b510      	push	{r4, lr}
            locked_(false) {
   d49ee:	2300      	movs	r3, #0
   d49f0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d49f2:	4b04      	ldr	r3, [pc, #16]	; (d4a04 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d49f4:	4604      	mov	r4, r0
   d49f6:	6818      	ldr	r0, [r3, #0]
   d49f8:	f7ff fde2 	bl	d45c0 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d49fc:	2301      	movs	r3, #1
   d49fe:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4a00:	4620      	mov	r0, r4
   d4a02:	bd10      	pop	{r4, pc}
   d4a04:	2003e3cc 	.word	0x2003e3cc

000d4a08 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4a08:	b510      	push	{r4, lr}
        if (locked_) {
   d4a0a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4a0c:	4604      	mov	r4, r0
        if (locked_) {
   d4a0e:	b11b      	cbz	r3, d4a18 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4a10:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4a12:	6818      	ldr	r0, [r3, #0]
   d4a14:	f7ff fddc 	bl	d45d0 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4a18:	4620      	mov	r0, r4
   d4a1a:	bd10      	pop	{r4, pc}
   d4a1c:	2003e3cc 	.word	0x2003e3cc

000d4a20 <_ZN8particle10BleAddress4typeENS_14BleAddressTypeE>:
BleAddress::BleAddress(const String& address, BleAddressType type) {
    set(address, type);
}

int BleAddress::type(BleAddressType type) {
    address_.addr_type = static_cast<ble_sig_addr_type_t>(type);
   d4a20:	7181      	strb	r1, [r0, #6]
    return SYSTEM_ERROR_NONE;
}
   d4a22:	2000      	movs	r0, #0
   d4a24:	4770      	bx	lr

000d4a26 <_ZNK8particle10BleAddressixEh>:
    buf[len++] = '\0';
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
   d4a26:	2905      	cmp	r1, #5
        return 0;
    }
    return address_.addr[i];
   d4a28:	bf94      	ite	ls
   d4a2a:	5c40      	ldrbls	r0, [r0, r1]
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
        return 0;
   d4a2c:	2000      	movhi	r0, #0
    }
    return address_.addr[i];
}
   d4a2e:	4770      	bx	lr

000d4a30 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4a30:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4a32:	7982      	ldrb	r2, [r0, #6]
   d4a34:	798b      	ldrb	r3, [r1, #6]
   d4a36:	429a      	cmp	r2, r3
   d4a38:	d106      	bne.n	d4a48 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4a3a:	2206      	movs	r2, #6
   d4a3c:	f001 fcd8 	bl	d63f0 <memcmp>
   d4a40:	fab0 f080 	clz	r0, r0
   d4a44:	0940      	lsrs	r0, r0, #5
   d4a46:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4a48:	2000      	movs	r0, #0
}
   d4a4a:	bd08      	pop	{r3, pc}

000d4a4c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4a4c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d4a4e:	2301      	movs	r3, #1
   d4a50:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4a52:	4b05      	ldr	r3, [pc, #20]	; (d4a68 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4a54:	4602      	mov	r2, r0
   d4a56:	f103 0110 	add.w	r1, r3, #16
   d4a5a:	f853 4b04 	ldr.w	r4, [r3], #4
   d4a5e:	f842 4b04 	str.w	r4, [r2], #4
   d4a62:	428b      	cmp	r3, r1
   d4a64:	d1f9      	bne.n	d4a5a <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4a66:	bd10      	pop	{r4, pc}
   d4a68:	000d66fc 	.word	0x000d66fc

000d4a6c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4a6c:	b510      	push	{r4, lr}
    if (uuid128) {
   d4a6e:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4a70:	4604      	mov	r4, r0
    if (uuid128) {
   d4a72:	b1b9      	cbz	r1, d4aa4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d4a74:	2a01      	cmp	r2, #1
   d4a76:	d109      	bne.n	d4a8c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4a78:	4603      	mov	r3, r0
   d4a7a:	f101 0210 	add.w	r2, r1, #16
   d4a7e:	f851 0b04 	ldr.w	r0, [r1], #4
   d4a82:	f843 0b04 	str.w	r0, [r3], #4
   d4a86:	4291      	cmp	r1, r2
   d4a88:	d1f9      	bne.n	d4a7e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d4a8a:	e008      	b.n	d4a9e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d4a8c:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d4a8e:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d4a90:	5c98      	ldrb	r0, [r3, r2]
   d4a92:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4a96:	3a01      	subs	r2, #1
   d4a98:	b2d2      	uxtb	r2, r2
   d4a9a:	2aff      	cmp	r2, #255	; 0xff
   d4a9c:	d1f8      	bne.n	d4a90 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d4a9e:	2301      	movs	r3, #1
   d4aa0:	6123      	str	r3, [r4, #16]
   d4aa2:	e002      	b.n	d4aaa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4aa4:	2210      	movs	r2, #16
   d4aa6:	f001 fcd8 	bl	d645a <memset>
    }
}
   d4aaa:	4620      	mov	r0, r4
   d4aac:	bd10      	pop	{r4, pc}

000d4aae <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d4aae:	b538      	push	{r3, r4, r5, lr}
   d4ab0:	4604      	mov	r4, r0
   d4ab2:	460d      	mov	r5, r1
        : BleUuid() {
   d4ab4:	f7ff ffca 	bl	d4a4c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d4ab8:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4aba:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4abc:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d4abe:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4ac0:	7365      	strb	r5, [r4, #13]
}
   d4ac2:	4620      	mov	r0, r4
   d4ac4:	bd38      	pop	{r3, r4, r5, pc}

000d4ac6 <_ZNK8particle7BleUuid7shortedEv>:
    }
    return uuid;
}

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4ac6:	7b42      	ldrb	r2, [r0, #13]
   d4ac8:	7b00      	ldrb	r0, [r0, #12]
}
   d4aca:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4ace:	4770      	bx	lr

000d4ad0 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4ad0:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4ad2:	690b      	ldr	r3, [r1, #16]
   d4ad4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4ad6:	f101 0210 	add.w	r2, r1, #16
   d4ada:	4603      	mov	r3, r0
   d4adc:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ae0:	f843 4b04 	str.w	r4, [r3], #4
   d4ae4:	4291      	cmp	r1, r2
   d4ae6:	d1f9      	bne.n	d4adc <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d4ae8:	bd10      	pop	{r4, pc}

000d4aea <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4aea:	b510      	push	{r4, lr}
   d4aec:	b086      	sub	sp, #24
   d4aee:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4af0:	2201      	movs	r2, #1
   d4af2:	a801      	add	r0, sp, #4
   d4af4:	f7ff ffba 	bl	d4a6c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4af8:	a901      	add	r1, sp, #4
   d4afa:	4620      	mov	r0, r4
   d4afc:	f7ff ffe8 	bl	d4ad0 <_ZN8particle7BleUuidaSERKS0_>
}
   d4b00:	b006      	add	sp, #24
   d4b02:	bd10      	pop	{r4, pc}

000d4b04 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d4b04:	b510      	push	{r4, lr}
   d4b06:	b086      	sub	sp, #24
   d4b08:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d4b0a:	a801      	add	r0, sp, #4
   d4b0c:	f7ff ffcf 	bl	d4aae <_ZN8particle7BleUuidC1Et>
   d4b10:	a901      	add	r1, sp, #4
   d4b12:	4620      	mov	r0, r4
   d4b14:	f7ff ffdc 	bl	d4ad0 <_ZN8particle7BleUuidaSERKS0_>
}
   d4b18:	b006      	add	sp, #24
   d4b1a:	bd10      	pop	{r4, pc}

000d4b1c <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d4b1c:	b538      	push	{r3, r4, r5, lr}
   d4b1e:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d4b20:	b101      	cbz	r1, d4b24 <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d4b22:	b912      	cbnz	r2, d4b2a <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d4b24:	2000      	movs	r0, #0
   d4b26:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d4b28:	bd38      	pop	{r3, r4, r5, pc}
   d4b2a:	2a1f      	cmp	r2, #31
   d4b2c:	bf28      	it	cs
   d4b2e:	221f      	movcs	r2, #31
   d4b30:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d4b32:	f001 fc6c 	bl	d640e <memcpy>
    selfLen_ = len;
   d4b36:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d4b38:	4620      	mov	r0, r4
}
   d4b3a:	bd38      	pop	{r3, r4, r5, pc}

000d4b3c <_ZNK8particle18BleAdvertisingData3getEPhj>:
        // Recursively remove duplicated type.
        remove(type);
    }
}

size_t BleAdvertisingData::get(uint8_t* buf, size_t len) const {
   d4b3c:	b538      	push	{r3, r4, r5, lr}
   d4b3e:	4605      	mov	r5, r0
    if (buf != nullptr) {
   d4b40:	4608      	mov	r0, r1
   d4b42:	b149      	cbz	r1, d4b58 <_ZNK8particle18BleAdvertisingData3getEPhj+0x1c>
   d4b44:	6a2b      	ldr	r3, [r5, #32]
   d4b46:	429a      	cmp	r2, r3
   d4b48:	bf28      	it	cs
   d4b4a:	461a      	movcs	r2, r3
   d4b4c:	4614      	mov	r4, r2
        len = std::min(len, selfLen_);
        memcpy(buf, selfData_, len);
   d4b4e:	4629      	mov	r1, r5
   d4b50:	f001 fc5d 	bl	d640e <memcpy>
        return len;
   d4b54:	4620      	mov	r0, r4
   d4b56:	bd38      	pop	{r3, r4, r5, pc}
    }
    return selfLen_;
   d4b58:	6a28      	ldr	r0, [r5, #32]
}
   d4b5a:	bd38      	pop	{r3, r4, r5, pc}

000d4b5c <_ZNK8particle18BleAdvertisingData6lengthEv>:
    return selfData_;
}

size_t BleAdvertisingData::length() const {
    return selfLen_;
}
   d4b5c:	6a00      	ldr	r0, [r0, #32]
   d4b5e:	4770      	bx	lr

000d4b60 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4b62:	b18b      	cbz	r3, d4b88 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4b64:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4b66:	1ce5      	adds	r5, r4, #3
   d4b68:	428d      	cmp	r5, r1
   d4b6a:	d80f      	bhi.n	d4b8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4b6c:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4b6e:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4b70:	5d87      	ldrb	r7, [r0, r6]
   d4b72:	4297      	cmp	r7, r2
   d4b74:	d105      	bne.n	d4b82 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4b76:	442e      	add	r6, r5
   d4b78:	42b1      	cmp	r1, r6
   d4b7a:	d307      	bcc.n	d4b8c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4b7c:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4b7e:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4b82:	3501      	adds	r5, #1
   d4b84:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4b86:	e7ee      	b.n	d4b66 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4b88:	4618      	mov	r0, r3
   d4b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b8c:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b90 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4b94:	4604      	mov	r4, r0
   d4b96:	460e      	mov	r6, r1
   d4b98:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4b9a:	4617      	mov	r7, r2
   d4b9c:	2a00      	cmp	r2, #0
   d4b9e:	d03a      	beq.n	d4c16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4ba0:	460a      	mov	r2, r1
   d4ba2:	ab01      	add	r3, sp, #4
   d4ba4:	6a01      	ldr	r1, [r0, #32]
   d4ba6:	f7ff ffdb 	bl	d4b60 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4baa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4bae:	6a22      	ldr	r2, [r4, #32]
   d4bb0:	bb03      	cbnz	r3, d4bf4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4bb2:	b1f8      	cbz	r0, d4bf4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4bb4:	1c96      	adds	r6, r2, #2
   d4bb6:	442e      	add	r6, r5
   d4bb8:	1a36      	subs	r6, r6, r0
   d4bba:	2e1f      	cmp	r6, #31
   d4bbc:	d82b      	bhi.n	d4c16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4bbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4bc2:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4bc6:	ebc8 0202 	rsb	r2, r8, r2
   d4bca:	1a12      	subs	r2, r2, r0
   d4bcc:	eb00 0108 	add.w	r1, r0, r8
   d4bd0:	eb05 0009 	add.w	r0, r5, r9
   d4bd4:	b292      	uxth	r2, r2
   d4bd6:	4421      	add	r1, r4
   d4bd8:	4420      	add	r0, r4
   d4bda:	f001 fc23 	bl	d6424 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4bde:	1c6b      	adds	r3, r5, #1
   d4be0:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4be4:	462a      	mov	r2, r5
   d4be6:	4639      	mov	r1, r7
   d4be8:	eb04 0009 	add.w	r0, r4, r9
   d4bec:	f001 fc0f 	bl	d640e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4bf0:	6226      	str	r6, [r4, #32]
   d4bf2:	e010      	b.n	d4c16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4bf4:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4bf6:	182b      	adds	r3, r5, r0
   d4bf8:	2b1f      	cmp	r3, #31
   d4bfa:	d80c      	bhi.n	d4c16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4bfc:	1c6b      	adds	r3, r5, #1
   d4bfe:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4c00:	4422      	add	r2, r4
   d4c02:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4c04:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4c06:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4c08:	4420      	add	r0, r4
   d4c0a:	462a      	mov	r2, r5
   d4c0c:	f001 fbff 	bl	d640e <memcpy>
        selfLen_ += len;
   d4c10:	6a22      	ldr	r2, [r4, #32]
   d4c12:	442a      	add	r2, r5
   d4c14:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4c16:	6a20      	ldr	r0, [r4, #32]
}
   d4c18:	b003      	add	sp, #12
   d4c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4c1e <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4c1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4c20:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4c22:	4603      	mov	r3, r0
   d4c24:	f100 021f 	add.w	r2, r0, #31
   d4c28:	2000      	movs	r0, #0
   d4c2a:	f803 0b01 	strb.w	r0, [r3], #1
   d4c2e:	4293      	cmp	r3, r2
   d4c30:	f04f 0100 	mov.w	r1, #0
   d4c34:	d1f9      	bne.n	d4c2a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4c36:	aa04      	add	r2, sp, #16
   d4c38:	2306      	movs	r3, #6
   d4c3a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4c3e:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4c40:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4c42:	9100      	str	r1, [sp, #0]
   d4c44:	4620      	mov	r0, r4
   d4c46:	4619      	mov	r1, r3
   d4c48:	f7ff ffa2 	bl	d4b90 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4c4c:	4620      	mov	r0, r4
   d4c4e:	b004      	add	sp, #16
   d4c50:	bd10      	pop	{r4, pc}

000d4c52 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4c54:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4c56:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4c58:	ab01      	add	r3, sp, #4
   d4c5a:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4c5c:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4c5e:	f7ff ff7f 	bl	d4b60 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4c62:	4605      	mov	r5, r0
   d4c64:	b178      	cbz	r0, d4c86 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4c66:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4c68:	6a22      	ldr	r2, [r4, #32]
   d4c6a:	1829      	adds	r1, r5, r0
   d4c6c:	1a12      	subs	r2, r2, r0
   d4c6e:	1b52      	subs	r2, r2, r5
   d4c70:	4421      	add	r1, r4
   d4c72:	4420      	add	r0, r4
   d4c74:	f001 fbcb 	bl	d640e <memcpy>
        selfLen_ -= len;
   d4c78:	6a23      	ldr	r3, [r4, #32]
   d4c7a:	1b5d      	subs	r5, r3, r5
   d4c7c:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4c7e:	4631      	mov	r1, r6
   d4c80:	4620      	mov	r0, r4
   d4c82:	f7ff ffe6 	bl	d4c52 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4c86:	b002      	add	sp, #8
   d4c88:	bd70      	pop	{r4, r5, r6, pc}

000d4c8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d4c8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4c8e:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d4c90:	b085      	sub	sp, #20
   d4c92:	4606      	mov	r6, r0
   d4c94:	4689      	mov	r9, r1
   d4c96:	4617      	mov	r7, r2
   d4c98:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d4c9a:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d4c9c:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4ca0:	6a31      	ldr	r1, [r6, #32]
   d4ca2:	428d      	cmp	r5, r1
   d4ca4:	d22a      	bcs.n	d4cfc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d4ca6:	ab03      	add	r3, sp, #12
   d4ca8:	464a      	mov	r2, r9
   d4caa:	1b49      	subs	r1, r1, r5
   d4cac:	1970      	adds	r0, r6, r5
   d4cae:	f7ff ff57 	bl	d4b60 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d4cb2:	4683      	mov	fp, r0
   d4cb4:	b310      	cbz	r0, d4cfc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d4cb6:	4554      	cmp	r4, sl
   d4cb8:	d220      	bcs.n	d4cfc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d4cba:	2804      	cmp	r0, #4
   d4cbc:	9903      	ldr	r1, [sp, #12]
   d4cbe:	d10c      	bne.n	d4cda <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d4cc0:	4429      	add	r1, r5
   d4cc2:	1872      	adds	r2, r6, r1
   d4cc4:	1c63      	adds	r3, r4, #1
   d4cc6:	78d1      	ldrb	r1, [r2, #3]
   d4cc8:	7892      	ldrb	r2, [r2, #2]
   d4cca:	9301      	str	r3, [sp, #4]
   d4ccc:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d4cd0:	fb08 7004 	mla	r0, r8, r4, r7
   d4cd4:	f7ff ff16 	bl	d4b04 <_ZN8particle7BleUuidaSEt>
   d4cd8:	e00a      	b.n	d4cf0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d4cda:	2812      	cmp	r0, #18
   d4cdc:	d10a      	bne.n	d4cf4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d4cde:	3102      	adds	r1, #2
   d4ce0:	4429      	add	r1, r5
   d4ce2:	1c63      	adds	r3, r4, #1
   d4ce4:	4431      	add	r1, r6
   d4ce6:	fb08 7004 	mla	r0, r8, r4, r7
   d4cea:	9301      	str	r3, [sp, #4]
   d4cec:	f7ff fefd 	bl	d4aea <_ZN8particle7BleUuidaSEPKh>
   d4cf0:	9b01      	ldr	r3, [sp, #4]
   d4cf2:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4cf4:	9b03      	ldr	r3, [sp, #12]
   d4cf6:	445b      	add	r3, fp
   d4cf8:	441d      	add	r5, r3
   d4cfa:	e7d1      	b.n	d4ca0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	b005      	add	sp, #20
   d4d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4d04 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4d08:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4d0a:	460d      	mov	r5, r1
   d4d0c:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4d0e:	460a      	mov	r2, r1
   d4d10:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4d12:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4d14:	f7ff ffb9 	bl	d4c8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d4d18:	f04f 0814 	mov.w	r8, #20
   d4d1c:	1a33      	subs	r3, r6, r0
   d4d1e:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4d22:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d4d24:	2103      	movs	r1, #3
   d4d26:	4638      	mov	r0, r7
   d4d28:	f7ff ffaf 	bl	d4c8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d4d2c:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4d2e:	1b33      	subs	r3, r6, r4
   d4d30:	fb08 5204 	mla	r2, r8, r4, r5
   d4d34:	2106      	movs	r1, #6
   d4d36:	4638      	mov	r0, r7
   d4d38:	f7ff ffa7 	bl	d4c8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d4d3c:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d4d3e:	1b33      	subs	r3, r6, r4
   d4d40:	fb08 5204 	mla	r2, r8, r4, r5
   d4d44:	2107      	movs	r1, #7
   d4d46:	4638      	mov	r0, r7
   d4d48:	f7ff ff9f 	bl	d4c8a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d4d4c:	4420      	add	r0, r4
   d4d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4d52 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4d52:	b510      	push	{r4, lr}
   d4d54:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4d56:	69c2      	ldr	r2, [r0, #28]
   d4d58:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d4d5c:	4293      	cmp	r3, r2
   d4d5e:	4618      	mov	r0, r3
   d4d60:	d006      	beq.n	d4d70 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4d62:	6804      	ldr	r4, [r0, #0]
   d4d64:	8824      	ldrh	r4, [r4, #0]
   d4d66:	428c      	cmp	r4, r1
   d4d68:	f103 0308 	add.w	r3, r3, #8
   d4d6c:	d1f6      	bne.n	d4d5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d4d6e:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d4d70:	2000      	movs	r0, #0
    }
   d4d72:	bd10      	pop	{r4, pc}

000d4d74 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d4d74:	b510      	push	{r4, lr}
    return impl()->address();
   d4d76:	680a      	ldr	r2, [r1, #0]
   d4d78:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d4d7c:	6003      	str	r3, [r0, #0]
   d4d7e:	6853      	ldr	r3, [r2, #4]
   d4d80:	6043      	str	r3, [r0, #4]
}
   d4d82:	bd10      	pop	{r4, pc}

000d4d84 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4d86:	6802      	ldr	r2, [r0, #0]
   d4d88:	680b      	ldr	r3, [r1, #0]
   d4d8a:	8812      	ldrh	r2, [r2, #0]
   d4d8c:	881b      	ldrh	r3, [r3, #0]
   d4d8e:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4d90:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4d92:	d10c      	bne.n	d4dae <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d4d94:	4601      	mov	r1, r0
   d4d96:	4668      	mov	r0, sp
   d4d98:	f7ff ffec 	bl	d4d74 <_ZNK8particle13BlePeerDevice7addressEv>
   d4d9c:	4621      	mov	r1, r4
   d4d9e:	a802      	add	r0, sp, #8
   d4da0:	f7ff ffe8 	bl	d4d74 <_ZNK8particle13BlePeerDevice7addressEv>
   d4da4:	a902      	add	r1, sp, #8
   d4da6:	4668      	mov	r0, sp
   d4da8:	f7ff fe42 	bl	d4a30 <_ZNK8particle10BleAddresseqERKS0_>
   d4dac:	b900      	cbnz	r0, d4db0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d4dae:	2000      	movs	r0, #0
}
   d4db0:	b004      	add	sp, #16
   d4db2:	bd10      	pop	{r4, pc}

000d4db4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4db4:	b510      	push	{r4, lr}
   d4db6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4db8:	2034      	movs	r0, #52	; 0x34
   d4dba:	f7ff f96c 	bl	d4096 <_Znwj>
   d4dbe:	4601      	mov	r1, r0
   d4dc0:	b168      	cbz	r0, d4dde <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4dc2:	2300      	movs	r3, #0
   d4dc4:	6003      	str	r3, [r0, #0]
   d4dc6:	6043      	str	r3, [r0, #4]
   d4dc8:	6083      	str	r3, [r0, #8]
   d4dca:	60c3      	str	r3, [r0, #12]
   d4dcc:	6103      	str	r3, [r0, #16]
   d4dce:	6143      	str	r3, [r0, #20]
   d4dd0:	6183      	str	r3, [r0, #24]
   d4dd2:	61c3      	str	r3, [r0, #28]
   d4dd4:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d4dd6:	6243      	str	r3, [r0, #36]	; 0x24
   d4dd8:	6283      	str	r3, [r0, #40]	; 0x28
   d4dda:	62c3      	str	r3, [r0, #44]	; 0x2c
   d4ddc:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4dde:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d4de0:	b919      	cbnz	r1, d4dea <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d4de2:	4a0a      	ldr	r2, [pc, #40]	; (d4e0c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4de4:	200a      	movs	r0, #10
   d4de6:	f7ff fd13 	bl	d4810 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4dea:	2000      	movs	r0, #0
   d4dec:	f7ff fb42 	bl	d4474 <hal_ble_stack_init>
   d4df0:	b120      	cbz	r0, d4dfc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d4df2:	4a06      	ldr	r2, [pc, #24]	; (d4e0c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4df4:	2100      	movs	r1, #0
   d4df6:	200a      	movs	r0, #10
   d4df8:	f7ff fd0a 	bl	d4810 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d4dfc:	2200      	movs	r2, #0
   d4dfe:	6821      	ldr	r1, [r4, #0]
   d4e00:	4803      	ldr	r0, [pc, #12]	; (d4e10 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d4e02:	f7ff fbab 	bl	d455c <hal_ble_set_callback_on_periph_link_events>
}
   d4e06:	4620      	mov	r0, r4
   d4e08:	bd10      	pop	{r4, pc}
   d4e0a:	bf00      	nop
   d4e0c:	000d45f1 	.word	0x000d45f1
   d4e10:	000d5299 	.word	0x000d5299

000d4e14 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4e14:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4e16:	4c0a      	ldr	r4, [pc, #40]	; (d4e40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4e18:	6823      	ldr	r3, [r4, #0]
   d4e1a:	07db      	lsls	r3, r3, #31
   d4e1c:	d40e      	bmi.n	d4e3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4e1e:	4620      	mov	r0, r4
   d4e20:	f7ff f93f 	bl	d40a2 <__cxa_guard_acquire>
   d4e24:	b150      	cbz	r0, d4e3c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4e26:	4807      	ldr	r0, [pc, #28]	; (d4e44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4e28:	f7ff ffc4 	bl	d4db4 <_ZN8particle14BleLocalDeviceC1Ev>
   d4e2c:	4620      	mov	r0, r4
   d4e2e:	f7ff f93d 	bl	d40ac <__cxa_guard_release>
   d4e32:	4a05      	ldr	r2, [pc, #20]	; (d4e48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4e34:	4905      	ldr	r1, [pc, #20]	; (d4e4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4e36:	4803      	ldr	r0, [pc, #12]	; (d4e44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4e38:	f001 f962 	bl	d6100 <__aeabi_atexit>
    return instance;
}
   d4e3c:	4801      	ldr	r0, [pc, #4]	; (d4e44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4e3e:	bd10      	pop	{r4, pc}
   d4e40:	2003e3c8 	.word	0x2003e3c8
   d4e44:	2003e3c4 	.word	0x2003e3c4
   d4e48:	2003e320 	.word	0x2003e320
   d4e4c:	000d50ad 	.word	0x000d50ad

000d4e50 <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   d4e50:	b513      	push	{r0, r1, r4, lr}
   d4e52:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   d4e54:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d4e56:	4668      	mov	r0, sp
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
   d4e58:	9100      	str	r1, [sp, #0]
   d4e5a:	9101      	str	r1, [sp, #4]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d4e5c:	f7ff fb12 	bl	d4484 <hal_ble_gap_get_device_address>
        : address_{} {
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}

BleAddress::BleAddress(const hal_ble_addr_t& addr) {
    address_ = addr;
   d4e60:	466b      	mov	r3, sp
   d4e62:	cb03      	ldmia	r3!, {r0, r1}
   d4e64:	6020      	str	r0, [r4, #0]

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
    hal_ble_gap_get_device_address(&halAddr, nullptr);
    return BleAddress(halAddr);
}
   d4e66:	4620      	mov	r0, r4
        : address_{} {
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}

BleAddress::BleAddress(const hal_ble_addr_t& addr) {
    address_ = addr;
   d4e68:	6061      	str	r1, [r4, #4]

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
    hal_ble_gap_get_device_address(&halAddr, nullptr);
    return BleAddress(halAddr);
}
   d4e6a:	b002      	add	sp, #8
   d4e6c:	bd10      	pop	{r4, pc}

000d4e6e <_ZNK8particle14BleLocalDevice7txPowerEPa>:
int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}

int BleLocalDevice::txPower(int8_t* txPower) const {
   d4e6e:	b513      	push	{r0, r1, r4, lr}
   d4e70:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4e72:	a801      	add	r0, sp, #4
   d4e74:	f7ff fdba 	bl	d49ec <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_get_tx_power(txPower, nullptr);
   d4e78:	2100      	movs	r1, #0
   d4e7a:	4620      	mov	r0, r4
   d4e7c:	f7ff fb0a 	bl	d4494 <hal_ble_gap_get_tx_power>
   d4e80:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}

int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
   d4e82:	a801      	add	r0, sp, #4
   d4e84:	f7ff fdc0 	bl	d4a08 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}
   d4e88:	4620      	mov	r0, r4
   d4e8a:	b002      	add	sp, #8
   d4e8c:	bd10      	pop	{r4, pc}

000d4e8e <_ZNK8particle14BleLocalDevice21setAdvertisingTimeoutEt>:
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
   d4e8e:	b530      	push	{r4, r5, lr}
   d4e90:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4e92:	2400      	movs	r4, #0
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d4e94:	4668      	mov	r0, sp
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
   d4e96:	460d      	mov	r5, r1
    WiringBleLock lk;
   d4e98:	f7ff fda8 	bl	d49ec <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4e9c:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4e9e:	4621      	mov	r1, r4
   d4ea0:	a801      	add	r0, sp, #4
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4ea2:	9401      	str	r4, [sp, #4]
   d4ea4:	9402      	str	r4, [sp, #8]
   d4ea6:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4ea8:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4eac:	f7ff fb02 	bl	d44b4 <hal_ble_gap_get_advertising_parameters>
   d4eb0:	2800      	cmp	r0, #0
   d4eb2:	db05      	blt.n	d4ec0 <_ZNK8particle14BleLocalDevice21setAdvertisingTimeoutEt+0x32>
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4eb4:	4621      	mov	r1, r4
   d4eb6:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
   d4eb8:	f8ad 500a 	strh.w	r5, [sp, #10]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4ebc:	f7ff faf2 	bl	d44a4 <hal_ble_gap_set_advertising_parameters>
   d4ec0:	4604      	mov	r4, r0
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d4ec2:	4668      	mov	r0, sp
   d4ec4:	f7ff fda0 	bl	d4a08 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d4ec8:	4620      	mov	r0, r4
   d4eca:	b005      	add	sp, #20
   d4ecc:	bd30      	pop	{r4, r5, pc}

000d4ece <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>:

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d4ece:	b530      	push	{r4, r5, lr}
   d4ed0:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4ed2:	2400      	movs	r4, #0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d4ed4:	4668      	mov	r0, sp
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d4ed6:	460d      	mov	r5, r1
    WiringBleLock lk;
   d4ed8:	f7ff fd88 	bl	d49ec <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4edc:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4ede:	4621      	mov	r1, r4
   d4ee0:	a801      	add	r0, sp, #4
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4ee2:	9401      	str	r4, [sp, #4]
   d4ee4:	9402      	str	r4, [sp, #8]
   d4ee6:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4ee8:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4eec:	f7ff fae2 	bl	d44b4 <hal_ble_gap_get_advertising_parameters>
   d4ef0:	2800      	cmp	r0, #0
   d4ef2:	db05      	blt.n	d4f00 <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE+0x32>
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4ef4:	4621      	mov	r1, r4
   d4ef6:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
   d4ef8:	f88d 500c 	strb.w	r5, [sp, #12]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4efc:	f7ff fad2 	bl	d44a4 <hal_ble_gap_set_advertising_parameters>
   d4f00:	4604      	mov	r4, r0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d4f02:	4668      	mov	r0, sp
   d4f04:	f7ff fd80 	bl	d4a08 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d4f08:	4620      	mov	r0, r4
   d4f0a:	b005      	add	sp, #20
   d4f0c:	bd30      	pop	{r4, r5, pc}

000d4f0e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d4f0e:	4608      	mov	r0, r1
   d4f10:	b909      	cbnz	r1, d4f16 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d4f12:	460a      	mov	r2, r1
   d4f14:	e001      	b.n	d4f1a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d4f16:	6a09      	ldr	r1, [r1, #32]
   d4f18:	2200      	movs	r2, #0
   d4f1a:	f7ff bad3 	b.w	d44c4 <hal_ble_gap_set_advertising_data>

000d4f1e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d4f1e:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d4f20:	460c      	mov	r4, r1
   d4f22:	b911      	cbnz	r1, d4f2a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d4f24:	460a      	mov	r2, r1
   d4f26:	4608      	mov	r0, r1
   d4f28:	e006      	b.n	d4f38 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d4f2a:	2101      	movs	r1, #1
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	f7ff fe90 	bl	d4c52 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4f32:	6a21      	ldr	r1, [r4, #32]
   d4f34:	2200      	movs	r2, #0
   d4f36:	4620      	mov	r0, r4
    }
}
   d4f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4f3c:	f7ff baca 	b.w	d44d4 <hal_ble_gap_set_scan_response_data>

000d4f40 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d4f40:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d4f42:	a801      	add	r0, sp, #4
   d4f44:	f7ff fd52 	bl	d49ec <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d4f48:	2000      	movs	r0, #0
   d4f4a:	f7ff facb 	bl	d44e4 <hal_ble_gap_start_advertising>
   d4f4e:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d4f50:	a801      	add	r0, sp, #4
   d4f52:	f7ff fd59 	bl	d4a08 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d4f56:	4620      	mov	r0, r4
   d4f58:	b002      	add	sp, #8
   d4f5a:	bd10      	pop	{r4, pc}

000d4f5c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4f5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4f5e:	4605      	mov	r5, r0
   d4f60:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4f62:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4f64:	4616      	mov	r6, r2
    WiringBleLock lk;
   d4f66:	f7ff fd41 	bl	d49ec <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d4f6a:	4621      	mov	r1, r4
   d4f6c:	4628      	mov	r0, r5
   d4f6e:	f7ff ffce 	bl	d4f0e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d4f72:	2800      	cmp	r0, #0
   d4f74:	db08      	blt.n	d4f88 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d4f76:	4631      	mov	r1, r6
   d4f78:	4628      	mov	r0, r5
   d4f7a:	f7ff ffd0 	bl	d4f1e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d4f7e:	2800      	cmp	r0, #0
   d4f80:	db02      	blt.n	d4f88 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d4f82:	4628      	mov	r0, r5
   d4f84:	f7ff ffdc 	bl	d4f40 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d4f88:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d4f8a:	a801      	add	r0, sp, #4
   d4f8c:	f7ff fd3c 	bl	d4a08 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d4f90:	4620      	mov	r0, r4
   d4f92:	b002      	add	sp, #8
   d4f94:	bd70      	pop	{r4, r5, r6, pc}

000d4f96 <_ZNK8particle14BleLocalDevice11advertisingEv>:
int BleLocalDevice::stopAdvertising() const {
    return hal_ble_gap_stop_advertising(nullptr);
}

bool BleLocalDevice::advertising() const {
    return hal_ble_gap_is_advertising(nullptr);
   d4f96:	2000      	movs	r0, #0
   d4f98:	f7ff baac 	b.w	d44f4 <hal_ble_gap_is_advertising>

000d4f9c <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d4f9c:	b530      	push	{r4, r5, lr}
   d4f9e:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d4fa0:	2400      	movs	r4, #0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d4fa2:	4668      	mov	r0, sp
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d4fa4:	460d      	mov	r5, r1
    WiringBleLock lk;
   d4fa6:	f7ff fd21 	bl	d49ec <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d4faa:	230c      	movs	r3, #12
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d4fac:	4621      	mov	r1, r4
   d4fae:	a801      	add	r0, sp, #4
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d4fb0:	9401      	str	r4, [sp, #4]
   d4fb2:	9402      	str	r4, [sp, #8]
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d4fb4:	f8ad 3006 	strh.w	r3, [sp, #6]
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d4fb8:	9403      	str	r4, [sp, #12]
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d4fba:	f7ff faab 	bl	d4514 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d4fbe:	4621      	mov	r1, r4
   d4fc0:	a801      	add	r0, sp, #4
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
   d4fc2:	f8ad 500c 	strh.w	r5, [sp, #12]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d4fc6:	f7ff fa9d 	bl	d4504 <hal_ble_gap_set_scan_parameters>
   d4fca:	4604      	mov	r4, r0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d4fcc:	4668      	mov	r0, sp
   d4fce:	f7ff fd1b 	bl	d4a08 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	b005      	add	sp, #20
   d4fd6:	bd30      	pop	{r4, r5, pc}

000d4fd8 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>:
int BleLocalDevice::getScanParameters(BleScanParams* params) const {
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   d4fd8:	b530      	push	{r4, r5, lr}
   d4fda:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d4fdc:	a801      	add	r0, sp, #4
int BleLocalDevice::getScanParameters(BleScanParams* params) const {
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   d4fde:	4614      	mov	r4, r2
   d4fe0:	460d      	mov	r5, r1
    WiringBleLock lk;
   d4fe2:	f7ff fd03 	bl	d49ec <_ZN8particle3ble13WiringBleLockC1Ev>
   d4fe6:	2200      	movs	r2, #0
    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
        context_ = context;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d4fe8:	a902      	add	r1, sp, #8
   d4fea:	480c      	ldr	r0, [pc, #48]	; (d501c <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_+0x44>)
   d4fec:	9202      	str	r2, [sp, #8]
   d4fee:	9203      	str	r2, [sp, #12]
   d4ff0:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d4ff2:	9205      	str	r2, [sp, #20]
   d4ff4:	9206      	str	r2, [sp, #24]
   d4ff6:	9207      	str	r2, [sp, #28]

    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
        context_ = context;
   d4ff8:	9409      	str	r4, [sp, #36]	; 0x24
    }

    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
   d4ffa:	9508      	str	r5, [sp, #32]
        context_ = context;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d4ffc:	f7ff fa92 	bl	d4524 <hal_ble_gap_start_scan>
   d5000:	2800      	cmp	r0, #0
   d5002:	bfb8      	it	lt
   d5004:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5006:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d5008:	bfa8      	it	ge
   d500a:	9c07      	ldrge	r4, [sp, #28]
   d500c:	f7ff fca4 	bl	d4958 <free>
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
    WiringBleLock lk;
   d5010:	a801      	add	r0, sp, #4
   d5012:	f7ff fcf9 	bl	d4a08 <_ZN8particle3ble13WiringBleLockD1Ev>
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}
   d5016:	4620      	mov	r0, r4
   d5018:	b00b      	add	sp, #44	; 0x2c
   d501a:	bd30      	pop	{r4, r5, pc}
   d501c:	000d5407 	.word	0x000d5407

000d5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5020:	680b      	ldr	r3, [r1, #0]
   d5022:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5024:	b113      	cbz	r3, d502c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5026:	685a      	ldr	r2, [r3, #4]
   d5028:	3201      	adds	r2, #1
   d502a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d502c:	4770      	bx	lr

000d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d502e:	b510      	push	{r4, lr}
   d5030:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5032:	6800      	ldr	r0, [r0, #0]
   d5034:	b128      	cbz	r0, d5042 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5036:	6843      	ldr	r3, [r0, #4]
   d5038:	3b01      	subs	r3, #1
   d503a:	6043      	str	r3, [r0, #4]
   d503c:	b90b      	cbnz	r3, d5042 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d503e:	f7ff fcc5 	bl	d49cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5042:	4620      	mov	r0, r4
   d5044:	bd10      	pop	{r4, pc}

000d5046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5046:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5048:	6804      	ldr	r4, [r0, #0]
   d504a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d504c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d504e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5052:	42a6      	cmp	r6, r4
   d5054:	d004      	beq.n	d5060 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5056:	1d20      	adds	r0, r4, #4
   d5058:	f7ff ffe9 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d505c:	3408      	adds	r4, #8
   d505e:	e7f8      	b.n	d5052 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5060:	6828      	ldr	r0, [r5, #0]
   d5062:	f7ff fc79 	bl	d4958 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5066:	4628      	mov	r0, r5
   d5068:	bd70      	pop	{r4, r5, r6, pc}

000d506a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d506a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d506c:	6804      	ldr	r4, [r0, #0]
   d506e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5070:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5072:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5076:	42a6      	cmp	r6, r4
   d5078:	d004      	beq.n	d5084 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d507a:	1d20      	adds	r0, r4, #4
   d507c:	f7ff ffd7 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5080:	3408      	adds	r4, #8
   d5082:	e7f8      	b.n	d5076 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5084:	6828      	ldr	r0, [r5, #0]
   d5086:	f7ff fc67 	bl	d4958 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d508a:	4628      	mov	r0, r5
   d508c:	bd70      	pop	{r4, r5, r6, pc}

000d508e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d508e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5090:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5092:	f104 0018 	add.w	r0, r4, #24
   d5096:	f7ff ffe8 	bl	d506a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d509a:	f104 000c 	add.w	r0, r4, #12
   d509e:	f7ff ffd2 	bl	d5046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d50a2:	4620      	mov	r0, r4
   d50a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d50a8:	f7fe bff7 	b.w	d409a <_ZdlPv>

000d50ac <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d50ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d50ae:	6804      	ldr	r4, [r0, #0]
   d50b0:	4607      	mov	r7, r0
   d50b2:	b1c4      	cbz	r4, d50e6 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d50b4:	69a5      	ldr	r5, [r4, #24]
   d50b6:	69e3      	ldr	r3, [r4, #28]
   d50b8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d50bc:	42ae      	cmp	r6, r5
   d50be:	d004      	beq.n	d50ca <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d50c0:	1d28      	adds	r0, r5, #4
   d50c2:	f7ff ffb4 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d50c6:	3508      	adds	r5, #8
   d50c8:	e7f8      	b.n	d50bc <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d50ca:	69a0      	ldr	r0, [r4, #24]
   d50cc:	f7ff fc44 	bl	d4958 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d50d0:	f104 000c 	add.w	r0, r4, #12
   d50d4:	f7ff ffc9 	bl	d506a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d50d8:	4620      	mov	r0, r4
   d50da:	f7ff ffb4 	bl	d5046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d50de:	2134      	movs	r1, #52	; 0x34
   d50e0:	4620      	mov	r0, r4
   d50e2:	f001 f812 	bl	d610a <_ZdlPvj>
   d50e6:	4638      	mov	r0, r7
   d50e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d50ec <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d50ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d50ee:	2500      	movs	r5, #0
   d50f0:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d50f2:	6045      	str	r5, [r0, #4]
   d50f4:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d50f6:	2024      	movs	r0, #36	; 0x24
   d50f8:	f7fe ffcd 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d50fc:	4604      	mov	r4, r0
   d50fe:	b178      	cbz	r0, d5120 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5100:	4603      	mov	r3, r0
   d5102:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5106:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d510a:	f8c0 5002 	str.w	r5, [r0, #2]
   d510e:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5110:	7285      	strb	r5, [r0, #10]
   d5112:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5114:	60c5      	str	r5, [r0, #12]
   d5116:	6105      	str	r5, [r0, #16]
   d5118:	6145      	str	r5, [r0, #20]
   d511a:	6185      	str	r5, [r0, #24]
   d511c:	61c5      	str	r5, [r0, #28]
   d511e:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5120:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5122:	2014      	movs	r0, #20
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	f7fe ffb6 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d512a:	4603      	mov	r3, r0
   d512c:	b128      	cbz	r0, d513a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d512e:	2201      	movs	r2, #1
   d5130:	6042      	str	r2, [r0, #4]
   d5132:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5134:	4a08      	ldr	r2, [pc, #32]	; (d5158 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5136:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5138:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d513a:	a802      	add	r0, sp, #8
   d513c:	6872      	ldr	r2, [r6, #4]
   d513e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5142:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5144:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5146:	f7ff ff72 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d514a:	6833      	ldr	r3, [r6, #0]
   d514c:	b90b      	cbnz	r3, d5152 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d514e:	f7ff fc33 	bl	d49b8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d5152:	4630      	mov	r0, r6
   d5154:	b002      	add	sp, #8
   d5156:	bd70      	pop	{r4, r5, r6, pc}
   d5158:	000d6548 	.word	0x000d6548

000d515c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d515c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d515e:	b570      	push	{r4, r5, r6, lr}
   d5160:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5162:	d91a      	bls.n	d519a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5164:	4290      	cmp	r0, r2
   d5166:	d219      	bcs.n	d519c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5168:	f1a1 0608 	sub.w	r6, r1, #8
   d516c:	1a51      	subs	r1, r2, r1
   d516e:	3904      	subs	r1, #4
   d5170:	1f15      	subs	r5, r2, #4
   d5172:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5174:	1f2b      	subs	r3, r5, #4
   d5176:	429e      	cmp	r6, r3
   d5178:	d025      	beq.n	d51c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d517a:	2c04      	cmp	r4, #4
   d517c:	d007      	beq.n	d518e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d517e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5182:	f844 3c04 	str.w	r3, [r4, #-4]
   d5186:	4629      	mov	r1, r5
   d5188:	4620      	mov	r0, r4
   d518a:	f7ff ff49 	bl	d5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d518e:	4628      	mov	r0, r5
   d5190:	f7ff ff4d 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5194:	3d08      	subs	r5, #8
   d5196:	3c08      	subs	r4, #8
   d5198:	e7ec      	b.n	d5174 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d519a:	d014      	beq.n	d51c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d519c:	1d0c      	adds	r4, r1, #4
   d519e:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d51a0:	1f23      	subs	r3, r4, #4
   d51a2:	429d      	cmp	r5, r3
   d51a4:	d00f      	beq.n	d51c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d51a6:	2e04      	cmp	r6, #4
   d51a8:	d007      	beq.n	d51ba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d51ae:	f846 3c04 	str.w	r3, [r6, #-4]
   d51b2:	4621      	mov	r1, r4
   d51b4:	4630      	mov	r0, r6
   d51b6:	f7ff ff33 	bl	d5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51ba:	4620      	mov	r0, r4
   d51bc:	f7ff ff37 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51c0:	3408      	adds	r4, #8
   d51c2:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d51c4:	e7ec      	b.n	d51a0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d51c6:	bd70      	pop	{r4, r5, r6, pc}

000d51c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d51c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d51cc:	6804      	ldr	r4, [r0, #0]
   d51ce:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d51d0:	4605      	mov	r5, r0
   d51d2:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d51d4:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d51d8:	42a7      	cmp	r7, r4
   d51da:	d018      	beq.n	d520e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d51dc:	4641      	mov	r1, r8
   d51de:	4620      	mov	r0, r4
   d51e0:	f7ff fdd0 	bl	d4d84 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d51e4:	4606      	mov	r6, r0
   d51e6:	b908      	cbnz	r0, d51ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d51e8:	3408      	adds	r4, #8
   d51ea:	e7f5      	b.n	d51d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d51ec:	b18c      	cbz	r4, d5212 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d51ee:	1d20      	adds	r0, r4, #4
   d51f0:	f7ff ff1d 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d51f4:	682b      	ldr	r3, [r5, #0]
   d51f6:	686a      	ldr	r2, [r5, #4]
   d51f8:	f104 0108 	add.w	r1, r4, #8
   d51fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5200:	4620      	mov	r0, r4
   d5202:	f7ff ffab 	bl	d515c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5206:	686b      	ldr	r3, [r5, #4]
   d5208:	3b01      	subs	r3, #1
   d520a:	606b      	str	r3, [r5, #4]
    return true;
   d520c:	e002      	b.n	d5214 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d520e:	2600      	movs	r6, #0
   d5210:	e000      	b.n	d5214 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5212:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5214:	4630      	mov	r0, r6
   d5216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d521a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d521a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d521c:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d521e:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5222:	6847      	ldr	r7, [r0, #4]
   d5224:	9300      	str	r3, [sp, #0]
   d5226:	a801      	add	r0, sp, #4
   d5228:	f7ff fefa 	bl	d5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d522c:	6866      	ldr	r6, [r4, #4]
   d522e:	68a3      	ldr	r3, [r4, #8]
   d5230:	429e      	cmp	r6, r3
   d5232:	db14      	blt.n	d525e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5234:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5236:	2e00      	cmp	r6, #0
   d5238:	dd0b      	ble.n	d5252 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d523a:	00f0      	lsls	r0, r6, #3
   d523c:	f7ff fb84 	bl	d4948 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5240:	4605      	mov	r5, r0
   d5242:	b318      	cbz	r0, d528c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5244:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5248:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d524c:	f7ff ff86 	bl	d515c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5250:	e000      	b.n	d5254 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5252:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5254:	6820      	ldr	r0, [r4, #0]
   d5256:	f7ff fb7f 	bl	d4958 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d525a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d525c:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d525e:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5260:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5262:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5266:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d526a:	4629      	mov	r1, r5
   d526c:	f105 0008 	add.w	r0, r5, #8
   d5270:	f7ff ff74 	bl	d515c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5274:	b135      	cbz	r5, d5284 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5276:	9b00      	ldr	r3, [sp, #0]
   d5278:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d527c:	a901      	add	r1, sp, #4
   d527e:	1d28      	adds	r0, r5, #4
   d5280:	f7ff fece 	bl	d5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5284:	6863      	ldr	r3, [r4, #4]
   d5286:	3301      	adds	r3, #1
   d5288:	6063      	str	r3, [r4, #4]
   d528a:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d528c:	a801      	add	r0, sp, #4
   d528e:	f7ff fece 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5292:	4628      	mov	r0, r5
   d5294:	b003      	add	sp, #12
   d5296:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5298 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d529c:	4604      	mov	r4, r0
   d529e:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d52a0:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d52a2:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d52a4:	f7ff fba2 	bl	d49ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d52a8:	6823      	ldr	r3, [r4, #0]
   d52aa:	2b03      	cmp	r3, #3
   d52ac:	d002      	beq.n	d52b4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d52ae:	2b04      	cmp	r3, #4
   d52b0:	d042      	beq.n	d5338 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d52b2:	e087      	b.n	d53c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d52b4:	a804      	add	r0, sp, #16
   d52b6:	f7ff ff19 	bl	d50ec <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d52ba:	9b04      	ldr	r3, [sp, #16]
   d52bc:	8922      	ldrh	r2, [r4, #8]
   d52be:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d52c0:	6862      	ldr	r2, [r4, #4]
   d52c2:	9904      	ldr	r1, [sp, #16]
   d52c4:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d52c8:	f8c1 3002 	str.w	r3, [r1, #2]
   d52cc:	6853      	ldr	r3, [r2, #4]
   d52ce:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52d2:	a807      	add	r0, sp, #28
   d52d4:	9b04      	ldr	r3, [sp, #16]
   d52d6:	9306      	str	r3, [sp, #24]
   d52d8:	a905      	add	r1, sp, #20
   d52da:	f7ff fea1 	bl	d5020 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d52de:	a906      	add	r1, sp, #24
   d52e0:	f105 0018 	add.w	r0, r5, #24
   d52e4:	f7ff ff99 	bl	d521a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d52e8:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52ea:	a807      	add	r0, sp, #28
   d52ec:	f7ff fe9f 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52f0:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d52f2:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d52f4:	b974      	cbnz	r4, d5314 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d52f6:	4b36      	ldr	r3, [pc, #216]	; (d53d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d52f8:	9300      	str	r3, [sp, #0]
   d52fa:	aa06      	add	r2, sp, #24
   d52fc:	4623      	mov	r3, r4
   d52fe:	4935      	ldr	r1, [pc, #212]	; (d53d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5300:	9407      	str	r4, [sp, #28]
   d5302:	2032      	movs	r0, #50	; 0x32
   d5304:	f7ff fa8c 	bl	d4820 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5308:	9b04      	ldr	r3, [sp, #16]
   d530a:	4621      	mov	r1, r4
   d530c:	8818      	ldrh	r0, [r3, #0]
   d530e:	f7ff f91b 	bl	d4548 <hal_ble_gap_disconnect>
   d5312:	e00d      	b.n	d5330 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5314:	4a30      	ldr	r2, [pc, #192]	; (d53d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5316:	9200      	str	r2, [sp, #0]
   d5318:	2300      	movs	r3, #0
   d531a:	aa06      	add	r2, sp, #24
   d531c:	492d      	ldr	r1, [pc, #180]	; (d53d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d531e:	9307      	str	r3, [sp, #28]
   d5320:	2001      	movs	r0, #1
   d5322:	f7ff fa7d 	bl	d4820 <log_message>
                if (impl->connectedCb_) {
   d5326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5328:	b113      	cbz	r3, d5330 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d532a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d532c:	a804      	add	r0, sp, #16
   d532e:	4798      	blx	r3
   d5330:	a805      	add	r0, sp, #20
   d5332:	f7ff fe7c 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5336:	e045      	b.n	d53c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5338:	8921      	ldrh	r1, [r4, #8]
   d533a:	4628      	mov	r0, r5
   d533c:	f7ff fd09 	bl	d4d52 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5340:	4607      	mov	r7, r0
   d5342:	2800      	cmp	r0, #0
   d5344:	d03e      	beq.n	d53c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5346:	6804      	ldr	r4, [r0, #0]
   d5348:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d534a:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d534c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5350:	8022      	strh	r2, [r4, #0]
   d5352:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5356:	4299      	cmp	r1, r3
   d5358:	d003      	beq.n	d5362 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d535a:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d535e:	8042      	strh	r2, [r0, #2]
   d5360:	e7f9      	b.n	d5356 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5362:	68e6      	ldr	r6, [r4, #12]
   d5364:	6923      	ldr	r3, [r4, #16]
   d5366:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d536a:	45b0      	cmp	r8, r6
   d536c:	d004      	beq.n	d5378 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d536e:	1d30      	adds	r0, r6, #4
   d5370:	f7ff fe5d 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5374:	3608      	adds	r6, #8
   d5376:	e7f8      	b.n	d536a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5378:	2300      	movs	r3, #0
   d537a:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d537c:	69a6      	ldr	r6, [r4, #24]
   d537e:	69e3      	ldr	r3, [r4, #28]
   d5380:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5384:	45b0      	cmp	r8, r6
   d5386:	d004      	beq.n	d5392 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5388:	1d30      	adds	r0, r6, #4
   d538a:	f7ff fe50 	bl	d502e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d538e:	3608      	adds	r6, #8
   d5390:	e7f8      	b.n	d5384 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5392:	2300      	movs	r3, #0
   d5394:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5396:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5398:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d539a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d539c:	b113      	cbz	r3, d53a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d539e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d53a0:	4638      	mov	r0, r7
   d53a2:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d53a4:	2320      	movs	r3, #32
   d53a6:	4a0d      	ldr	r2, [pc, #52]	; (d53dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d53a8:	9306      	str	r3, [sp, #24]
   d53aa:	9200      	str	r2, [sp, #0]
   d53ac:	2300      	movs	r3, #0
   d53ae:	4909      	ldr	r1, [pc, #36]	; (d53d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d53b0:	9307      	str	r3, [sp, #28]
   d53b2:	2001      	movs	r0, #1
   d53b4:	aa06      	add	r2, sp, #24
   d53b6:	f7ff fa33 	bl	d4820 <log_message>
                    impl->peers_.removeOne(*peer);
   d53ba:	4639      	mov	r1, r7
   d53bc:	f105 0018 	add.w	r0, r5, #24
   d53c0:	f7ff ff02 	bl	d51c8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d53c4:	a803      	add	r0, sp, #12
   d53c6:	f7ff fb1f 	bl	d4a08 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d53ca:	b00e      	add	sp, #56	; 0x38
   d53cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d53d0:	000d65be 	.word	0x000d65be
   d53d4:	000d655c 	.word	0x000d655c
   d53d8:	000d65e4 	.word	0x000d65e4
   d53dc:	000d6601 	.word	0x000d6601

000d53e0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d53e0:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d53e2:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d53e4:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d53e6:	dd06      	ble.n	d53f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d53e8:	2154      	movs	r1, #84	; 0x54
   d53ea:	4369      	muls	r1, r5
   d53ec:	6800      	ldr	r0, [r0, #0]
   d53ee:	f7ff fabb 	bl	d4968 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d53f2:	b920      	cbnz	r0, d53fe <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d53f4:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d53f6:	6800      	ldr	r0, [r0, #0]
   d53f8:	f7ff faae 	bl	d4958 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d53fc:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d53fe:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5400:	60a5      	str	r5, [r4, #8]
        return true;
   d5402:	2001      	movs	r0, #1
    }
   d5404:	bd38      	pop	{r3, r4, r5, pc}

000d5406 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5406:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5408:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d540a:	b0c0      	sub	sp, #256	; 0x100
   d540c:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d540e:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5410:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5412:	a801      	add	r0, sp, #4
   d5414:	2100      	movs	r1, #0
   d5416:	f001 f820 	bl	d645a <memset>
   d541a:	a803      	add	r0, sp, #12
   d541c:	f7ff fbff 	bl	d4c1e <_ZN8particle18BleAdvertisingDataC1Ev>
   d5420:	a80c      	add	r0, sp, #48	; 0x30
   d5422:	f7ff fbfc 	bl	d4c1e <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5426:	462a      	mov	r2, r5
   d5428:	ab01      	add	r3, sp, #4
   d542a:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d542e:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5430:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5432:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5434:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5436:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5438:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d543c:	a80c      	add	r0, sp, #48	; 0x30
   d543e:	f7ff fb6d 	bl	d4b1c <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d5442:	89aa      	ldrh	r2, [r5, #12]
   d5444:	6869      	ldr	r1, [r5, #4]
   d5446:	a803      	add	r0, sp, #12
   d5448:	f7ff fb68 	bl	d4b1c <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d544c:	69a5      	ldr	r5, [r4, #24]
   d544e:	b11d      	cbz	r5, d5458 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d5450:	69e1      	ldr	r1, [r4, #28]
   d5452:	a801      	add	r0, sp, #4
   d5454:	47a8      	blx	r5
   d5456:	e03c      	b.n	d54d2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d5458:	68e0      	ldr	r0, [r4, #12]
   d545a:	b198      	cbz	r0, d5484 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d545c:	6963      	ldr	r3, [r4, #20]
   d545e:	6922      	ldr	r2, [r4, #16]
   d5460:	4293      	cmp	r3, r2
   d5462:	d239      	bcs.n	d54d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d5464:	1c5a      	adds	r2, r3, #1
   d5466:	6162      	str	r2, [r4, #20]
   d5468:	fb06 0003 	mla	r0, r6, r3, r0
   d546c:	2251      	movs	r2, #81	; 0x51
   d546e:	a901      	add	r1, sp, #4
   d5470:	f000 ffcd 	bl	d640e <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d5474:	6962      	ldr	r2, [r4, #20]
   d5476:	6923      	ldr	r3, [r4, #16]
   d5478:	429a      	cmp	r2, r3
   d547a:	d32d      	bcc.n	d54d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d547c:	4628      	mov	r0, r5
   d547e:	f7ff f859 	bl	d4534 <hal_ble_gap_stop_scan>
   d5482:	e029      	b.n	d54d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d5484:	4632      	mov	r2, r6
   d5486:	a901      	add	r1, sp, #4
   d5488:	a816      	add	r0, sp, #88	; 0x58
   d548a:	f000 ffc0 	bl	d640e <memcpy>
   d548e:	4632      	mov	r2, r6
   d5490:	a916      	add	r1, sp, #88	; 0x58
   d5492:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5494:	6865      	ldr	r5, [r4, #4]
   d5496:	f000 ffba 	bl	d640e <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d549a:	68a3      	ldr	r3, [r4, #8]
   d549c:	429d      	cmp	r5, r3
   d549e:	db04      	blt.n	d54aa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d54a0:	1c69      	adds	r1, r5, #1
   d54a2:	4620      	mov	r0, r4
   d54a4:	f7ff ff9c 	bl	d53e0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d54a8:	b1b0      	cbz	r0, d54d8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d54aa:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d54ac:	6822      	ldr	r2, [r4, #0]
   d54ae:	2654      	movs	r6, #84	; 0x54
   d54b0:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d54b4:	fb06 2203 	mla	r2, r6, r3, r2
   d54b8:	1b52      	subs	r2, r2, r5
   d54ba:	4629      	mov	r1, r5
   d54bc:	19a8      	adds	r0, r5, r6
   d54be:	f000 ffb1 	bl	d6424 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d54c2:	4632      	mov	r2, r6
   d54c4:	a92b      	add	r1, sp, #172	; 0xac
   d54c6:	4628      	mov	r0, r5
   d54c8:	f000 ffa1 	bl	d640e <memcpy>
    ++size_;
   d54cc:	6863      	ldr	r3, [r4, #4]
   d54ce:	3301      	adds	r3, #1
   d54d0:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d54d2:	6963      	ldr	r3, [r4, #20]
   d54d4:	3301      	adds	r3, #1
   d54d6:	6163      	str	r3, [r4, #20]
        }
    }
   d54d8:	b040      	add	sp, #256	; 0x100
   d54da:	bd70      	pop	{r4, r5, r6, pc}

000d54dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d54dc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54de:	4c06      	ldr	r4, [pc, #24]	; (d54f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d54e0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d54e2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d54e4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d54e6:	f7ff f85b 	bl	d45a0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d54ea:	4620      	mov	r0, r4
   d54ec:	4a03      	ldr	r2, [pc, #12]	; (d54fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d54ee:	4904      	ldr	r1, [pc, #16]	; (d5500 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d54f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d54f4:	f000 be04 	b.w	d6100 <__aeabi_atexit>
   d54f8:	2003e3cc 	.word	0x2003e3cc
   d54fc:	2003e320 	.word	0x2003e320
   d5500:	000d49a7 	.word	0x000d49a7

000d5504 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5504:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5506:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5508:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d550a:	b113      	cbz	r3, d5512 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d550c:	2203      	movs	r2, #3
   d550e:	4601      	mov	r1, r0
   d5510:	4798      	blx	r3
    }
   d5512:	4620      	mov	r0, r4
   d5514:	bd10      	pop	{r4, pc}

000d5516 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5516:	2200      	movs	r2, #0
   d5518:	4611      	mov	r1, r2
   d551a:	6840      	ldr	r0, [r0, #4]
   d551c:	f7ff b9fc 	b.w	d4918 <network_listening>

000d5520 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5520:	2200      	movs	r2, #0
   d5522:	4611      	mov	r1, r2
   d5524:	6840      	ldr	r0, [r0, #4]
   d5526:	f7ff ba07 	b.w	d4938 <network_get_listen_timeout>

000d552a <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d552a:	2200      	movs	r2, #0
   d552c:	6840      	ldr	r0, [r0, #4]
   d552e:	f7ff b9fb 	b.w	d4928 <network_set_listen_timeout>

000d5532 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5532:	2200      	movs	r2, #0
   d5534:	f081 0101 	eor.w	r1, r1, #1
   d5538:	6840      	ldr	r0, [r0, #4]
   d553a:	f7ff b9e5 	b.w	d4908 <network_listen>

000d553e <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d553e:	2300      	movs	r3, #0
   d5540:	461a      	mov	r2, r3
   d5542:	4619      	mov	r1, r3
   d5544:	6840      	ldr	r0, [r0, #4]
   d5546:	f7ff b9d7 	b.w	d48f8 <network_off>

000d554a <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d554a:	2300      	movs	r3, #0
   d554c:	461a      	mov	r2, r3
   d554e:	4619      	mov	r1, r3
   d5550:	6840      	ldr	r0, [r0, #4]
   d5552:	f7ff b9c9 	b.w	d48e8 <network_on>

000d5556 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5556:	2200      	movs	r2, #0
   d5558:	4611      	mov	r1, r2
   d555a:	6840      	ldr	r0, [r0, #4]
   d555c:	f7ff b9bc 	b.w	d48d8 <network_ready>

000d5560 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5560:	2200      	movs	r2, #0
   d5562:	4611      	mov	r1, r2
   d5564:	6840      	ldr	r0, [r0, #4]
   d5566:	f7ff b9a7 	b.w	d48b8 <network_connecting>

000d556a <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d556a:	2200      	movs	r2, #0
   d556c:	2102      	movs	r1, #2
   d556e:	6840      	ldr	r0, [r0, #4]
   d5570:	f7ff b9aa 	b.w	d48c8 <network_disconnect>

000d5574 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5574:	2300      	movs	r3, #0
   d5576:	461a      	mov	r2, r3
   d5578:	6840      	ldr	r0, [r0, #4]
   d557a:	f7ff b995 	b.w	d48a8 <network_connect>
	...

000d5580 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5580:	4b02      	ldr	r3, [pc, #8]	; (d558c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5582:	2203      	movs	r2, #3
   d5584:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5586:	4a02      	ldr	r2, [pc, #8]	; (d5590 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5588:	601a      	str	r2, [r3, #0]
   d558a:	4770      	bx	lr
   d558c:	2003e3d0 	.word	0x2003e3d0
   d5590:	000d6714 	.word	0x000d6714

000d5594 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5594:	4770      	bx	lr

000d5596 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5598:	4606      	mov	r6, r0
   d559a:	4615      	mov	r5, r2
   d559c:	460c      	mov	r4, r1
   d559e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d55a0:	42bc      	cmp	r4, r7
   d55a2:	d006      	beq.n	d55b2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d55a4:	6833      	ldr	r3, [r6, #0]
   d55a6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d55aa:	689b      	ldr	r3, [r3, #8]
   d55ac:	4630      	mov	r0, r6
   d55ae:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d55b0:	e7f6      	b.n	d55a0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d55b2:	4628      	mov	r0, r5
   d55b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d55b6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d55b6:	2200      	movs	r2, #0
   d55b8:	7c00      	ldrb	r0, [r0, #16]
   d55ba:	f7ff b851 	b.w	d4660 <HAL_I2C_Write_Data>

000d55be <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d55be:	2100      	movs	r1, #0
   d55c0:	7c00      	ldrb	r0, [r0, #16]
   d55c2:	f7ff b855 	b.w	d4670 <HAL_I2C_Available_Data>

000d55c6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d55c6:	2100      	movs	r1, #0
   d55c8:	7c00      	ldrb	r0, [r0, #16]
   d55ca:	f7ff b859 	b.w	d4680 <HAL_I2C_Read_Data>

000d55ce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d55ce:	2100      	movs	r1, #0
   d55d0:	7c00      	ldrb	r0, [r0, #16]
   d55d2:	f7ff b85d 	b.w	d4690 <HAL_I2C_Peek_Data>

000d55d6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d55d6:	2100      	movs	r1, #0
   d55d8:	7c00      	ldrb	r0, [r0, #16]
   d55da:	f7ff b861 	b.w	d46a0 <HAL_I2C_Flush_Data>

000d55de <_ZN7TwoWireD0Ev>:
   d55de:	b510      	push	{r4, lr}
   d55e0:	2114      	movs	r1, #20
   d55e2:	4604      	mov	r4, r0
   d55e4:	f000 fd91 	bl	d610a <_ZdlPvj>
   d55e8:	4620      	mov	r0, r4
   d55ea:	bd10      	pop	{r4, pc}

000d55ec <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d55ec:	b510      	push	{r4, lr}
   d55ee:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d55f0:	2300      	movs	r3, #0
   d55f2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55f8:	60a3      	str	r3, [r4, #8]
   d55fa:	4b04      	ldr	r3, [pc, #16]	; (d560c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d55fc:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d55fe:	4608      	mov	r0, r1
   d5600:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5602:	4611      	mov	r1, r2
   d5604:	f7ff f85c 	bl	d46c0 <HAL_I2C_Init>
}
   d5608:	4620      	mov	r0, r4
   d560a:	bd10      	pop	{r4, pc}
   d560c:	000d6748 	.word	0x000d6748

000d5610 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5610:	2100      	movs	r1, #0
   d5612:	7c00      	ldrb	r0, [r0, #16]
   d5614:	f7ff b84c 	b.w	d46b0 <HAL_I2C_Is_Enabled>

000d5618 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5618:	4770      	bx	lr

000d561a <_ZN9IPAddressD0Ev>:
   d561a:	b510      	push	{r4, lr}
   d561c:	2118      	movs	r1, #24
   d561e:	4604      	mov	r4, r0
   d5620:	f000 fd73 	bl	d610a <_ZdlPvj>
   d5624:	4620      	mov	r0, r4
   d5626:	bd10      	pop	{r4, pc}

000d5628 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5628:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d562a:	7d03      	ldrb	r3, [r0, #20]
   d562c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d562e:	b08d      	sub	sp, #52	; 0x34
   d5630:	460e      	mov	r6, r1
   d5632:	f100 0704 	add.w	r7, r0, #4
   d5636:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d563a:	d002      	beq.n	d5642 <_ZNK9IPAddress7printToER5Print+0x1a>
   d563c:	f100 0508 	add.w	r5, r0, #8
   d5640:	e018      	b.n	d5674 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5642:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5644:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5646:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d564a:	232f      	movs	r3, #47	; 0x2f
   d564c:	462a      	mov	r2, r5
   d564e:	200a      	movs	r0, #10
   d5650:	f7ff f83e 	bl	d46d0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5654:	4628      	mov	r0, r5
   d5656:	f000 ff39 	bl	d64cc <strlen>
   d565a:	6833      	ldr	r3, [r6, #0]
   d565c:	4602      	mov	r2, r0
   d565e:	68db      	ldr	r3, [r3, #12]
   d5660:	4629      	mov	r1, r5
   d5662:	4630      	mov	r0, r6
   d5664:	4798      	blx	r3
   d5666:	e00f      	b.n	d5688 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5668:	b124      	cbz	r4, d5674 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d566a:	212e      	movs	r1, #46	; 0x2e
   d566c:	4630      	mov	r0, r6
   d566e:	f000 f9d9 	bl	d5a24 <_ZN5Print5printEc>
   d5672:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5674:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5678:	220a      	movs	r2, #10
   d567a:	4630      	mov	r0, r6
   d567c:	f000 f9d5 	bl	d5a2a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5680:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5682:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5684:	d1f0      	bne.n	d5668 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5686:	4620      	mov	r0, r4
    }
    return n;
}
   d5688:	b00d      	add	sp, #52	; 0x34
   d568a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d568c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d568c:	b510      	push	{r4, lr}
   d568e:	4b05      	ldr	r3, [pc, #20]	; (d56a4 <_ZN9IPAddressC1Ev+0x18>)
   d5690:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5692:	2211      	movs	r2, #17
   d5694:	f840 3b04 	str.w	r3, [r0], #4
   d5698:	2100      	movs	r1, #0
   d569a:	f000 fede 	bl	d645a <memset>
{
    clear();
}
   d569e:	4620      	mov	r0, r4
   d56a0:	bd10      	pop	{r4, pc}
   d56a2:	bf00      	nop
   d56a4:	000d6770 	.word	0x000d6770

000d56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d56a8:	4603      	mov	r3, r0
   d56aa:	4a07      	ldr	r2, [pc, #28]	; (d56c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d56ac:	b510      	push	{r4, lr}
   d56ae:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d56b2:	f101 0210 	add.w	r2, r1, #16
   d56b6:	f851 4b04 	ldr.w	r4, [r1], #4
   d56ba:	f843 4b04 	str.w	r4, [r3], #4
   d56be:	4291      	cmp	r1, r2
   d56c0:	d1f9      	bne.n	d56b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d56c2:	780a      	ldrb	r2, [r1, #0]
   d56c4:	701a      	strb	r2, [r3, #0]
}
   d56c6:	bd10      	pop	{r4, pc}
   d56c8:	000d6770 	.word	0x000d6770

000d56cc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d56cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d56ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d56d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d56d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d56da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d56de:	2304      	movs	r3, #4
   d56e0:	6041      	str	r1, [r0, #4]
   d56e2:	7503      	strb	r3, [r0, #20]
   d56e4:	bd10      	pop	{r4, pc}

000d56e6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d56e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d56e8:	780d      	ldrb	r5, [r1, #0]
   d56ea:	788b      	ldrb	r3, [r1, #2]
   d56ec:	784a      	ldrb	r2, [r1, #1]
   d56ee:	78c9      	ldrb	r1, [r1, #3]
   d56f0:	9100      	str	r1, [sp, #0]
   d56f2:	4629      	mov	r1, r5
   d56f4:	f7ff ffea 	bl	d56cc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d56f8:	b003      	add	sp, #12
   d56fa:	bd30      	pop	{r4, r5, pc}

000d56fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d56fc:	4b01      	ldr	r3, [pc, #4]	; (d5704 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d56fe:	4a02      	ldr	r2, [pc, #8]	; (d5708 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5700:	601a      	str	r2, [r3, #0]
   d5702:	4770      	bx	lr
   d5704:	2003e3d8 	.word	0x2003e3d8
   d5708:	000d67ef 	.word	0x000d67ef

000d570c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d570c:	2200      	movs	r2, #0
   d570e:	4611      	mov	r1, r2
   d5710:	6840      	ldr	r0, [r0, #4]
   d5712:	f7ff b901 	b.w	d4918 <network_listening>

000d5716 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5716:	2200      	movs	r2, #0
   d5718:	4611      	mov	r1, r2
   d571a:	6840      	ldr	r0, [r0, #4]
   d571c:	f7ff b90c 	b.w	d4938 <network_get_listen_timeout>

000d5720 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5720:	2200      	movs	r2, #0
   d5722:	6840      	ldr	r0, [r0, #4]
   d5724:	f7ff b900 	b.w	d4928 <network_set_listen_timeout>

000d5728 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5728:	2200      	movs	r2, #0
   d572a:	f081 0101 	eor.w	r1, r1, #1
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	f7ff b8ea 	b.w	d4908 <network_listen>

000d5734 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5734:	2300      	movs	r3, #0
   d5736:	461a      	mov	r2, r3
   d5738:	2101      	movs	r1, #1
   d573a:	6840      	ldr	r0, [r0, #4]
   d573c:	f7ff b8dc 	b.w	d48f8 <network_off>

000d5740 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5740:	2300      	movs	r3, #0
   d5742:	461a      	mov	r2, r3
   d5744:	4619      	mov	r1, r3
   d5746:	6840      	ldr	r0, [r0, #4]
   d5748:	f7ff b8ce 	b.w	d48e8 <network_on>

000d574c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d574c:	2200      	movs	r2, #0
   d574e:	4611      	mov	r1, r2
   d5750:	6840      	ldr	r0, [r0, #4]
   d5752:	f7ff b8c1 	b.w	d48d8 <network_ready>

000d5756 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5756:	2200      	movs	r2, #0
   d5758:	4611      	mov	r1, r2
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	f7ff b8ac 	b.w	d48b8 <network_connecting>

000d5760 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5760:	2200      	movs	r2, #0
   d5762:	2102      	movs	r1, #2
   d5764:	6840      	ldr	r0, [r0, #4]
   d5766:	f7ff b8af 	b.w	d48c8 <network_disconnect>

000d576a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d576a:	2300      	movs	r3, #0
   d576c:	461a      	mov	r2, r3
   d576e:	6840      	ldr	r0, [r0, #4]
   d5770:	f7ff b89a 	b.w	d48a8 <network_connect>

000d5774 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5774:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5776:	4605      	mov	r5, r0
   d5778:	b188      	cbz	r0, d579e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d577a:	6804      	ldr	r4, [r0, #0]
   d577c:	b14c      	cbz	r4, d5792 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d577e:	68a3      	ldr	r3, [r4, #8]
   d5780:	b11b      	cbz	r3, d578a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5782:	2203      	movs	r2, #3
   d5784:	4621      	mov	r1, r4
   d5786:	4620      	mov	r0, r4
   d5788:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d578a:	2110      	movs	r1, #16
   d578c:	4620      	mov	r0, r4
   d578e:	f000 fcbc 	bl	d610a <_ZdlPvj>
   d5792:	4628      	mov	r0, r5
   d5794:	2114      	movs	r1, #20
      }
   d5796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d579a:	f000 bcb6 	b.w	d610a <_ZdlPvj>
   d579e:	bd38      	pop	{r3, r4, r5, pc}

000d57a0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d57a0:	b110      	cbz	r0, d57a8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d57a2:	6803      	ldr	r3, [r0, #0]
   d57a4:	685b      	ldr	r3, [r3, #4]
   d57a6:	4718      	bx	r3
   d57a8:	4770      	bx	lr

000d57aa <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d57aa:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d57ac:	6803      	ldr	r3, [r0, #0]
   d57ae:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d57b0:	b1bb      	cbz	r3, d57e2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d57b2:	6858      	ldr	r0, [r3, #4]
   d57b4:	f7fe fedc 	bl	d4570 <os_thread_is_current>
   d57b8:	b978      	cbnz	r0, d57da <_ZN6ThreadD1Ev+0x30>
   d57ba:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d57bc:	7c5a      	ldrb	r2, [r3, #17]
   d57be:	b912      	cbnz	r2, d57c6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d57c0:	6858      	ldr	r0, [r3, #4]
   d57c2:	f7fe fedd 	bl	d4580 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d57c6:	6823      	ldr	r3, [r4, #0]
   d57c8:	6858      	ldr	r0, [r3, #4]
   d57ca:	f7fe fee1 	bl	d4590 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57ce:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d57d0:	2300      	movs	r3, #0
   d57d2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d57d4:	b128      	cbz	r0, d57e2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d57d6:	f7ff ffcd 	bl	d5774 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57da:	6820      	ldr	r0, [r4, #0]
   d57dc:	b108      	cbz	r0, d57e2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d57de:	f7ff ffc9 	bl	d5774 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d57e2:	4620      	mov	r0, r4
   d57e4:	bd10      	pop	{r4, pc}

000d57e6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d57e6:	b538      	push	{r3, r4, r5, lr}
   d57e8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57ea:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d57ee:	b108      	cbz	r0, d57f4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d57f0:	f7fe fc55 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d57f4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d57f8:	b108      	cbz	r0, d57fe <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d57fa:	f7fe fed9 	bl	d45b0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57fe:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5802:	b135      	cbz	r5, d5812 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5804:	4628      	mov	r0, r5
   d5806:	f7ff ffd0 	bl	d57aa <_ZN6ThreadD1Ev>
   d580a:	2104      	movs	r1, #4
   d580c:	4628      	mov	r0, r5
   d580e:	f000 fc7c 	bl	d610a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5812:	6820      	ldr	r0, [r4, #0]
   d5814:	b108      	cbz	r0, d581a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5816:	f7ff ffc3 	bl	d57a0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d581a:	4620      	mov	r0, r4
   d581c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5820 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5820:	b510      	push	{r4, lr}
   d5822:	4b04      	ldr	r3, [pc, #16]	; (d5834 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5824:	4604      	mov	r4, r0
   d5826:	f840 3b08 	str.w	r3, [r0], #8
   d582a:	f7ff ffdc 	bl	d57e6 <_ZN5spark11MeshPublishD1Ev>
   d582e:	4620      	mov	r0, r4
   d5830:	bd10      	pop	{r4, pc}
   d5832:	bf00      	nop
   d5834:	000d6860 	.word	0x000d6860

000d5838 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5838:	b538      	push	{r3, r4, r5, lr}
   d583a:	4c0e      	ldr	r4, [pc, #56]	; (d5874 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d583c:	4b0e      	ldr	r3, [pc, #56]	; (d5878 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d583e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5840:	2500      	movs	r5, #0
   d5842:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5844:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5848:	6063      	str	r3, [r4, #4]
   d584a:	60a5      	str	r5, [r4, #8]
   d584c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5850:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5854:	f7fe fea4 	bl	d45a0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5858:	4b08      	ldr	r3, [pc, #32]	; (d587c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d585a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d585e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5862:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5864:	4620      	mov	r0, r4
   d5866:	4a06      	ldr	r2, [pc, #24]	; (d5880 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5868:	4906      	ldr	r1, [pc, #24]	; (d5884 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d586a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d586e:	f000 bc47 	b.w	d6100 <__aeabi_atexit>
   d5872:	bf00      	nop
   d5874:	2003e3dc 	.word	0x2003e3dc
   d5878:	000d6894 	.word	0x000d6894
   d587c:	000d6860 	.word	0x000d6860
   d5880:	2003e320 	.word	0x2003e320
   d5884:	000d5821 	.word	0x000d5821

000d5888 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5888:	2300      	movs	r3, #0
   d588a:	461a      	mov	r2, r3
   d588c:	6840      	ldr	r0, [r0, #4]
   d588e:	f7ff b80b 	b.w	d48a8 <network_connect>

000d5892 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5892:	2200      	movs	r2, #0
   d5894:	2102      	movs	r1, #2
   d5896:	6840      	ldr	r0, [r0, #4]
   d5898:	f7ff b816 	b.w	d48c8 <network_disconnect>

000d589c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d589c:	2200      	movs	r2, #0
   d589e:	4611      	mov	r1, r2
   d58a0:	6840      	ldr	r0, [r0, #4]
   d58a2:	f7ff b809 	b.w	d48b8 <network_connecting>

000d58a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d58a6:	2200      	movs	r2, #0
   d58a8:	4611      	mov	r1, r2
   d58aa:	6840      	ldr	r0, [r0, #4]
   d58ac:	f7ff b814 	b.w	d48d8 <network_ready>

000d58b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d58b0:	2300      	movs	r3, #0
   d58b2:	461a      	mov	r2, r3
   d58b4:	4619      	mov	r1, r3
   d58b6:	6840      	ldr	r0, [r0, #4]
   d58b8:	f7ff b816 	b.w	d48e8 <network_on>

000d58bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d58bc:	2300      	movs	r3, #0
   d58be:	461a      	mov	r2, r3
   d58c0:	4619      	mov	r1, r3
   d58c2:	6840      	ldr	r0, [r0, #4]
   d58c4:	f7ff b818 	b.w	d48f8 <network_off>

000d58c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d58c8:	2200      	movs	r2, #0
   d58ca:	f081 0101 	eor.w	r1, r1, #1
   d58ce:	6840      	ldr	r0, [r0, #4]
   d58d0:	f7ff b81a 	b.w	d4908 <network_listen>

000d58d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d58d4:	2200      	movs	r2, #0
   d58d6:	6840      	ldr	r0, [r0, #4]
   d58d8:	f7ff b826 	b.w	d4928 <network_set_listen_timeout>

000d58dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d58dc:	2200      	movs	r2, #0
   d58de:	4611      	mov	r1, r2
   d58e0:	6840      	ldr	r0, [r0, #4]
   d58e2:	f7ff b829 	b.w	d4938 <network_get_listen_timeout>

000d58e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d58e6:	2200      	movs	r2, #0
   d58e8:	4611      	mov	r1, r2
   d58ea:	6840      	ldr	r0, [r0, #4]
   d58ec:	f7ff b814 	b.w	d4918 <network_listening>

000d58f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d58f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d58f4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d58f6:	b095      	sub	sp, #84	; 0x54
   d58f8:	4616      	mov	r6, r2
   d58fa:	460d      	mov	r5, r1
   d58fc:	4607      	mov	r7, r0
    IPAddress addr;
   d58fe:	f7ff fec5 	bl	d568c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5902:	4621      	mov	r1, r4
   d5904:	2220      	movs	r2, #32
   d5906:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5908:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d590a:	f000 fda6 	bl	d645a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d590e:	2340      	movs	r3, #64	; 0x40
   d5910:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5912:	4621      	mov	r1, r4
   d5914:	466b      	mov	r3, sp
   d5916:	aa0c      	add	r2, sp, #48	; 0x30
   d5918:	4630      	mov	r0, r6
   d591a:	f7fe fee9 	bl	d46f0 <netdb_getaddrinfo>
    if (!r) {
   d591e:	4604      	mov	r4, r0
   d5920:	2800      	cmp	r0, #0
   d5922:	d144      	bne.n	d59ae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5924:	4602      	mov	r2, r0
   d5926:	2101      	movs	r1, #1
   d5928:	6868      	ldr	r0, [r5, #4]
   d592a:	f7fe ffd5 	bl	d48d8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d592e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5930:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5932:	4622      	mov	r2, r4
   d5934:	6868      	ldr	r0, [r5, #4]
   d5936:	f7fe ffcf 	bl	d48d8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d593a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d593c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d593e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5940:	2e00      	cmp	r6, #0
   d5942:	d034      	beq.n	d59ae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5944:	2900      	cmp	r1, #0
   d5946:	d132      	bne.n	d59ae <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5948:	6873      	ldr	r3, [r6, #4]
   d594a:	2b02      	cmp	r3, #2
   d594c:	d002      	beq.n	d5954 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d594e:	2b0a      	cmp	r3, #10
   d5950:	d009      	beq.n	d5966 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5952:	e02a      	b.n	d59aa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5954:	f1b8 0f00 	cmp.w	r8, #0
   d5958:	d027      	beq.n	d59aa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d595a:	6971      	ldr	r1, [r6, #20]
   d595c:	4638      	mov	r0, r7
   d595e:	3104      	adds	r1, #4
   d5960:	f7ff fec1 	bl	d56e6 <_ZN9IPAddressaSEPKh>
   d5964:	e020      	b.n	d59a8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5966:	f1b9 0f00 	cmp.w	r9, #0
   d596a:	d01e      	beq.n	d59aa <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d596c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d596e:	2211      	movs	r2, #17
   d5970:	a801      	add	r0, sp, #4
   d5972:	f000 fd72 	bl	d645a <memset>
                    a.v = 6;
   d5976:	2306      	movs	r3, #6
   d5978:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d597c:	ad01      	add	r5, sp, #4
   d597e:	f104 0308 	add.w	r3, r4, #8
   d5982:	3418      	adds	r4, #24
   d5984:	6818      	ldr	r0, [r3, #0]
   d5986:	6859      	ldr	r1, [r3, #4]
   d5988:	462a      	mov	r2, r5
   d598a:	c203      	stmia	r2!, {r0, r1}
   d598c:	3308      	adds	r3, #8
   d598e:	42a3      	cmp	r3, r4
   d5990:	4615      	mov	r5, r2
   d5992:	d1f7      	bne.n	d5984 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5994:	a901      	add	r1, sp, #4
   d5996:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5998:	ad07      	add	r5, sp, #28
   d599a:	f7ff fe85 	bl	d56a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d599e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59a0:	1d3c      	adds	r4, r7, #4
   d59a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59a4:	682b      	ldr	r3, [r5, #0]
   d59a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d59a8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d59aa:	69f6      	ldr	r6, [r6, #28]
   d59ac:	e7c8      	b.n	d5940 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d59ae:	9800      	ldr	r0, [sp, #0]
   d59b0:	f7fe fe96 	bl	d46e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d59b4:	4638      	mov	r0, r7
   d59b6:	b015      	add	sp, #84	; 0x54
   d59b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d59bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d59bc:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d59be:	4a03      	ldr	r2, [pc, #12]	; (d59cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d59c0:	601a      	str	r2, [r3, #0]
   d59c2:	2200      	movs	r2, #0
   d59c4:	605a      	str	r2, [r3, #4]
   d59c6:	4770      	bx	lr
   d59c8:	2003e5b0 	.word	0x2003e5b0
   d59cc:	000d6894 	.word	0x000d6894

000d59d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d59d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59d2:	4606      	mov	r6, r0
   d59d4:	460d      	mov	r5, r1
   d59d6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d59d8:	2400      	movs	r4, #0
  while (size--) {
   d59da:	42bd      	cmp	r5, r7
   d59dc:	d00c      	beq.n	d59f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d59de:	6833      	ldr	r3, [r6, #0]
   d59e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d59e4:	689b      	ldr	r3, [r3, #8]
   d59e6:	4630      	mov	r0, r6
   d59e8:	4798      	blx	r3
     if (chunk>=0)
   d59ea:	2800      	cmp	r0, #0
   d59ec:	db01      	blt.n	d59f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d59ee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d59f0:	e7f3      	b.n	d59da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d59f2:	2c00      	cmp	r4, #0
   d59f4:	bf08      	it	eq
   d59f6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d59f8:	4620      	mov	r0, r4
   d59fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59fc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d59fc:	b570      	push	{r4, r5, r6, lr}
   d59fe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5a00:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5a02:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5a04:	b149      	cbz	r1, d5a1a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5a06:	f000 fd61 	bl	d64cc <strlen>
   d5a0a:	682b      	ldr	r3, [r5, #0]
   d5a0c:	4602      	mov	r2, r0
   d5a0e:	4621      	mov	r1, r4
   d5a10:	4628      	mov	r0, r5
   d5a12:	68db      	ldr	r3, [r3, #12]
    }
   d5a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5a18:	4718      	bx	r3
    }
   d5a1a:	bd70      	pop	{r4, r5, r6, pc}

000d5a1c <_ZN5Print5printEPKc>:
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	f7ff ffed 	bl	d59fc <_ZN5Print5writeEPKc>
   d5a22:	bd08      	pop	{r3, pc}

000d5a24 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5a24:	6803      	ldr	r3, [r0, #0]
   d5a26:	689b      	ldr	r3, [r3, #8]
   d5a28:	4718      	bx	r3

000d5a2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5a2a:	b530      	push	{r4, r5, lr}
   d5a2c:	b08b      	sub	sp, #44	; 0x2c
   d5a2e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5a30:	2100      	movs	r1, #0
   d5a32:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5a36:	2a01      	cmp	r2, #1
   d5a38:	bf98      	it	ls
   d5a3a:	220a      	movls	r2, #10
   d5a3c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5a40:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5a44:	fb05 3312 	mls	r3, r5, r2, r3
   d5a48:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5a4c:	2b09      	cmp	r3, #9
   d5a4e:	bf94      	ite	ls
   d5a50:	3330      	addls	r3, #48	; 0x30
   d5a52:	3337      	addhi	r3, #55	; 0x37
   d5a54:	b2db      	uxtb	r3, r3
   d5a56:	4621      	mov	r1, r4
   d5a58:	f804 3901 	strb.w	r3, [r4], #-1
   d5a5c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5a5e:	2d00      	cmp	r5, #0
   d5a60:	d1ee      	bne.n	d5a40 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5a62:	f7ff ffcb 	bl	d59fc <_ZN5Print5writeEPKc>
}
   d5a66:	b00b      	add	sp, #44	; 0x2c
   d5a68:	bd30      	pop	{r4, r5, pc}

000d5a6a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5a6a:	b510      	push	{r4, lr}
   d5a6c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a6e:	f7ff fd49 	bl	d5504 <_ZNSt14_Function_baseD1Ev>
   d5a72:	4620      	mov	r0, r4
   d5a74:	bd10      	pop	{r4, pc}
	...

000d5a78 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a78:	4803      	ldr	r0, [pc, #12]	; (d5a88 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5a7a:	4a04      	ldr	r2, [pc, #16]	; (d5a8c <_GLOBAL__sub_I_RGB+0x14>)
   d5a7c:	4904      	ldr	r1, [pc, #16]	; (d5a90 <_GLOBAL__sub_I_RGB+0x18>)
   d5a7e:	2300      	movs	r3, #0
   d5a80:	6083      	str	r3, [r0, #8]
   d5a82:	f000 bb3d 	b.w	d6100 <__aeabi_atexit>
   d5a86:	bf00      	nop
   d5a88:	2003e5b8 	.word	0x2003e5b8
   d5a8c:	2003e320 	.word	0x2003e320
   d5a90:	000d5a6b 	.word	0x000d5a6b

000d5a94 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5a94:	4770      	bx	lr

000d5a96 <_ZN8SPIClassD0Ev>:
   d5a96:	b510      	push	{r4, lr}
   d5a98:	210c      	movs	r1, #12
   d5a9a:	4604      	mov	r4, r0
   d5a9c:	f000 fb35 	bl	d610a <_ZdlPvj>
   d5aa0:	4620      	mov	r0, r4
   d5aa2:	bd10      	pop	{r4, pc}

000d5aa4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5aa4:	b510      	push	{r4, lr}
   d5aa6:	4b05      	ldr	r3, [pc, #20]	; (d5abc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5aa8:	6003      	str	r3, [r0, #0]
   d5aaa:	4604      	mov	r4, r0
{
    _spi = spi;
   d5aac:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d5aae:	4608      	mov	r0, r1
   d5ab0:	f7fe fe26 	bl	d4700 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5ab4:	2300      	movs	r3, #0
   d5ab6:	60a3      	str	r3, [r4, #8]
}
   d5ab8:	4620      	mov	r0, r4
   d5aba:	bd10      	pop	{r4, pc}
   d5abc:	000d68c8 	.word	0x000d68c8

000d5ac0 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5ac0:	7900      	ldrb	r0, [r0, #4]
   d5ac2:	f7fe be25 	b.w	d4710 <HAL_SPI_Is_Enabled>

000d5ac6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5ac6:	b510      	push	{r4, lr}
   d5ac8:	4604      	mov	r4, r0
{
	free(buffer);
   d5aca:	6800      	ldr	r0, [r0, #0]
   d5acc:	f7fe ff44 	bl	d4958 <free>
}
   d5ad0:	4620      	mov	r0, r4
   d5ad2:	bd10      	pop	{r4, pc}

000d5ad4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5ad4:	b510      	push	{r4, lr}
   d5ad6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5ad8:	6800      	ldr	r0, [r0, #0]
   d5ada:	b108      	cbz	r0, d5ae0 <_ZN6String10invalidateEv+0xc>
   d5adc:	f7fe ff3c 	bl	d4958 <free>
	buffer = NULL;
   d5ae0:	2300      	movs	r3, #0
   d5ae2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5ae4:	60a3      	str	r3, [r4, #8]
   d5ae6:	6063      	str	r3, [r4, #4]
   d5ae8:	bd10      	pop	{r4, pc}

000d5aea <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5aea:	b538      	push	{r3, r4, r5, lr}
   d5aec:	4604      	mov	r4, r0
   d5aee:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5af0:	6800      	ldr	r0, [r0, #0]
   d5af2:	3101      	adds	r1, #1
   d5af4:	f7fe ff38 	bl	d4968 <realloc>
	if (newbuffer) {
   d5af8:	b110      	cbz	r0, d5b00 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5afa:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5afe:	2001      	movs	r0, #1
	}
	return 0;
}
   d5b00:	bd38      	pop	{r3, r4, r5, pc}

000d5b02 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5b02:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5b04:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5b06:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5b08:	b113      	cbz	r3, d5b10 <_ZN6String7reserveEj+0xe>
   d5b0a:	6843      	ldr	r3, [r0, #4]
   d5b0c:	428b      	cmp	r3, r1
   d5b0e:	d207      	bcs.n	d5b20 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5b10:	4620      	mov	r0, r4
   d5b12:	f7ff ffea 	bl	d5aea <_ZN6String12changeBufferEj>
   d5b16:	b120      	cbz	r0, d5b22 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5b18:	68a3      	ldr	r3, [r4, #8]
   d5b1a:	b90b      	cbnz	r3, d5b20 <_ZN6String7reserveEj+0x1e>
   d5b1c:	6822      	ldr	r2, [r4, #0]
   d5b1e:	7013      	strb	r3, [r2, #0]
   d5b20:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5b22:	bd10      	pop	{r4, pc}

000d5b24 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5b24:	b570      	push	{r4, r5, r6, lr}
   d5b26:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5b28:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5b2a:	4604      	mov	r4, r0
   d5b2c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5b2e:	f7ff ffe8 	bl	d5b02 <_ZN6String7reserveEj>
   d5b32:	b918      	cbnz	r0, d5b3c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5b34:	4620      	mov	r0, r4
   d5b36:	f7ff ffcd 	bl	d5ad4 <_ZN6String10invalidateEv>
		return *this;
   d5b3a:	e009      	b.n	d5b50 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5b3c:	462a      	mov	r2, r5
   d5b3e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5b40:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5b42:	6820      	ldr	r0, [r4, #0]
   d5b44:	f000 fc63 	bl	d640e <memcpy>
	buffer[len] = 0;
   d5b48:	6822      	ldr	r2, [r4, #0]
   d5b4a:	68a3      	ldr	r3, [r4, #8]
   d5b4c:	2100      	movs	r1, #0
   d5b4e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5b50:	4620      	mov	r0, r4
   d5b52:	bd70      	pop	{r4, r5, r6, pc}

000d5b54 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5b54:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b56:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5b58:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5b5a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5b5c:	6043      	str	r3, [r0, #4]
	len = 0;
   d5b5e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5b60:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5b62:	460d      	mov	r5, r1
   d5b64:	b139      	cbz	r1, d5b76 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5b66:	4608      	mov	r0, r1
   d5b68:	f000 fcb0 	bl	d64cc <strlen>
   d5b6c:	4629      	mov	r1, r5
   d5b6e:	4602      	mov	r2, r0
   d5b70:	4620      	mov	r0, r4
   d5b72:	f7ff ffd7 	bl	d5b24 <_ZN6String4copyEPKcj>
}
   d5b76:	4620      	mov	r0, r4
   d5b78:	bd38      	pop	{r3, r4, r5, pc}

000d5b7a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5b7a:	b510      	push	{r4, lr}
   d5b7c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5b7e:	6800      	ldr	r0, [r0, #0]
   d5b80:	b118      	cbz	r0, d5b8a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5b82:	f7fe fee9 	bl	d4958 <free>
            wakeupSource_ = nullptr;
   d5b86:	2300      	movs	r3, #0
   d5b88:	6023      	str	r3, [r4, #0]
   d5b8a:	bd10      	pop	{r4, pc}

000d5b8c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b8c:	b510      	push	{r4, lr}
   d5b8e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5b90:	f7ff fff3 	bl	d5b7a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b94:	4620      	mov	r0, r4
   d5b96:	bd10      	pop	{r4, pc}

000d5b98 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b98:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b9a:	4c09      	ldr	r4, [pc, #36]	; (d5bc0 <_GLOBAL__sub_I_System+0x28>)
   d5b9c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5ba2:	6020      	str	r0, [r4, #0]
   d5ba4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5ba6:	71a0      	strb	r0, [r4, #6]
   d5ba8:	8120      	strh	r0, [r4, #8]
   d5baa:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5bac:	f7fe fe48 	bl	d4840 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	4a04      	ldr	r2, [pc, #16]	; (d5bc4 <_GLOBAL__sub_I_System+0x2c>)
   d5bb4:	4904      	ldr	r1, [pc, #16]	; (d5bc8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5bba:	f000 baa1 	b.w	d6100 <__aeabi_atexit>
   d5bbe:	bf00      	nop
   d5bc0:	2003e5c8 	.word	0x2003e5c8
   d5bc4:	2003e320 	.word	0x2003e320
   d5bc8:	000d5b8d 	.word	0x000d5b8d

000d5bcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5bcc:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5bce:	681a      	ldr	r2, [r3, #0]
   d5bd0:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5bd2:	601a      	str	r2, [r3, #0]
   d5bd4:	4770      	bx	lr
   d5bd6:	bf00      	nop
   d5bd8:	2003e2b8 	.word	0x2003e2b8
   d5bdc:	2003e5d4 	.word	0x2003e5d4

000d5be0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5be0:	4770      	bx	lr

000d5be2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5be2:	7441      	strb	r1, [r0, #17]
   d5be4:	4770      	bx	lr

000d5be6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5be6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5be8:	7c00      	ldrb	r0, [r0, #16]
   d5bea:	f7fe fdd1 	bl	d4790 <HAL_USART_Available_Data_For_Write>
}
   d5bee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5bf2:	bd08      	pop	{r3, pc}

000d5bf4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5bf4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5bf6:	7c00      	ldrb	r0, [r0, #16]
   d5bf8:	f7fe fda2 	bl	d4740 <HAL_USART_Available_Data>
}
   d5bfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5c00:	bd08      	pop	{r3, pc}

000d5c02 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5c02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5c04:	7c00      	ldrb	r0, [r0, #16]
   d5c06:	f7fe fdab 	bl	d4760 <HAL_USART_Peek_Data>
}
   d5c0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c0e:	bf28      	it	cs
   d5c10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c14:	bd08      	pop	{r3, pc}

000d5c16 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5c16:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5c18:	7c00      	ldrb	r0, [r0, #16]
   d5c1a:	f7fe fd99 	bl	d4750 <HAL_USART_Read_Data>
}
   d5c1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c22:	bf28      	it	cs
   d5c24:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5c28:	bd08      	pop	{r3, pc}

000d5c2a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5c2a:	7c00      	ldrb	r0, [r0, #16]
   d5c2c:	f7fe bda0 	b.w	d4770 <HAL_USART_Flush_Data>

000d5c30 <_ZN11USARTSerialD0Ev>:
   d5c30:	b510      	push	{r4, lr}
   d5c32:	2114      	movs	r1, #20
   d5c34:	4604      	mov	r4, r0
   d5c36:	f000 fa68 	bl	d610a <_ZdlPvj>
   d5c3a:	4620      	mov	r0, r4
   d5c3c:	bd10      	pop	{r4, pc}

000d5c3e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5c3e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5c40:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5c42:	4604      	mov	r4, r0
   d5c44:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5c46:	b925      	cbnz	r5, d5c52 <_ZN11USARTSerial5writeEh+0x14>
   d5c48:	7c00      	ldrb	r0, [r0, #16]
   d5c4a:	f7fe fda1 	bl	d4790 <HAL_USART_Available_Data_For_Write>
   d5c4e:	2800      	cmp	r0, #0
   d5c50:	dd05      	ble.n	d5c5e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c52:	4631      	mov	r1, r6
   d5c54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5c5a:	f7fe bd69 	b.w	d4730 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5c5e:	4628      	mov	r0, r5
   d5c60:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5c64:	b510      	push	{r4, lr}
   d5c66:	4604      	mov	r4, r0
   d5c68:	4608      	mov	r0, r1
   d5c6a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5c6c:	2200      	movs	r2, #0
   d5c6e:	6062      	str	r2, [r4, #4]
   d5c70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c74:	60a2      	str	r2, [r4, #8]
   d5c76:	4a05      	ldr	r2, [pc, #20]	; (d5c8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5c78:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5c7a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5c7c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5c7e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5c80:	461a      	mov	r2, r3
   d5c82:	f7fe fd4d 	bl	d4720 <HAL_USART_Init>
}
   d5c86:	4620      	mov	r0, r4
   d5c88:	bd10      	pop	{r4, pc}
   d5c8a:	bf00      	nop
   d5c8c:	000d6904 	.word	0x000d6904

000d5c90 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5c90:	7c00      	ldrb	r0, [r0, #16]
   d5c92:	f7fe bd75 	b.w	d4780 <HAL_USART_Is_Enabled>
	...

000d5c98 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5c98:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5c9a:	4d0c      	ldr	r5, [pc, #48]	; (d5ccc <_Z22__fetch_global_Serial1v+0x34>)
   d5c9c:	6829      	ldr	r1, [r5, #0]
   d5c9e:	f011 0401 	ands.w	r4, r1, #1
   d5ca2:	d111      	bne.n	d5cc8 <_Z22__fetch_global_Serial1v+0x30>
   d5ca4:	4628      	mov	r0, r5
   d5ca6:	f7fe f9fc 	bl	d40a2 <__cxa_guard_acquire>
   d5caa:	b168      	cbz	r0, d5cc8 <_Z22__fetch_global_Serial1v+0x30>
   d5cac:	4a08      	ldr	r2, [pc, #32]	; (d5cd0 <_Z22__fetch_global_Serial1v+0x38>)
   d5cae:	4b09      	ldr	r3, [pc, #36]	; (d5cd4 <_Z22__fetch_global_Serial1v+0x3c>)
   d5cb0:	4809      	ldr	r0, [pc, #36]	; (d5cd8 <_Z22__fetch_global_Serial1v+0x40>)
   d5cb2:	4621      	mov	r1, r4
   d5cb4:	f7ff ffd6 	bl	d5c64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5cb8:	4628      	mov	r0, r5
   d5cba:	f7fe f9f7 	bl	d40ac <__cxa_guard_release>
   d5cbe:	4a07      	ldr	r2, [pc, #28]	; (d5cdc <_Z22__fetch_global_Serial1v+0x44>)
   d5cc0:	4907      	ldr	r1, [pc, #28]	; (d5ce0 <_Z22__fetch_global_Serial1v+0x48>)
   d5cc2:	4805      	ldr	r0, [pc, #20]	; (d5cd8 <_Z22__fetch_global_Serial1v+0x40>)
   d5cc4:	f000 fa1c 	bl	d6100 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5cc8:	4803      	ldr	r0, [pc, #12]	; (d5cd8 <_Z22__fetch_global_Serial1v+0x40>)
   d5cca:	bd38      	pop	{r3, r4, r5, pc}
   d5ccc:	2003e670 	.word	0x2003e670
   d5cd0:	2003e674 	.word	0x2003e674
   d5cd4:	2003e5ec 	.word	0x2003e5ec
   d5cd8:	2003e5d8 	.word	0x2003e5d8
   d5cdc:	2003e320 	.word	0x2003e320
   d5ce0:	000d5be1 	.word	0x000d5be1

000d5ce4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ce4:	7441      	strb	r1, [r0, #17]
   d5ce6:	4770      	bx	lr

000d5ce8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ce8:	4770      	bx	lr

000d5cea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5cea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5cec:	2100      	movs	r1, #0
   d5cee:	7c00      	ldrb	r0, [r0, #16]
   d5cf0:	f7fe fd76 	bl	d47e0 <HAL_USB_USART_Receive_Data>
}
   d5cf4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cf8:	bf28      	it	cs
   d5cfa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5cfe:	bd08      	pop	{r3, pc}

000d5d00 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5d00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5d02:	2101      	movs	r1, #1
   d5d04:	7c00      	ldrb	r0, [r0, #16]
   d5d06:	f7fe fd6b 	bl	d47e0 <HAL_USB_USART_Receive_Data>
}
   d5d0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5d0e:	bf28      	it	cs
   d5d10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5d14:	bd08      	pop	{r3, pc}

000d5d16 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5d16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5d18:	7c00      	ldrb	r0, [r0, #16]
   d5d1a:	f7fe fd59 	bl	d47d0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5d1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d22:	bd08      	pop	{r3, pc}

000d5d24 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5d24:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5d26:	7c00      	ldrb	r0, [r0, #16]
   d5d28:	f7fe fd4a 	bl	d47c0 <HAL_USB_USART_Available_Data>
}
   d5d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5d30:	bd08      	pop	{r3, pc}

000d5d32 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5d32:	7c00      	ldrb	r0, [r0, #16]
   d5d34:	f7fe bd64 	b.w	d4800 <HAL_USB_USART_Flush_Data>

000d5d38 <_ZN9USBSerialD0Ev>:
   d5d38:	b510      	push	{r4, lr}
   d5d3a:	2114      	movs	r1, #20
   d5d3c:	4604      	mov	r4, r0
   d5d3e:	f000 f9e4 	bl	d610a <_ZdlPvj>
   d5d42:	4620      	mov	r0, r4
   d5d44:	bd10      	pop	{r4, pc}

000d5d46 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d46:	b538      	push	{r3, r4, r5, lr}
   d5d48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d4a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d4e:	f7fe fd3f 	bl	d47d0 <HAL_USB_USART_Available_Data_For_Write>
   d5d52:	2800      	cmp	r0, #0
   d5d54:	dc01      	bgt.n	d5d5a <_ZN9USBSerial5writeEh+0x14>
   d5d56:	7c60      	ldrb	r0, [r4, #17]
   d5d58:	b128      	cbz	r0, d5d66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5d5a:	4629      	mov	r1, r5
   d5d5c:	7c20      	ldrb	r0, [r4, #16]
   d5d5e:	f7fe fd47 	bl	d47f0 <HAL_USB_USART_Send_Data>
   d5d62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5d66:	bd38      	pop	{r3, r4, r5, pc}

000d5d68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d68:	b510      	push	{r4, lr}
   d5d6a:	4604      	mov	r4, r0
   d5d6c:	2300      	movs	r3, #0
   d5d6e:	6063      	str	r3, [r4, #4]
   d5d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d74:	60a3      	str	r3, [r4, #8]
   d5d76:	4b05      	ldr	r3, [pc, #20]	; (d5d8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5d78:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5d7a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d7c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5d7e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5d80:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5d82:	4611      	mov	r1, r2
   d5d84:	f7fe fd0c 	bl	d47a0 <HAL_USB_USART_Init>
}
   d5d88:	4620      	mov	r0, r4
   d5d8a:	bd10      	pop	{r4, pc}
   d5d8c:	000d6934 	.word	0x000d6934

000d5d90 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5d90:	2200      	movs	r2, #0
   d5d92:	7c00      	ldrb	r0, [r0, #16]
   d5d94:	f7fe bd0c 	b.w	d47b0 <HAL_USB_USART_Begin>

000d5d98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5d9a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d9c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5d9e:	2100      	movs	r1, #0
   d5da0:	f000 fb5b 	bl	d645a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5da4:	4620      	mov	r0, r4
   d5da6:	bd10      	pop	{r4, pc}

000d5da8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5da8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5daa:	4d0e      	ldr	r5, [pc, #56]	; (d5de4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5dac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5dae:	a801      	add	r0, sp, #4
   d5db0:	f7ff fff2 	bl	d5d98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5db4:	6829      	ldr	r1, [r5, #0]
   d5db6:	f011 0401 	ands.w	r4, r1, #1
   d5dba:	d110      	bne.n	d5dde <_Z16_fetch_usbserialv+0x36>
   d5dbc:	4628      	mov	r0, r5
   d5dbe:	f7fe f970 	bl	d40a2 <__cxa_guard_acquire>
   d5dc2:	b160      	cbz	r0, d5dde <_Z16_fetch_usbserialv+0x36>
   d5dc4:	aa01      	add	r2, sp, #4
   d5dc6:	4621      	mov	r1, r4
   d5dc8:	4807      	ldr	r0, [pc, #28]	; (d5de8 <_Z16_fetch_usbserialv+0x40>)
   d5dca:	f7ff ffcd 	bl	d5d68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5dce:	4628      	mov	r0, r5
   d5dd0:	f7fe f96c 	bl	d40ac <__cxa_guard_release>
   d5dd4:	4a05      	ldr	r2, [pc, #20]	; (d5dec <_Z16_fetch_usbserialv+0x44>)
   d5dd6:	4906      	ldr	r1, [pc, #24]	; (d5df0 <_Z16_fetch_usbserialv+0x48>)
   d5dd8:	4803      	ldr	r0, [pc, #12]	; (d5de8 <_Z16_fetch_usbserialv+0x40>)
   d5dda:	f000 f991 	bl	d6100 <__aeabi_atexit>
	return _usbserial;
}
   d5dde:	4802      	ldr	r0, [pc, #8]	; (d5de8 <_Z16_fetch_usbserialv+0x40>)
   d5de0:	b007      	add	sp, #28
   d5de2:	bd30      	pop	{r4, r5, pc}
   d5de4:	2003e6f8 	.word	0x2003e6f8
   d5de8:	2003e6fc 	.word	0x2003e6fc
   d5dec:	2003e320 	.word	0x2003e320
   d5df0:	000d5ce9 	.word	0x000d5ce9

000d5df4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5df4:	2200      	movs	r2, #0
   d5df6:	4611      	mov	r1, r2
   d5df8:	6840      	ldr	r0, [r0, #4]
   d5dfa:	f7fe bd6d 	b.w	d48d8 <network_ready>

000d5dfe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5dfe:	2200      	movs	r2, #0
   d5e00:	4611      	mov	r1, r2
   d5e02:	6840      	ldr	r0, [r0, #4]
   d5e04:	f7fe bd88 	b.w	d4918 <network_listening>

000d5e08 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5e08:	2200      	movs	r2, #0
   d5e0a:	4611      	mov	r1, r2
   d5e0c:	6840      	ldr	r0, [r0, #4]
   d5e0e:	f7fe bd93 	b.w	d4938 <network_get_listen_timeout>

000d5e12 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5e12:	2200      	movs	r2, #0
   d5e14:	6840      	ldr	r0, [r0, #4]
   d5e16:	f7fe bd87 	b.w	d4928 <network_set_listen_timeout>

000d5e1a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5e1a:	2200      	movs	r2, #0
   d5e1c:	f081 0101 	eor.w	r1, r1, #1
   d5e20:	6840      	ldr	r0, [r0, #4]
   d5e22:	f7fe bd71 	b.w	d4908 <network_listen>

000d5e26 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5e26:	2300      	movs	r3, #0
   d5e28:	461a      	mov	r2, r3
   d5e2a:	4619      	mov	r1, r3
   d5e2c:	6840      	ldr	r0, [r0, #4]
   d5e2e:	f7fe bd63 	b.w	d48f8 <network_off>

000d5e32 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e32:	2300      	movs	r3, #0
   d5e34:	461a      	mov	r2, r3
   d5e36:	4619      	mov	r1, r3
   d5e38:	6840      	ldr	r0, [r0, #4]
   d5e3a:	f7fe bd55 	b.w	d48e8 <network_on>

000d5e3e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e3e:	2200      	movs	r2, #0
   d5e40:	4611      	mov	r1, r2
   d5e42:	6840      	ldr	r0, [r0, #4]
   d5e44:	f7fe bd38 	b.w	d48b8 <network_connecting>

000d5e48 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e48:	2200      	movs	r2, #0
   d5e4a:	2102      	movs	r1, #2
   d5e4c:	6840      	ldr	r0, [r0, #4]
   d5e4e:	f7fe bd3b 	b.w	d48c8 <network_disconnect>

000d5e52 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e52:	2300      	movs	r3, #0
   d5e54:	461a      	mov	r2, r3
   d5e56:	6840      	ldr	r0, [r0, #4]
   d5e58:	f7fe bd26 	b.w	d48a8 <network_connect>

000d5e5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5e5c:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5e5e:	2204      	movs	r2, #4
   d5e60:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5e62:	4a02      	ldr	r2, [pc, #8]	; (d5e6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5e64:	601a      	str	r2, [r3, #0]
   d5e66:	4770      	bx	lr
   d5e68:	2003e710 	.word	0x2003e710
   d5e6c:	000d6964 	.word	0x000d6964

000d5e70 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5e70:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5e72:	4b0c      	ldr	r3, [pc, #48]	; (d5ea4 <serialEventRun+0x34>)
   d5e74:	b133      	cbz	r3, d5e84 <serialEventRun+0x14>
   d5e76:	f7ff ff97 	bl	d5da8 <_Z16_fetch_usbserialv>
   d5e7a:	6803      	ldr	r3, [r0, #0]
   d5e7c:	691b      	ldr	r3, [r3, #16]
   d5e7e:	4798      	blx	r3
   d5e80:	2800      	cmp	r0, #0
   d5e82:	dc09      	bgt.n	d5e98 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5e84:	4b08      	ldr	r3, [pc, #32]	; (d5ea8 <serialEventRun+0x38>)
   d5e86:	b163      	cbz	r3, d5ea2 <serialEventRun+0x32>
   d5e88:	f7ff ff06 	bl	d5c98 <_Z22__fetch_global_Serial1v>
   d5e8c:	6803      	ldr	r3, [r0, #0]
   d5e8e:	691b      	ldr	r3, [r3, #16]
   d5e90:	4798      	blx	r3
   d5e92:	2800      	cmp	r0, #0
   d5e94:	dc03      	bgt.n	d5e9e <serialEventRun+0x2e>
   d5e96:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5e98:	f3af 8000 	nop.w
   d5e9c:	e7f2      	b.n	d5e84 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5e9e:	f3af 8000 	nop.w
   d5ea2:	bd08      	pop	{r3, pc}
	...

000d5eac <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5eac:	b508      	push	{r3, lr}
	serialEventRun();
   d5eae:	f7ff ffdf 	bl	d5e70 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5eb2:	f7fe fba5 	bl	d4600 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5eb6:	4b01      	ldr	r3, [pc, #4]	; (d5ebc <_post_loop+0x10>)
   d5eb8:	6018      	str	r0, [r3, #0]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	2003e720 	.word	0x2003e720

000d5ec0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5ec0:	4802      	ldr	r0, [pc, #8]	; (d5ecc <_Z33system_initialize_user_backup_ramv+0xc>)
   d5ec2:	4a03      	ldr	r2, [pc, #12]	; (d5ed0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5ec4:	4903      	ldr	r1, [pc, #12]	; (d5ed4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5ec6:	1a12      	subs	r2, r2, r0
   d5ec8:	f000 baa1 	b.w	d640e <memcpy>
   d5ecc:	2003f400 	.word	0x2003f400
   d5ed0:	2003f404 	.word	0x2003f404
   d5ed4:	000d6a30 	.word	0x000d6a30

000d5ed8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5ed8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5eda:	2300      	movs	r3, #0
   d5edc:	9300      	str	r3, [sp, #0]
   d5ede:	461a      	mov	r2, r3
   d5ee0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5ee4:	f7fe fcce 	bl	d4884 <system_ctrl_set_result>
}
   d5ee8:	b003      	add	sp, #12
   d5eea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5ef0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5ef0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5ef2:	8843      	ldrh	r3, [r0, #2]
   d5ef4:	2b0a      	cmp	r3, #10
   d5ef6:	d008      	beq.n	d5f0a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5ef8:	2b50      	cmp	r3, #80	; 0x50
   d5efa:	d109      	bne.n	d5f10 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5efc:	4b09      	ldr	r3, [pc, #36]	; (d5f24 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5efe:	681b      	ldr	r3, [r3, #0]
   d5f00:	b13b      	cbz	r3, d5f12 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5f02:	b003      	add	sp, #12
   d5f04:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5f08:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5f0a:	f7ff ffe5 	bl	d5ed8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5f0e:	e006      	b.n	d5f1e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f10:	2300      	movs	r3, #0
   d5f12:	9300      	str	r3, [sp, #0]
   d5f14:	461a      	mov	r2, r3
   d5f16:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f1a:	f7fe fcb3 	bl	d4884 <system_ctrl_set_result>
        break;
    }
}
   d5f1e:	b003      	add	sp, #12
   d5f20:	f85d fb04 	ldr.w	pc, [sp], #4
   d5f24:	2003e718 	.word	0x2003e718

000d5f28 <module_user_init_hook>:

void module_user_init_hook()
{
   d5f28:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f2a:	4c10      	ldr	r4, [pc, #64]	; (d5f6c <module_user_init_hook+0x44>)
   d5f2c:	4d10      	ldr	r5, [pc, #64]	; (d5f70 <module_user_init_hook+0x48>)
   d5f2e:	6823      	ldr	r3, [r4, #0]
   d5f30:	42ab      	cmp	r3, r5
   d5f32:	4b10      	ldr	r3, [pc, #64]	; (d5f74 <module_user_init_hook+0x4c>)
   d5f34:	bf0c      	ite	eq
   d5f36:	2201      	moveq	r2, #1
   d5f38:	2200      	movne	r2, #0
   d5f3a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5f3c:	d002      	beq.n	d5f44 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5f3e:	f7ff ffbf 	bl	d5ec0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5f42:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f44:	f7fe fb4c 	bl	d45e0 <HAL_RNG_GetRandomNumber>
   d5f48:	4604      	mov	r4, r0
    srand(seed);
   d5f4a:	f000 fa8f 	bl	d646c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f4e:	4b0a      	ldr	r3, [pc, #40]	; (d5f78 <module_user_init_hook+0x50>)
   d5f50:	b113      	cbz	r3, d5f58 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5f52:	4620      	mov	r0, r4
   d5f54:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5f58:	2100      	movs	r1, #0
   d5f5a:	4807      	ldr	r0, [pc, #28]	; (d5f78 <module_user_init_hook+0x50>)
   d5f5c:	f7fe fc9c 	bl	d4898 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f60:	2100      	movs	r1, #0
   d5f62:	4806      	ldr	r0, [pc, #24]	; (d5f7c <module_user_init_hook+0x54>)
}
   d5f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f68:	f7fe bc82 	b.w	d4870 <system_ctrl_set_app_request_handler>
   d5f6c:	2003f400 	.word	0x2003f400
   d5f70:	9a271c1e 	.word	0x9a271c1e
   d5f74:	2003e71c 	.word	0x2003e71c
   d5f78:	00000000 	.word	0x00000000
   d5f7c:	000d5ef1 	.word	0x000d5ef1

000d5f80 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5f80:	b510      	push	{r4, lr}
   d5f82:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5f84:	f000 f89c 	bl	d60c0 <_ZN8particle7globals11instanceSpiEv>
   d5f88:	f7ff fd9a 	bl	d5ac0 <_ZN8SPIClass9isEnabledEv>
   d5f8c:	b128      	cbz	r0, d5f9a <pinAvailable+0x1a>
   d5f8e:	f1a4 030b 	sub.w	r3, r4, #11
   d5f92:	2b02      	cmp	r3, #2
   d5f94:	d801      	bhi.n	d5f9a <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5f96:	2000      	movs	r0, #0
   d5f98:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5f9a:	f000 f86b 	bl	d6074 <_Z19__fetch_global_Wirev>
   d5f9e:	f7ff fb37 	bl	d5610 <_ZN7TwoWire9isEnabledEv>
   d5fa2:	b108      	cbz	r0, d5fa8 <pinAvailable+0x28>
   d5fa4:	2c01      	cmp	r4, #1
   d5fa6:	d9f6      	bls.n	d5f96 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5fa8:	f7ff fe76 	bl	d5c98 <_Z22__fetch_global_Serial1v>
   d5fac:	f7ff fe70 	bl	d5c90 <_ZN11USARTSerial9isEnabledEv>
   d5fb0:	b118      	cbz	r0, d5fba <pinAvailable+0x3a>
   d5fb2:	f1a4 0309 	sub.w	r3, r4, #9
   d5fb6:	2b01      	cmp	r3, #1
   d5fb8:	d9ed      	bls.n	d5f96 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5fba:	2c23      	cmp	r4, #35	; 0x23
   d5fbc:	bf8c      	ite	hi
   d5fbe:	2000      	movhi	r0, #0
   d5fc0:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5fc2:	bd10      	pop	{r4, pc}

000d5fc4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5fc4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5fc6:	b538      	push	{r3, r4, r5, lr}
   d5fc8:	4604      	mov	r4, r0
   d5fca:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5fcc:	d80a      	bhi.n	d5fe4 <pinMode+0x20>
   d5fce:	29ff      	cmp	r1, #255	; 0xff
   d5fd0:	d008      	beq.n	d5fe4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5fd2:	f7ff ffd5 	bl	d5f80 <pinAvailable>
   d5fd6:	b128      	cbz	r0, d5fe4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5fd8:	4629      	mov	r1, r5
   d5fda:	4620      	mov	r0, r4
}
   d5fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5fe0:	f7fe bb1e 	b.w	d4620 <HAL_Pin_Mode>
   d5fe4:	bd38      	pop	{r3, r4, r5, pc}

000d5fe6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5fe6:	b538      	push	{r3, r4, r5, lr}
   d5fe8:	4604      	mov	r4, r0
   d5fea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5fec:	f7fe fb20 	bl	d4630 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5ff0:	28ff      	cmp	r0, #255	; 0xff
   d5ff2:	d010      	beq.n	d6016 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5ff4:	2806      	cmp	r0, #6
   d5ff6:	d804      	bhi.n	d6002 <digitalWrite+0x1c>
   d5ff8:	234d      	movs	r3, #77	; 0x4d
   d5ffa:	fa23 f000 	lsr.w	r0, r3, r0
   d5ffe:	07c3      	lsls	r3, r0, #31
   d6000:	d409      	bmi.n	d6016 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6002:	4620      	mov	r0, r4
   d6004:	f7ff ffbc 	bl	d5f80 <pinAvailable>
   d6008:	b128      	cbz	r0, d6016 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d600a:	4629      	mov	r1, r5
   d600c:	4620      	mov	r0, r4
}
   d600e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6012:	f7fe bb15 	b.w	d4640 <HAL_GPIO_Write>
   d6016:	bd38      	pop	{r3, r4, r5, pc}

000d6018 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6018:	b510      	push	{r4, lr}
   d601a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d601c:	f7fe fb08 	bl	d4630 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6020:	3804      	subs	r0, #4
   d6022:	b2c0      	uxtb	r0, r0
   d6024:	2801      	cmp	r0, #1
   d6026:	d908      	bls.n	d603a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6028:	4620      	mov	r0, r4
   d602a:	f7ff ffa9 	bl	d5f80 <pinAvailable>
   d602e:	b120      	cbz	r0, d603a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6030:	4620      	mov	r0, r4
}
   d6032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6036:	f7fe bb0b 	b.w	d4650 <HAL_GPIO_Read>
}
   d603a:	2000      	movs	r0, #0
   d603c:	bd10      	pop	{r4, pc}
	...

000d6040 <_Z17acquireWireBufferv>:
   d6040:	b570      	push	{r4, r5, r6, lr}
   d6042:	4604      	mov	r4, r0
   d6044:	2514      	movs	r5, #20
   d6046:	462a      	mov	r2, r5
   d6048:	4e09      	ldr	r6, [pc, #36]	; (d6070 <_Z17acquireWireBufferv+0x30>)
   d604a:	2100      	movs	r1, #0
   d604c:	f000 fa05 	bl	d645a <memset>
   d6050:	8025      	strh	r5, [r4, #0]
   d6052:	2520      	movs	r5, #32
   d6054:	4631      	mov	r1, r6
   d6056:	60a5      	str	r5, [r4, #8]
   d6058:	6125      	str	r5, [r4, #16]
   d605a:	4628      	mov	r0, r5
   d605c:	f000 f86f 	bl	d613e <_ZnajRKSt9nothrow_t>
   d6060:	4631      	mov	r1, r6
   d6062:	6060      	str	r0, [r4, #4]
   d6064:	4628      	mov	r0, r5
   d6066:	f000 f86a 	bl	d613e <_ZnajRKSt9nothrow_t>
   d606a:	60e0      	str	r0, [r4, #12]
   d606c:	4620      	mov	r0, r4
   d606e:	bd70      	pop	{r4, r5, r6, pc}
   d6070:	000d6990 	.word	0x000d6990

000d6074 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6074:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6076:	4d0e      	ldr	r5, [pc, #56]	; (d60b0 <_Z19__fetch_global_Wirev+0x3c>)
   d6078:	6829      	ldr	r1, [r5, #0]
   d607a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d607e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6080:	d113      	bne.n	d60aa <_Z19__fetch_global_Wirev+0x36>
   d6082:	4628      	mov	r0, r5
   d6084:	f7fe f80d 	bl	d40a2 <__cxa_guard_acquire>
   d6088:	b178      	cbz	r0, d60aa <_Z19__fetch_global_Wirev+0x36>
   d608a:	a801      	add	r0, sp, #4
   d608c:	f7ff ffd8 	bl	d6040 <_Z17acquireWireBufferv>
   d6090:	aa01      	add	r2, sp, #4
   d6092:	4621      	mov	r1, r4
   d6094:	4807      	ldr	r0, [pc, #28]	; (d60b4 <_Z19__fetch_global_Wirev+0x40>)
   d6096:	f7ff faa9 	bl	d55ec <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d609a:	4628      	mov	r0, r5
   d609c:	f7fe f806 	bl	d40ac <__cxa_guard_release>
   d60a0:	4a05      	ldr	r2, [pc, #20]	; (d60b8 <_Z19__fetch_global_Wirev+0x44>)
   d60a2:	4906      	ldr	r1, [pc, #24]	; (d60bc <_Z19__fetch_global_Wirev+0x48>)
   d60a4:	4803      	ldr	r0, [pc, #12]	; (d60b4 <_Z19__fetch_global_Wirev+0x40>)
   d60a6:	f000 f82b 	bl	d6100 <__aeabi_atexit>
	return wire;
}
   d60aa:	4802      	ldr	r0, [pc, #8]	; (d60b4 <_Z19__fetch_global_Wirev+0x40>)
   d60ac:	b007      	add	sp, #28
   d60ae:	bd30      	pop	{r4, r5, pc}
   d60b0:	2003e724 	.word	0x2003e724
   d60b4:	2003e728 	.word	0x2003e728
   d60b8:	2003e320 	.word	0x2003e320
   d60bc:	000d5595 	.word	0x000d5595

000d60c0 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d60c0:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d60c2:	4d0b      	ldr	r5, [pc, #44]	; (d60f0 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d60c4:	6829      	ldr	r1, [r5, #0]
   d60c6:	f011 0401 	ands.w	r4, r1, #1
   d60ca:	d10f      	bne.n	d60ec <_ZN8particle7globals11instanceSpiEv+0x2c>
   d60cc:	4628      	mov	r0, r5
   d60ce:	f7fd ffe8 	bl	d40a2 <__cxa_guard_acquire>
   d60d2:	b158      	cbz	r0, d60ec <_ZN8particle7globals11instanceSpiEv+0x2c>
   d60d4:	4621      	mov	r1, r4
   d60d6:	4807      	ldr	r0, [pc, #28]	; (d60f4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d60d8:	f7ff fce4 	bl	d5aa4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d60dc:	4628      	mov	r0, r5
   d60de:	f7fd ffe5 	bl	d40ac <__cxa_guard_release>
   d60e2:	4a05      	ldr	r2, [pc, #20]	; (d60f8 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d60e4:	4905      	ldr	r1, [pc, #20]	; (d60fc <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d60e6:	4803      	ldr	r0, [pc, #12]	; (d60f4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d60e8:	f000 f80a 	bl	d6100 <__aeabi_atexit>
    return instance;
}
   d60ec:	4801      	ldr	r0, [pc, #4]	; (d60f4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d60ee:	bd38      	pop	{r3, r4, r5, pc}
   d60f0:	2003e748 	.word	0x2003e748
   d60f4:	2003e73c 	.word	0x2003e73c
   d60f8:	2003e320 	.word	0x2003e320
   d60fc:	000d5a95 	.word	0x000d5a95

000d6100 <__aeabi_atexit>:
   d6100:	460b      	mov	r3, r1
   d6102:	4601      	mov	r1, r0
   d6104:	4618      	mov	r0, r3
   d6106:	f000 b965 	b.w	d63d4 <__cxa_atexit>

000d610a <_ZdlPvj>:
   d610a:	f7fd bfc6 	b.w	d409a <_ZdlPv>
	...

000d6110 <_ZSt15get_new_handlerv>:
   d6110:	4b02      	ldr	r3, [pc, #8]	; (d611c <_ZSt15get_new_handlerv+0xc>)
   d6112:	6818      	ldr	r0, [r3, #0]
   d6114:	f3bf 8f5f 	dmb	sy
   d6118:	4770      	bx	lr
   d611a:	bf00      	nop
   d611c:	2003e74c 	.word	0x2003e74c

000d6120 <_ZnwjRKSt9nothrow_t>:
   d6120:	b510      	push	{r4, lr}
   d6122:	2800      	cmp	r0, #0
   d6124:	bf14      	ite	ne
   d6126:	4604      	movne	r4, r0
   d6128:	2401      	moveq	r4, #1
   d612a:	4620      	mov	r0, r4
   d612c:	f7fe fc0c 	bl	d4948 <malloc>
   d6130:	b920      	cbnz	r0, d613c <_ZnwjRKSt9nothrow_t+0x1c>
   d6132:	f7ff ffed 	bl	d6110 <_ZSt15get_new_handlerv>
   d6136:	b108      	cbz	r0, d613c <_ZnwjRKSt9nothrow_t+0x1c>
   d6138:	4780      	blx	r0
   d613a:	e7f6      	b.n	d612a <_ZnwjRKSt9nothrow_t+0xa>
   d613c:	bd10      	pop	{r4, pc}

000d613e <_ZnajRKSt9nothrow_t>:
   d613e:	f7ff bfef 	b.w	d6120 <_ZnwjRKSt9nothrow_t>
	...

000d6144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6144:	4b24      	ldr	r3, [pc, #144]	; (d61d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6146:	681a      	ldr	r2, [r3, #0]
   d6148:	07d0      	lsls	r0, r2, #31
   d614a:	bf5c      	itt	pl
   d614c:	2201      	movpl	r2, #1
   d614e:	601a      	strpl	r2, [r3, #0]
   d6150:	4b22      	ldr	r3, [pc, #136]	; (d61dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6152:	681a      	ldr	r2, [r3, #0]
   d6154:	07d1      	lsls	r1, r2, #31
   d6156:	bf5c      	itt	pl
   d6158:	2201      	movpl	r2, #1
   d615a:	601a      	strpl	r2, [r3, #0]
   d615c:	4b20      	ldr	r3, [pc, #128]	; (d61e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d615e:	681a      	ldr	r2, [r3, #0]
   d6160:	07d2      	lsls	r2, r2, #31
   d6162:	bf5c      	itt	pl
   d6164:	2201      	movpl	r2, #1
   d6166:	601a      	strpl	r2, [r3, #0]
   d6168:	4b1e      	ldr	r3, [pc, #120]	; (d61e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d616a:	681a      	ldr	r2, [r3, #0]
   d616c:	07d0      	lsls	r0, r2, #31
   d616e:	bf5c      	itt	pl
   d6170:	2201      	movpl	r2, #1
   d6172:	601a      	strpl	r2, [r3, #0]
   d6174:	4b1c      	ldr	r3, [pc, #112]	; (d61e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6176:	681a      	ldr	r2, [r3, #0]
   d6178:	07d1      	lsls	r1, r2, #31
   d617a:	bf5c      	itt	pl
   d617c:	2201      	movpl	r2, #1
   d617e:	601a      	strpl	r2, [r3, #0]
   d6180:	4b1a      	ldr	r3, [pc, #104]	; (d61ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6182:	681a      	ldr	r2, [r3, #0]
   d6184:	07d2      	lsls	r2, r2, #31
   d6186:	bf5c      	itt	pl
   d6188:	2201      	movpl	r2, #1
   d618a:	601a      	strpl	r2, [r3, #0]
   d618c:	4b18      	ldr	r3, [pc, #96]	; (d61f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d618e:	681a      	ldr	r2, [r3, #0]
   d6190:	07d0      	lsls	r0, r2, #31
   d6192:	bf5c      	itt	pl
   d6194:	2201      	movpl	r2, #1
   d6196:	601a      	strpl	r2, [r3, #0]
   d6198:	4b16      	ldr	r3, [pc, #88]	; (d61f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d619a:	681a      	ldr	r2, [r3, #0]
   d619c:	07d1      	lsls	r1, r2, #31
   d619e:	bf5c      	itt	pl
   d61a0:	2201      	movpl	r2, #1
   d61a2:	601a      	strpl	r2, [r3, #0]
   d61a4:	4b14      	ldr	r3, [pc, #80]	; (d61f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d61a6:	681a      	ldr	r2, [r3, #0]
   d61a8:	07d2      	lsls	r2, r2, #31
   d61aa:	bf5c      	itt	pl
   d61ac:	2201      	movpl	r2, #1
   d61ae:	601a      	strpl	r2, [r3, #0]
   d61b0:	4b12      	ldr	r3, [pc, #72]	; (d61fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	07d0      	lsls	r0, r2, #31
   d61b6:	bf5c      	itt	pl
   d61b8:	2201      	movpl	r2, #1
   d61ba:	601a      	strpl	r2, [r3, #0]
   d61bc:	4b10      	ldr	r3, [pc, #64]	; (d6200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d61be:	681a      	ldr	r2, [r3, #0]
   d61c0:	07d1      	lsls	r1, r2, #31
   d61c2:	bf5c      	itt	pl
   d61c4:	2201      	movpl	r2, #1
   d61c6:	601a      	strpl	r2, [r3, #0]
   d61c8:	4b0e      	ldr	r3, [pc, #56]	; (d6204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d2      	lsls	r2, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4770      	bx	lr
   d61d6:	bf00      	nop
   d61d8:	2003e77c 	.word	0x2003e77c
   d61dc:	2003e778 	.word	0x2003e778
   d61e0:	2003e774 	.word	0x2003e774
   d61e4:	2003e770 	.word	0x2003e770
   d61e8:	2003e76c 	.word	0x2003e76c
   d61ec:	2003e768 	.word	0x2003e768
   d61f0:	2003e764 	.word	0x2003e764
   d61f4:	2003e760 	.word	0x2003e760
   d61f8:	2003e75c 	.word	0x2003e75c
   d61fc:	2003e758 	.word	0x2003e758
   d6200:	2003e754 	.word	0x2003e754
   d6204:	2003e750 	.word	0x2003e750

000d6208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6208:	4b18      	ldr	r3, [pc, #96]	; (d626c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d620a:	681a      	ldr	r2, [r3, #0]
   d620c:	07d1      	lsls	r1, r2, #31
   d620e:	bf5c      	itt	pl
   d6210:	2201      	movpl	r2, #1
   d6212:	601a      	strpl	r2, [r3, #0]
   d6214:	4b16      	ldr	r3, [pc, #88]	; (d6270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6216:	681a      	ldr	r2, [r3, #0]
   d6218:	07d2      	lsls	r2, r2, #31
   d621a:	bf5c      	itt	pl
   d621c:	2201      	movpl	r2, #1
   d621e:	601a      	strpl	r2, [r3, #0]
   d6220:	4b14      	ldr	r3, [pc, #80]	; (d6274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6222:	681a      	ldr	r2, [r3, #0]
   d6224:	07d0      	lsls	r0, r2, #31
   d6226:	bf5c      	itt	pl
   d6228:	2201      	movpl	r2, #1
   d622a:	601a      	strpl	r2, [r3, #0]
   d622c:	4b12      	ldr	r3, [pc, #72]	; (d6278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d622e:	681a      	ldr	r2, [r3, #0]
   d6230:	07d1      	lsls	r1, r2, #31
   d6232:	bf5c      	itt	pl
   d6234:	2201      	movpl	r2, #1
   d6236:	601a      	strpl	r2, [r3, #0]
   d6238:	4b10      	ldr	r3, [pc, #64]	; (d627c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d623a:	681a      	ldr	r2, [r3, #0]
   d623c:	07d2      	lsls	r2, r2, #31
   d623e:	bf5c      	itt	pl
   d6240:	2201      	movpl	r2, #1
   d6242:	601a      	strpl	r2, [r3, #0]
   d6244:	4b0e      	ldr	r3, [pc, #56]	; (d6280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6246:	681a      	ldr	r2, [r3, #0]
   d6248:	07d0      	lsls	r0, r2, #31
   d624a:	bf5c      	itt	pl
   d624c:	2201      	movpl	r2, #1
   d624e:	601a      	strpl	r2, [r3, #0]
   d6250:	4b0c      	ldr	r3, [pc, #48]	; (d6284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6252:	681a      	ldr	r2, [r3, #0]
   d6254:	07d1      	lsls	r1, r2, #31
   d6256:	bf5c      	itt	pl
   d6258:	2201      	movpl	r2, #1
   d625a:	601a      	strpl	r2, [r3, #0]
   d625c:	4b0a      	ldr	r3, [pc, #40]	; (d6288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d2      	lsls	r2, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4770      	bx	lr
   d626a:	bf00      	nop
   d626c:	2003e79c 	.word	0x2003e79c
   d6270:	2003e798 	.word	0x2003e798
   d6274:	2003e794 	.word	0x2003e794
   d6278:	2003e790 	.word	0x2003e790
   d627c:	2003e78c 	.word	0x2003e78c
   d6280:	2003e788 	.word	0x2003e788
   d6284:	2003e784 	.word	0x2003e784
   d6288:	2003e780 	.word	0x2003e780

000d628c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d628c:	4b18      	ldr	r3, [pc, #96]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d1      	lsls	r1, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b16      	ldr	r3, [pc, #88]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d2      	lsls	r2, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b14      	ldr	r3, [pc, #80]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d0      	lsls	r0, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4b12      	ldr	r3, [pc, #72]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d62b2:	681a      	ldr	r2, [r3, #0]
   d62b4:	07d1      	lsls	r1, r2, #31
   d62b6:	bf5c      	itt	pl
   d62b8:	2201      	movpl	r2, #1
   d62ba:	601a      	strpl	r2, [r3, #0]
   d62bc:	4b10      	ldr	r3, [pc, #64]	; (d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d62be:	681a      	ldr	r2, [r3, #0]
   d62c0:	07d2      	lsls	r2, r2, #31
   d62c2:	bf5c      	itt	pl
   d62c4:	2201      	movpl	r2, #1
   d62c6:	601a      	strpl	r2, [r3, #0]
   d62c8:	4b0e      	ldr	r3, [pc, #56]	; (d6304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d62ca:	681a      	ldr	r2, [r3, #0]
   d62cc:	07d0      	lsls	r0, r2, #31
   d62ce:	bf5c      	itt	pl
   d62d0:	2201      	movpl	r2, #1
   d62d2:	601a      	strpl	r2, [r3, #0]
   d62d4:	4b0c      	ldr	r3, [pc, #48]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d1      	lsls	r1, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4b0a      	ldr	r3, [pc, #40]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d62e2:	681a      	ldr	r2, [r3, #0]
   d62e4:	07d2      	lsls	r2, r2, #31
   d62e6:	bf5c      	itt	pl
   d62e8:	2201      	movpl	r2, #1
   d62ea:	601a      	strpl	r2, [r3, #0]
   d62ec:	4770      	bx	lr
   d62ee:	bf00      	nop
   d62f0:	2003e7bc 	.word	0x2003e7bc
   d62f4:	2003e7b8 	.word	0x2003e7b8
   d62f8:	2003e7b4 	.word	0x2003e7b4
   d62fc:	2003e7b0 	.word	0x2003e7b0
   d6300:	2003e7ac 	.word	0x2003e7ac
   d6304:	2003e7a8 	.word	0x2003e7a8
   d6308:	2003e7a4 	.word	0x2003e7a4
   d630c:	2003e7a0 	.word	0x2003e7a0

000d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6310:	4b24      	ldr	r3, [pc, #144]	; (d63a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6312:	681a      	ldr	r2, [r3, #0]
   d6314:	07d0      	lsls	r0, r2, #31
   d6316:	bf5c      	itt	pl
   d6318:	2201      	movpl	r2, #1
   d631a:	601a      	strpl	r2, [r3, #0]
   d631c:	4b22      	ldr	r3, [pc, #136]	; (d63a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d631e:	681a      	ldr	r2, [r3, #0]
   d6320:	07d1      	lsls	r1, r2, #31
   d6322:	bf5c      	itt	pl
   d6324:	2201      	movpl	r2, #1
   d6326:	601a      	strpl	r2, [r3, #0]
   d6328:	4b20      	ldr	r3, [pc, #128]	; (d63ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d632a:	681a      	ldr	r2, [r3, #0]
   d632c:	07d2      	lsls	r2, r2, #31
   d632e:	bf5c      	itt	pl
   d6330:	2201      	movpl	r2, #1
   d6332:	601a      	strpl	r2, [r3, #0]
   d6334:	4b1e      	ldr	r3, [pc, #120]	; (d63b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6336:	681a      	ldr	r2, [r3, #0]
   d6338:	07d0      	lsls	r0, r2, #31
   d633a:	bf5c      	itt	pl
   d633c:	2201      	movpl	r2, #1
   d633e:	601a      	strpl	r2, [r3, #0]
   d6340:	4b1c      	ldr	r3, [pc, #112]	; (d63b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6342:	681a      	ldr	r2, [r3, #0]
   d6344:	07d1      	lsls	r1, r2, #31
   d6346:	bf5c      	itt	pl
   d6348:	2201      	movpl	r2, #1
   d634a:	601a      	strpl	r2, [r3, #0]
   d634c:	4b1a      	ldr	r3, [pc, #104]	; (d63b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d634e:	681a      	ldr	r2, [r3, #0]
   d6350:	07d2      	lsls	r2, r2, #31
   d6352:	bf5c      	itt	pl
   d6354:	2201      	movpl	r2, #1
   d6356:	601a      	strpl	r2, [r3, #0]
   d6358:	4b18      	ldr	r3, [pc, #96]	; (d63bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d635a:	681a      	ldr	r2, [r3, #0]
   d635c:	07d0      	lsls	r0, r2, #31
   d635e:	bf5c      	itt	pl
   d6360:	2201      	movpl	r2, #1
   d6362:	601a      	strpl	r2, [r3, #0]
   d6364:	4b16      	ldr	r3, [pc, #88]	; (d63c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6366:	681a      	ldr	r2, [r3, #0]
   d6368:	07d1      	lsls	r1, r2, #31
   d636a:	bf5c      	itt	pl
   d636c:	2201      	movpl	r2, #1
   d636e:	601a      	strpl	r2, [r3, #0]
   d6370:	4b14      	ldr	r3, [pc, #80]	; (d63c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6372:	681a      	ldr	r2, [r3, #0]
   d6374:	07d2      	lsls	r2, r2, #31
   d6376:	bf5c      	itt	pl
   d6378:	2201      	movpl	r2, #1
   d637a:	601a      	strpl	r2, [r3, #0]
   d637c:	4b12      	ldr	r3, [pc, #72]	; (d63c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d637e:	681a      	ldr	r2, [r3, #0]
   d6380:	07d0      	lsls	r0, r2, #31
   d6382:	bf5c      	itt	pl
   d6384:	2201      	movpl	r2, #1
   d6386:	601a      	strpl	r2, [r3, #0]
   d6388:	4b10      	ldr	r3, [pc, #64]	; (d63cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d638a:	681a      	ldr	r2, [r3, #0]
   d638c:	07d1      	lsls	r1, r2, #31
   d638e:	bf5c      	itt	pl
   d6390:	2201      	movpl	r2, #1
   d6392:	601a      	strpl	r2, [r3, #0]
   d6394:	4b0e      	ldr	r3, [pc, #56]	; (d63d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6396:	681a      	ldr	r2, [r3, #0]
   d6398:	07d2      	lsls	r2, r2, #31
   d639a:	bf5c      	itt	pl
   d639c:	2201      	movpl	r2, #1
   d639e:	601a      	strpl	r2, [r3, #0]
   d63a0:	4770      	bx	lr
   d63a2:	bf00      	nop
   d63a4:	2003e7ec 	.word	0x2003e7ec
   d63a8:	2003e7e8 	.word	0x2003e7e8
   d63ac:	2003e7e4 	.word	0x2003e7e4
   d63b0:	2003e7e0 	.word	0x2003e7e0
   d63b4:	2003e7dc 	.word	0x2003e7dc
   d63b8:	2003e7d8 	.word	0x2003e7d8
   d63bc:	2003e7d4 	.word	0x2003e7d4
   d63c0:	2003e7d0 	.word	0x2003e7d0
   d63c4:	2003e7cc 	.word	0x2003e7cc
   d63c8:	2003e7c8 	.word	0x2003e7c8
   d63cc:	2003e7c4 	.word	0x2003e7c4
   d63d0:	2003e7c0 	.word	0x2003e7c0

000d63d4 <__cxa_atexit>:
   d63d4:	b510      	push	{r4, lr}
   d63d6:	4c05      	ldr	r4, [pc, #20]	; (d63ec <__cxa_atexit+0x18>)
   d63d8:	4613      	mov	r3, r2
   d63da:	b12c      	cbz	r4, d63e8 <__cxa_atexit+0x14>
   d63dc:	460a      	mov	r2, r1
   d63de:	4601      	mov	r1, r0
   d63e0:	2002      	movs	r0, #2
   d63e2:	f3af 8000 	nop.w
   d63e6:	bd10      	pop	{r4, pc}
   d63e8:	4620      	mov	r0, r4
   d63ea:	bd10      	pop	{r4, pc}
   d63ec:	00000000 	.word	0x00000000

000d63f0 <memcmp>:
   d63f0:	b510      	push	{r4, lr}
   d63f2:	3901      	subs	r1, #1
   d63f4:	4402      	add	r2, r0
   d63f6:	4290      	cmp	r0, r2
   d63f8:	d007      	beq.n	d640a <memcmp+0x1a>
   d63fa:	f810 3b01 	ldrb.w	r3, [r0], #1
   d63fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6402:	42a3      	cmp	r3, r4
   d6404:	d0f7      	beq.n	d63f6 <memcmp+0x6>
   d6406:	1b18      	subs	r0, r3, r4
   d6408:	bd10      	pop	{r4, pc}
   d640a:	2000      	movs	r0, #0
   d640c:	bd10      	pop	{r4, pc}

000d640e <memcpy>:
   d640e:	b510      	push	{r4, lr}
   d6410:	1e43      	subs	r3, r0, #1
   d6412:	440a      	add	r2, r1
   d6414:	4291      	cmp	r1, r2
   d6416:	d004      	beq.n	d6422 <memcpy+0x14>
   d6418:	f811 4b01 	ldrb.w	r4, [r1], #1
   d641c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6420:	e7f8      	b.n	d6414 <memcpy+0x6>
   d6422:	bd10      	pop	{r4, pc}

000d6424 <memmove>:
   d6424:	4288      	cmp	r0, r1
   d6426:	b510      	push	{r4, lr}
   d6428:	eb01 0302 	add.w	r3, r1, r2
   d642c:	d801      	bhi.n	d6432 <memmove+0xe>
   d642e:	1e42      	subs	r2, r0, #1
   d6430:	e00b      	b.n	d644a <memmove+0x26>
   d6432:	4298      	cmp	r0, r3
   d6434:	d2fb      	bcs.n	d642e <memmove+0xa>
   d6436:	1881      	adds	r1, r0, r2
   d6438:	1ad2      	subs	r2, r2, r3
   d643a:	42d3      	cmn	r3, r2
   d643c:	d004      	beq.n	d6448 <memmove+0x24>
   d643e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6442:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d6446:	e7f8      	b.n	d643a <memmove+0x16>
   d6448:	bd10      	pop	{r4, pc}
   d644a:	4299      	cmp	r1, r3
   d644c:	d004      	beq.n	d6458 <memmove+0x34>
   d644e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6452:	f802 4f01 	strb.w	r4, [r2, #1]!
   d6456:	e7f8      	b.n	d644a <memmove+0x26>
   d6458:	bd10      	pop	{r4, pc}

000d645a <memset>:
   d645a:	4402      	add	r2, r0
   d645c:	4603      	mov	r3, r0
   d645e:	4293      	cmp	r3, r2
   d6460:	d002      	beq.n	d6468 <memset+0xe>
   d6462:	f803 1b01 	strb.w	r1, [r3], #1
   d6466:	e7fa      	b.n	d645e <memset+0x4>
   d6468:	4770      	bx	lr
	...

000d646c <srand>:
   d646c:	b538      	push	{r3, r4, r5, lr}
   d646e:	4b12      	ldr	r3, [pc, #72]	; (d64b8 <srand+0x4c>)
   d6470:	681c      	ldr	r4, [r3, #0]
   d6472:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6474:	4605      	mov	r5, r0
   d6476:	b9d3      	cbnz	r3, d64ae <srand+0x42>
   d6478:	2018      	movs	r0, #24
   d647a:	f7fe fa65 	bl	d4948 <malloc>
   d647e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6482:	63a0      	str	r0, [r4, #56]	; 0x38
   d6484:	8003      	strh	r3, [r0, #0]
   d6486:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d648a:	8043      	strh	r3, [r0, #2]
   d648c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6490:	8083      	strh	r3, [r0, #4]
   d6492:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6496:	80c3      	strh	r3, [r0, #6]
   d6498:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d649c:	8103      	strh	r3, [r0, #8]
   d649e:	2305      	movs	r3, #5
   d64a0:	8143      	strh	r3, [r0, #10]
   d64a2:	230b      	movs	r3, #11
   d64a4:	8183      	strh	r3, [r0, #12]
   d64a6:	2201      	movs	r2, #1
   d64a8:	2300      	movs	r3, #0
   d64aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d64ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d64b0:	2200      	movs	r2, #0
   d64b2:	611d      	str	r5, [r3, #16]
   d64b4:	615a      	str	r2, [r3, #20]
   d64b6:	bd38      	pop	{r3, r4, r5, pc}
   d64b8:	2003e31c 	.word	0x2003e31c

000d64bc <strcpy>:
   d64bc:	4603      	mov	r3, r0
   d64be:	f811 2b01 	ldrb.w	r2, [r1], #1
   d64c2:	f803 2b01 	strb.w	r2, [r3], #1
   d64c6:	2a00      	cmp	r2, #0
   d64c8:	d1f9      	bne.n	d64be <strcpy+0x2>
   d64ca:	4770      	bx	lr

000d64cc <strlen>:
   d64cc:	4603      	mov	r3, r0
   d64ce:	f813 2b01 	ldrb.w	r2, [r3], #1
   d64d2:	2a00      	cmp	r2, #0
   d64d4:	d1fb      	bne.n	d64ce <strlen+0x2>
   d64d6:	1a18      	subs	r0, r3, r0
   d64d8:	3801      	subs	r0, #1
   d64da:	4770      	bx	lr

000d64dc <dynalib_user>:
   d64dc:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d64ec:	0000 0000 3025 7832 2500 646c 202c 6425     ....%02x.%ld, %d
   d64fc:	202c 3025 5832 253a 3230 3a58 3025 5832     , %02X:%02X:%02X
   d650c:	253a 3230 3a58 3025 5832 253a 3230 2c58     :%02X:%02X:%02X,
   d651c:	0020 7250 626f 656c 206d 6977 6874 6720      .Problem with g
   d652c:	7061 705f 7261 6d61 5f73 6e69 7469 203a     ap_params_init: 
   d653c:	6425 0000                                   %d..

000d6540 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6548:	498f 000d 4995 000d 508f 000d 49a3 000d     .I...I...P...I..
   d6558:	4991 000d 6977 6972 676e 622e 656c 5300     .I..wiring.ble.S
   d6568:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d6578:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   d6588:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   d6598:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   d65a8:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   d65b8:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   d65c8:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   d65d8:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   d65e8:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   d65f8:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   d6608:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   d6618:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   d6628:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   d6638:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   d6648:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   d6658:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   d6668:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   d6678:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   d6688:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   d6698:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   d66a8:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   d66b8:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   d66c8:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   d66d8:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   d66e8:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   d66f8:	6465 002e                                   ed..

000d66fc <_ZN8particle7BleUuid9BASE_UUIDE>:
   d66fc:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d670c <_ZTVN5spark13EthernetClassE>:
	...
   d6714:	5575 000d 556b 000d 5561 000d 5557 000d     uU..kU..aU..WU..
   d6724:	554b 000d 553f 000d 5533 000d 552b 000d     KU..?U..3U..+U..
   d6734:	5521 000d 5517 000d 58f1 000d               !U...U...X..

000d6740 <_ZTV7TwoWire>:
	...
   d6748:	5595 000d 55df 000d 55b7 000d 5597 000d     .U...U...U...U..
   d6758:	55bf 000d 55c7 000d 55cf 000d 55d7 000d     .U...U...U...U..

000d6768 <_ZTV9IPAddress>:
	...
   d6770:	5629 000d 5619 000d 561b 000d 6162 6475     )V...V...V..baud
   d6780:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6790:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d67a0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d67b0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d67c0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d67d0:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d67e0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d67f0:	7070 2500 3130 7530 0020 205d 2800 3a29     pp.%010u .] .():
   d6800:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d6810:	6564 6174 6c69 2073 203d 0d00 000a 0066     details = ....f.
   d6820:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d6830:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d6840:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d6850:	6369 6100 6c6c 0000                         ic.all..

000d6858 <_ZTVN5spark9MeshClassE>:
	...
   d6860:	576b 000d 5761 000d 5757 000d 574d 000d     kW..aW..WW..MW..
   d6870:	5741 000d 5735 000d 5729 000d 5721 000d     AW..5W..)W..!W..
   d6880:	5717 000d 570d 000d 58f1 000d               .W...W...X..

000d688c <_ZTVN5spark12NetworkClassE>:
	...
   d6894:	5889 000d 5893 000d 589d 000d 58a7 000d     .X...X...X...X..
   d68a4:	58b1 000d 58bd 000d 58c9 000d 58d5 000d     .X...X...X...X..
   d68b4:	58dd 000d 58e7 000d 58f1 000d               .X...X...X..

000d68c0 <_ZTV8SPIClass>:
	...
   d68c8:	5a95 000d 5a97 000d 005a 2b25 3330 3a64     .Z...Z..Z.%+03d:
   d68d8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d68e8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d68f8:	0000 0000                                   ....

000d68fc <_ZTV11USARTSerial>:
	...
   d6904:	5be1 000d 5c31 000d 5c3f 000d 59d1 000d     .[..1\..?\...Y..
   d6914:	5bf5 000d 5c17 000d 5c03 000d 5c2b 000d     .[...\...\..+\..
   d6924:	5be3 000d 5be7 000d                         .[...[..

000d692c <_ZTV9USBSerial>:
	...
   d6934:	5ce9 000d 5d39 000d 5d47 000d 59d1 000d     .\..9]..G]...Y..
   d6944:	5d25 000d 5ceb 000d 5d01 000d 5d33 000d     %]...\...]..3]..
   d6954:	5d17 000d 5ce5 000d                         .]...\..

000d695c <_ZTVN5spark9WiFiClassE>:
	...
   d6964:	5e53 000d 5e49 000d 5e3f 000d 5df5 000d     S^..I^..?^...]..
   d6974:	5e33 000d 5e27 000d 5e1b 000d 5e13 000d     3^..'^...^...^..
   d6984:	5e09 000d 5dff 000d 58f1 000d               .^...]...X..

000d6990 <_ZSt7nothrow>:
   d6990:	0000 0000                                   ....

000d6994 <__sf_fake_stdin>:
	...

000d69b4 <__sf_fake_stdout>:
	...

000d69d4 <__sf_fake_stderr>:
	...
   d69f4:	0043                                        C.

000d69f6 <link_const_variable_data_end>:
	...

000d69f8 <link_constructors_location>:
   d69f8:	000d4435 	.word	0x000d4435
   d69fc:	000d54dd 	.word	0x000d54dd
   d6a00:	000d5581 	.word	0x000d5581
   d6a04:	000d56fd 	.word	0x000d56fd
   d6a08:	000d5839 	.word	0x000d5839
   d6a0c:	000d59bd 	.word	0x000d59bd
   d6a10:	000d5a79 	.word	0x000d5a79
   d6a14:	000d5b99 	.word	0x000d5b99
   d6a18:	000d5bcd 	.word	0x000d5bcd
   d6a1c:	000d5e5d 	.word	0x000d5e5d
   d6a20:	000d6145 	.word	0x000d6145
   d6a24:	000d6209 	.word	0x000d6209
   d6a28:	000d628d 	.word	0x000d628d
   d6a2c:	000d6311 	.word	0x000d6311
