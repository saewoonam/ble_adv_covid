
/Users/nams/Documents/projects/covid/particle/ble-contact/target/1.5.0/argon/ble-contact.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003ff4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8010  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e280  000d8014  0001e280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004fc  2003e2f4  2003e2f4  0002e2f4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8088  000d8088  00028088  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d80b0  000d80b0  000280b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cec0d  00000000  00000000  000280b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000eac2  00000000  00000000  000f6cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f326  00000000  00000000  00105783  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002650  00000000  00000000  00124aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004a00  00000000  00000000  001270f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030399  00000000  00000000  0012baf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00020cef  00000000  00000000  0015be92  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106a1a  00000000  00000000  0017cb81  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d1bc  00000000  00000000  0028359c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fb3c 	bl	d76aa <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fb5c 	bl	d76f6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e280 	.word	0x2003e280
   d4048:	000d8014 	.word	0x000d8014
   d404c:	2003e2f4 	.word	0x2003e2f4
   d4050:	2003e2f4 	.word	0x2003e2f4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 f975 	bl	d7348 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8010 	.word	0x000d8010
   d4080:	000d7fd8 	.word	0x000d7fd8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b964 	b.w	d4350 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f975 	bl	d4378 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 b91b 	b.w	d72cc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bcbf 	b.w	d4a18 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bcc5 	b.w	d4a28 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bcc3 	b.w	d4a28 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fc18 	bl	d48e0 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4771 	.word	0x000d4771

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <sd_ble_gap_privacy_set>:
 *                                  Otherwise, the p_device_irk pointer in privacy parameter is an invalid pointer.
 * @retval ::NRF_ERROR_INVALID_PARAM Out of range parameters are provided.
 * @retval ::NRF_ERROR_INVALID_STATE Privacy settings cannot be changed while advertising, scanning
 *                                   or creating a connection.
 */
SVCALL(SD_BLE_GAP_PRIVACY_SET, uint32_t, sd_ble_gap_privacy_set(ble_gap_privacy_params_t const *p_privacy_params));
   d40c8:	df70      	svc	112	; 0x70
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_Z14sprintf_bufferPhh.part.1>:
    { "app", LOG_LEVEL_TRACE }, // enable all app messages
});

static char m_tx_buffer[64];

void sprintf_buffer(uint8_t *data, uint8_t length) {
   d40d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d40da:	3901      	subs	r1, #1
  uint8_t size = 0;
  if (length>0) {
    for (uint8_t i=0; i<length; i++) {
      //if (i>0) size+=sprintf(m_tx_buffer+size, "-");
      size+= sprintf(m_tx_buffer+size, "%02x", data[i]);
   d40dc:	4f07      	ldr	r7, [pc, #28]	; (d40fc <_Z14sprintf_bufferPhh.part.1+0x24>)
   d40de:	1e45      	subs	r5, r0, #1
   d40e0:	1846      	adds	r6, r0, r1
    { "app", LOG_LEVEL_TRACE }, // enable all app messages
});

static char m_tx_buffer[64];

void sprintf_buffer(uint8_t *data, uint8_t length) {
   d40e2:	2400      	movs	r4, #0
  uint8_t size = 0;
  if (length>0) {
    for (uint8_t i=0; i<length; i++) {
   d40e4:	42b5      	cmp	r5, r6
   d40e6:	d008      	beq.n	d40fa <_Z14sprintf_bufferPhh.part.1+0x22>
      //if (i>0) size+=sprintf(m_tx_buffer+size, "-");
      size+= sprintf(m_tx_buffer+size, "%02x", data[i]);
   d40e8:	1938      	adds	r0, r7, r4
   d40ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d40ee:	4904      	ldr	r1, [pc, #16]	; (d4100 <_Z14sprintf_bufferPhh.part.1+0x28>)
   d40f0:	f000 fcaa 	bl	d4a48 <sprintf>
   d40f4:	4420      	add	r0, r4
   d40f6:	b2c4      	uxtb	r4, r0
   d40f8:	e7f4      	b.n	d40e4 <_Z14sprintf_bufferPhh.part.1+0xc>
   d40fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d40fc:	2003e340 	.word	0x2003e340
   d4100:	000d7960 	.word	0x000d7960

000d4104 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4104:	4b0a      	ldr	r3, [pc, #40]	; (d4130 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4106:	b510      	push	{r4, lr}
   d4108:	4604      	mov	r4, r0
   d410a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d410c:	f001 fe30 	bl	d5d70 <_ZN5spark10LogManager8instanceEv>
   d4110:	4621      	mov	r1, r4
   d4112:	f002 f81d 	bl	d6150 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4116:	f003 f857 	bl	d71c8 <_Z16_fetch_usbserialv>
   d411a:	f003 f849 	bl	d71b0 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d411e:	4620      	mov	r0, r4
   d4120:	4b04      	ldr	r3, [pc, #16]	; (d4134 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4122:	f840 3b04 	str.w	r3, [r0], #4
   d4126:	f001 ff19 	bl	d5f5c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d412a:	4620      	mov	r0, r4
   d412c:	bd10      	pop	{r4, pc}
   d412e:	bf00      	nop
   d4130:	000d7950 	.word	0x000d7950
   d4134:	000d7938 	.word	0x000d7938

000d4138 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4138:	b510      	push	{r4, lr}
   d413a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d413c:	f7ff ffe2 	bl	d4104 <_ZN5spark16SerialLogHandlerD1Ev>
   d4140:	4620      	mov	r0, r4
   d4142:	2124      	movs	r1, #36	; 0x24
   d4144:	f003 f931 	bl	d73aa <_ZdlPvj>
   d4148:	4620      	mov	r0, r4
   d414a:	bd10      	pop	{r4, pc}

000d414c <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d414c:	b40e      	push	{r1, r2, r3}
   d414e:	b500      	push	{lr}
   d4150:	b08c      	sub	sp, #48	; 0x30
   d4152:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4154:	2320      	movs	r3, #32
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4156:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d415a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d415c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4160:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4162:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4164:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4166:	aa04      	add	r2, sp, #16
   d4168:	2001      	movs	r0, #1
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d416a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d416c:	f000 fbc8 	bl	d4900 <log_message_v>
inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}
   d4170:	b00c      	add	sp, #48	; 0x30
   d4172:	f85d eb04 	ldr.w	lr, [sp], #4
   d4176:	b003      	add	sp, #12
   d4178:	4770      	bx	lr
	...

000d417c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv>:
    }
  }
}

void scanResultCallback(const BleScanResult *scanResult, void *context) {
   d417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4180:	b09d      	sub	sp, #116	; 0x74
   d4182:	4605      	mov	r5, r0
  BleUuid uuids[4];
   d4184:	a808      	add	r0, sp, #32
   d4186:	f000 fccd 	bl	d4b24 <_ZN8particle7BleUuidC1Ev>
   d418a:	a80d      	add	r0, sp, #52	; 0x34
   d418c:	f000 fcca 	bl	d4b24 <_ZN8particle7BleUuidC1Ev>
   d4190:	a812      	add	r0, sp, #72	; 0x48
   d4192:	f000 fcc7 	bl	d4b24 <_ZN8particle7BleUuidC1Ev>
   d4196:	a817      	add	r0, sp, #92	; 0x5c
   d4198:	f000 fcc4 	bl	d4b24 <_ZN8particle7BleUuidC1Ev>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
   d419c:	a908      	add	r1, sp, #32
   d419e:	2204      	movs	r2, #4
   d41a0:	f105 0008 	add.w	r0, r5, #8
   d41a4:	f000 fe13 	bl	d4dce <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
   d41a8:	4607      	mov	r7, r0
  // Print out mac info
  BleAddress addr = scanResult->address;
   d41aa:	e895 0003 	ldmia.w	r5, {r0, r1}
   d41ae:	ac06      	add	r4, sp, #24
   d41b0:	e884 0003 	stmia.w	r4, {r0, r1}
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d41b4:	2600      	movs	r6, #0
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
   d41b6:	f04f 0814 	mov.w	r8, #20
   d41ba:	f64f 596f 	movw	r9, #64879	; 0xfd6f
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
  // Print out mac info
  BleAddress addr = scanResult->address;
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d41be:	42be      	cmp	r6, r7
   d41c0:	da39      	bge.n	d4236 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xba>
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
   d41c2:	ab08      	add	r3, sp, #32
   d41c4:	fb08 3006 	mla	r0, r8, r6, r3
   d41c8:	f000 fce9 	bl	d4b9e <_ZNK8particle7BleUuid7shortedEv>
   d41cc:	4548      	cmp	r0, r9
   d41ce:	d130      	bne.n	d4232 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xb6>
        // Log.trace("UUID: %x", uuids[i].shorted());
        Log.trace("RSSI: %d MAC: %02X:%02X:%02X:%02X:%02X:%02X", 
                  scanResult->rssi, addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
   d41d0:	2105      	movs	r1, #5
   d41d2:	4620      	mov	r0, r4

  for(int i = 0; i < uuidsAvail; i++){
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
        // Log.trace("UUID: %x", uuids[i].shorted());
        Log.trace("RSSI: %d MAC: %02X:%02X:%02X:%02X:%02X:%02X", 
   d41d4:	f995 6050 	ldrsb.w	r6, [r5, #80]	; 0x50
                  scanResult->rssi, addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
   d41d8:	f000 fc91 	bl	d4afe <_ZNK8particle10BleAddressixEh>
   d41dc:	2104      	movs	r1, #4
   d41de:	4607      	mov	r7, r0
   d41e0:	4620      	mov	r0, r4
   d41e2:	f000 fc8c 	bl	d4afe <_ZNK8particle10BleAddressixEh>
   d41e6:	2103      	movs	r1, #3
   d41e8:	4680      	mov	r8, r0
   d41ea:	4620      	mov	r0, r4
   d41ec:	f000 fc87 	bl	d4afe <_ZNK8particle10BleAddressixEh>
   d41f0:	2102      	movs	r1, #2
   d41f2:	4681      	mov	r9, r0
   d41f4:	4620      	mov	r0, r4
   d41f6:	f000 fc82 	bl	d4afe <_ZNK8particle10BleAddressixEh>
   d41fa:	2101      	movs	r1, #1
   d41fc:	4682      	mov	sl, r0
   d41fe:	4620      	mov	r0, r4
   d4200:	f000 fc7d 	bl	d4afe <_ZNK8particle10BleAddressixEh>
   d4204:	2100      	movs	r1, #0
   d4206:	4683      	mov	fp, r0
   d4208:	4620      	mov	r0, r4
   d420a:	f000 fc78 	bl	d4afe <_ZNK8particle10BleAddressixEh>
   d420e:	463b      	mov	r3, r7
   d4210:	4632      	mov	r2, r6
   d4212:	9004      	str	r0, [sp, #16]
   d4214:	4909      	ldr	r1, [pc, #36]	; (d423c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xc0>)
   d4216:	480a      	ldr	r0, [pc, #40]	; (d4240 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xc4>)
   d4218:	e88d 0f00 	stmia.w	sp, {r8, r9, sl, fp}
   d421c:	f7ff ff96 	bl	d414c <_ZNK5spark6Logger5traceEPKcz>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4220:	f000 faae 	bl	d4780 <HAL_Timer_Get_Milli_Seconds>
        //Log.trace("RSSI: %ddBm", scanResult->rssi);
        lastSeen = millis();
   d4224:	4b07      	ldr	r3, [pc, #28]	; (d4244 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xc8>)
        lastRSSI = scanResult->rssi;
   d4226:	f895 2050 	ldrb.w	r2, [r5, #80]	; 0x50
    if( uuids[i].shorted() == CONTACT_UUID ) {
        // Log.trace("UUID: %x", uuids[i].shorted());
        Log.trace("RSSI: %d MAC: %02X:%02X:%02X:%02X:%02X:%02X", 
                  scanResult->rssi, addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
        //Log.trace("RSSI: %ddBm", scanResult->rssi);
        lastSeen = millis();
   d422a:	6018      	str	r0, [r3, #0]
        lastRSSI = scanResult->rssi;
   d422c:	4b06      	ldr	r3, [pc, #24]	; (d4248 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xcc>)
   d422e:	701a      	strb	r2, [r3, #0]
   d4230:	e001      	b.n	d4236 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xba>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
  // Print out mac info
  BleAddress addr = scanResult->address;
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d4232:	3601      	adds	r6, #1
   d4234:	e7c3      	b.n	d41be <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x42>
        // BLE.stopScanning();

        return;
    }
  }
}
   d4236:	b01d      	add	sp, #116	; 0x74
   d4238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d423c:	000d7965 	.word	0x000d7965
   d4240:	2003e400 	.word	0x2003e400
   d4244:	2003e33c 	.word	0x2003e33c
   d4248:	2003e3a4 	.word	0x2003e3a4

000d424c <_ZNK5spark6Logger4infoEPKcz>:

inline void spark::Logger::info(const char *fmt, ...) const {
   d424c:	b40e      	push	{r1, r2, r3}
   d424e:	b500      	push	{lr}
   d4250:	b08c      	sub	sp, #48	; 0x30
   d4252:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4254:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4256:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d425a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d425c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4260:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4262:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4264:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4266:	aa04      	add	r2, sp, #16
   d4268:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d426a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d426c:	f000 fb48 	bl	d4900 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4270:	b00c      	add	sp, #48	; 0x30
   d4272:	f85d eb04 	ldr.w	lr, [sp], #4
   d4276:	b003      	add	sp, #12
   d4278:	4770      	bx	lr

000d427a <_Z15gap_params_initv>:

void gap_params_init() {
   d427a:	b507      	push	{r0, r1, r2, lr}
    unsigned int err_code;
    ble_gap_privacy_params_t prvt_conf;
    memset(&prvt_conf, 0, sizeof(prvt_conf));
   d427c:	2300      	movs	r3, #0
   d427e:	9301      	str	r3, [sp, #4]
    prvt_conf.privacy_mode = BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY;
   d4280:	2301      	movs	r3, #1
   d4282:	f88d 3000 	strb.w	r3, [sp]
    prvt_conf.private_addr_type = BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE ;
   d4286:	2303      	movs	r3, #3
   d4288:	f88d 3001 	strb.w	r3, [sp, #1]
    prvt_conf.private_addr_cycle_s = MAC_ADDR_ROTATE_TIME_S;
    err_code = sd_ble_gap_privacy_set(&prvt_conf);
   d428c:	4668      	mov	r0, sp
    unsigned int err_code;
    ble_gap_privacy_params_t prvt_conf;
    memset(&prvt_conf, 0, sizeof(prvt_conf));
    prvt_conf.privacy_mode = BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY;
    prvt_conf.private_addr_type = BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE ;
    prvt_conf.private_addr_cycle_s = MAC_ADDR_ROTATE_TIME_S;
   d428e:	231e      	movs	r3, #30
   d4290:	f8ad 3002 	strh.w	r3, [sp, #2]
    err_code = sd_ble_gap_privacy_set(&prvt_conf);
   d4294:	f7ff ff18 	bl	d40c8 <sd_ble_gap_privacy_set>
}
   d4298:	b003      	add	sp, #12
   d429a:	f85d fb04 	ldr.w	pc, [sp], #4

000d429e <_Z8calc_RPIPh>:
    advData.set(m_enc_advdata, adv_len);
    sprintf_buffer(m_enc_advdata, adv_len);
    Log.info(m_tx_buffer);
}

void calc_RPI(uint8_t *data) {
   d429e:	f100 0210 	add.w	r2, r0, #16
   d42a2:	4603      	mov	r3, r0
    for(uint8_t i=0; i<16; i++) {
      data[i] = i;
   d42a4:	1a19      	subs	r1, r3, r0
   d42a6:	f803 1b01 	strb.w	r1, [r3], #1
    sprintf_buffer(m_enc_advdata, adv_len);
    Log.info(m_tx_buffer);
}

void calc_RPI(uint8_t *data) {
    for(uint8_t i=0; i<16; i++) {
   d42aa:	4293      	cmp	r3, r2
   d42ac:	d1fa      	bne.n	d42a4 <_Z8calc_RPIPh+0x6>
      data[i] = i;
    }  
}
   d42ae:	4770      	bx	lr

000d42b0 <_Z16advertising_initv>:
    prvt_conf.private_addr_cycle_s = MAC_ADDR_ROTATE_TIME_S;
    err_code = sd_ble_gap_privacy_set(&prvt_conf);
}

void advertising_init(void)
{
   d42b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    m_adv_params.p_peer_addr     = NULL;    // Undirected advertisement.
    m_adv_params.filter_policy   = BLE_GAP_ADV_FP_ANY;
    m_adv_params.interval        = NON_CONNECTABLE_ADV_INTERVAL;
    m_adv_params.duration        = 0;       // Never time out.
    */
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
   d42b2:	f000 fe15 	bl	d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42b6:	2103      	movs	r1, #3
   d42b8:	f000 fe4f 	bl	d4f5a <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>
    BleAddress defaultAddr = BLE.address();
   d42bc:	f000 fe10 	bl	d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42c0:	4601      	mov	r1, r0
   d42c2:	4668      	mov	r0, sp
   d42c4:	f000 fe2a 	bl	d4f1c <_ZNK8particle14BleLocalDevice7addressEv>
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
   d42c8:	f000 fe0a 	bl	d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42cc:	4601      	mov	r1, r0
   d42ce:	a802      	add	r0, sp, #8
   d42d0:	f000 fe24 	bl	d4f1c <_ZNK8particle14BleLocalDevice7addressEv>
   d42d4:	2103      	movs	r1, #3
   d42d6:	a802      	add	r0, sp, #8
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
   d42d8:	4c19      	ldr	r4, [pc, #100]	; (d4340 <_Z16advertising_initv+0x90>)
    m_adv_params.interval        = NON_CONNECTABLE_ADV_INTERVAL;
    m_adv_params.duration        = 0;       // Never time out.
    */
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
    BleAddress defaultAddr = BLE.address();
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
   d42da:	f000 fc0d 	bl	d4af8 <_ZN8particle10BleAddress4typeENS_14BleAddressTypeE>
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
   d42de:	f000 fdff 	bl	d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42e2:	a902      	add	r1, sp, #8
   d42e4:	f000 fe29 	bl	d4f3a <_ZNK8particle14BleLocalDevice7txPowerEPa>
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
   d42e8:	2302      	movs	r3, #2
   d42ea:	7023      	strb	r3, [r4, #0]
    m_enc_advdata[1] = 0xA;
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
   d42ec:	70e3      	strb	r3, [r4, #3]
    m_enc_advdata[4] = 0x01;
   d42ee:	2301      	movs	r3, #1
   d42f0:	7123      	strb	r3, [r4, #4]
    m_enc_advdata[5] = 0x06;
   d42f2:	2306      	movs	r3, #6
   d42f4:	7163      	strb	r3, [r4, #5]
    BleAddress defaultAddr = BLE.address();
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
    m_enc_advdata[1] = 0xA;
   d42f6:	220a      	movs	r2, #10
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
   d42f8:	2303      	movs	r3, #3
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
   d42fa:	2113      	movs	r1, #19
    */
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
    BleAddress defaultAddr = BLE.address();
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
   d42fc:	f88d 0008 	strb.w	r0, [sp, #8]
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
    m_enc_advdata[1] = 0xA;
   d4300:	7062      	strb	r2, [r4, #1]
    m_enc_advdata[2] = txPower; 
   d4302:	70a0      	strb	r0, [r4, #2]
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
   d4304:	226f      	movs	r2, #111	; 0x6f
    m_enc_advdata[1] = 0xA;
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
   d4306:	71a3      	strb	r3, [r4, #6]
    m_enc_advdata[7] = 0x03;
   d4308:	71e3      	strb	r3, [r4, #7]
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
   d430a:	72a1      	strb	r1, [r4, #10]
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
   d430c:	23fd      	movs	r3, #253	; 0xfd
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
   d430e:	2116      	movs	r1, #22
    m_enc_advdata[12] = 0x6F;
    m_enc_advdata[13] = 0xFD;
    // setup RPI
    calc_RPI(m_enc_advdata+14);
   d4310:	f104 000e 	add.w	r0, r4, #14
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
   d4314:	7263      	strb	r3, [r4, #9]
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
    m_enc_advdata[12] = 0x6F;
    m_enc_advdata[13] = 0xFD;
   d4316:	7363      	strb	r3, [r4, #13]
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
   d4318:	7222      	strb	r2, [r4, #8]
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
   d431a:	72e1      	strb	r1, [r4, #11]
    m_enc_advdata[12] = 0x6F;
   d431c:	7322      	strb	r2, [r4, #12]
    m_enc_advdata[13] = 0xFD;
    // setup RPI
    calc_RPI(m_enc_advdata+14);
   d431e:	f7ff ffbe 	bl	d429e <_Z8calc_RPIPh>
    size_t adv_len = 14+16;
    advData.set(m_enc_advdata, adv_len);
   d4322:	221e      	movs	r2, #30
   d4324:	4621      	mov	r1, r4
   d4326:	4807      	ldr	r0, [pc, #28]	; (d4344 <_Z16advertising_initv+0x94>)
   d4328:	f000 fc64 	bl	d4bf4 <_ZN8particle18BleAdvertisingData3setEPKhj>
   d432c:	4620      	mov	r0, r4
   d432e:	211e      	movs	r1, #30
   d4330:	f7ff fed2 	bl	d40d8 <_Z14sprintf_bufferPhh.part.1>
    sprintf_buffer(m_enc_advdata, adv_len);
    Log.info(m_tx_buffer);
   d4334:	4904      	ldr	r1, [pc, #16]	; (d4348 <_Z16advertising_initv+0x98>)
   d4336:	4805      	ldr	r0, [pc, #20]	; (d434c <_Z16advertising_initv+0x9c>)
   d4338:	f7ff ff88 	bl	d424c <_ZNK5spark6Logger4infoEPKcz>
}
   d433c:	b004      	add	sp, #16
   d433e:	bd10      	pop	{r4, pc}
   d4340:	2003e2f8 	.word	0x2003e2f8
   d4344:	2003e380 	.word	0x2003e380
   d4348:	2003e340 	.word	0x2003e340
   d434c:	2003e400 	.word	0x2003e400

000d4350 <setup>:
    }  
}


// setup() runs once, when the device is first turned on.
void setup() {
   d4350:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  gap_params_init();
   d4352:	f7ff ff92 	bl	d427a <_Z15gap_params_initv>
  BLE.setScanTimeout(100);
   d4356:	f000 fdc3 	bl	d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d435a:	2164      	movs	r1, #100	; 0x64
   d435c:	f000 fe84 	bl	d5068 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
  advertising_init();
   d4360:	f7ff ffa6 	bl	d42b0 <_Z16advertising_initv>
  BLE.advertise(&advData);
   d4364:	f000 fdbc 	bl	d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4368:	2200      	movs	r2, #0
   d436a:	4902      	ldr	r1, [pc, #8]	; (d4374 <setup+0x24>)
}
   d436c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {
  // Put initialization like pinMode and begin functions here.
  gap_params_init();
  BLE.setScanTimeout(100);
  advertising_init();
  BLE.advertise(&advData);
   d4370:	f000 be5a 	b.w	d5028 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
   d4374:	2003e380 	.word	0x2003e380

000d4378 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4378:	b500      	push	{lr}
   d437a:	b08b      	sub	sp, #44	; 0x2c
   d437c:	f000 fa00 	bl	d4780 <HAL_Timer_Get_Milli_Seconds>
  // The core of your code will likely live here.
  // Scan for devices
  if( (millis() > lastSeen + RE_CHECK_MS) ){
   d4380:	4b11      	ldr	r3, [pc, #68]	; (d43c8 <loop+0x50>)
   d4382:	681b      	ldr	r3, [r3, #0]
   d4384:	3364      	adds	r3, #100	; 0x64
   d4386:	4283      	cmp	r3, r0
   d4388:	d205      	bcs.n	d4396 <loop+0x1e>
      BLE.scan(scanResultCallback, NULL);
   d438a:	f000 fda9 	bl	d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d438e:	2200      	movs	r2, #0
   d4390:	490e      	ldr	r1, [pc, #56]	; (d43cc <loop+0x54>)
   d4392:	f000 fe87 	bl	d50a4 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>
  }
  Log.info("isadvertising: %d", BLE.advertising());
   d4396:	f000 fda3 	bl	d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d439a:	f000 fe62 	bl	d5062 <_ZNK8particle14BleLocalDevice11advertisingEv>
   d439e:	490c      	ldr	r1, [pc, #48]	; (d43d0 <loop+0x58>)
   d43a0:	4602      	mov	r2, r0
   d43a2:	480c      	ldr	r0, [pc, #48]	; (d43d4 <loop+0x5c>)
   d43a4:	f7ff ff52 	bl	d424c <_ZNK5spark6Logger4infoEPKcz>
  BleAdvertisingData tempdata;
   d43a8:	a801      	add	r0, sp, #4
   d43aa:	f000 fc9d 	bl	d4ce8 <_ZN8particle18BleAdvertisingDataC1Ev>
  Log.info("advertise size: %d ", BLE.getAdvertisingData(&tempdata));
   d43ae:	f000 fd97 	bl	d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43b2:	a901      	add	r1, sp, #4
   d43b4:	f000 fe0a 	bl	d4fcc <_ZNK8particle14BleLocalDevice18getAdvertisingDataEPNS_18BleAdvertisingDataE>
   d43b8:	4907      	ldr	r1, [pc, #28]	; (d43d8 <loop+0x60>)
   d43ba:	4602      	mov	r2, r0
   d43bc:	4805      	ldr	r0, [pc, #20]	; (d43d4 <loop+0x5c>)
   d43be:	f7ff ff45 	bl	d424c <_ZNK5spark6Logger4infoEPKcz>
}
   d43c2:	b00b      	add	sp, #44	; 0x2c
   d43c4:	f85d fb04 	ldr.w	pc, [sp], #4
   d43c8:	2003e33c 	.word	0x2003e33c
   d43cc:	000d417d 	.word	0x000d417d
   d43d0:	000d7991 	.word	0x000d7991
   d43d4:	2003e400 	.word	0x2003e400
   d43d8:	000d79a3 	.word	0x000d79a3

000d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d43de:	6804      	ldr	r4, [r0, #0]
   d43e0:	6843      	ldr	r3, [r0, #4]
   d43e2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43e4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d43e6:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d43ea:	42a6      	cmp	r6, r4
   d43ec:	d004      	beq.n	d43f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d43ee:	4620      	mov	r0, r4
   d43f0:	f002 fd54 	bl	d6e9c <_ZN6StringD1Ev>
   d43f4:	3414      	adds	r4, #20
   d43f6:	e7f8      	b.n	d43ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d43f8:	6828      	ldr	r0, [r5, #0]
   d43fa:	f000 fb15 	bl	d4a28 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d43fe:	4628      	mov	r0, r5
   d4400:	bd70      	pop	{r4, r5, r6, pc}

000d4402 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d4402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        T* d = nullptr;
        if (n > 0) {
   d4406:	1e0f      	subs	r7, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d4408:	4606      	mov	r6, r0
        T* d = nullptr;
        if (n > 0) {
   d440a:	dd38      	ble.n	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7c>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d440c:	2514      	movs	r5, #20
   d440e:	fb05 f007 	mul.w	r0, r5, r7
   d4412:	f000 fb01 	bl	d4a18 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4416:	4680      	mov	r8, r0
   d4418:	2800      	cmp	r0, #0
   d441a:	d03b      	beq.n	d4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x92>
                return false;
            }
            move(d, data_, data_ + size_);
   d441c:	6834      	ldr	r4, [r6, #0]
   d441e:	6873      	ldr	r3, [r6, #4]
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4420:	4284      	cmp	r4, r0
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
                return false;
            }
            move(d, data_, data_ + size_);
   d4422:	fb05 4503 	mla	r5, r5, r3, r4
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4426:	d215      	bcs.n	d4454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x52>
   d4428:	4285      	cmp	r5, r0
   d442a:	d914      	bls.n	d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
            // Move elements in reverse order
            --p;
            --end;
   d442c:	3d14      	subs	r5, #20
            dest += end - p - 1;
   d442e:	f1a4 0914 	sub.w	r9, r4, #20
   d4432:	1b2c      	subs	r4, r5, r4
   d4434:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4436:	45a9      	cmp	r9, r5
   d4438:	d023      	beq.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*end));
   d443a:	b12c      	cbz	r4, d4448 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x46>
   d443c:	4629      	mov	r1, r5
   d443e:	4620      	mov	r0, r4
   d4440:	f002 fd1c 	bl	d6e7c <_ZN6StringC1EOS_>
   d4444:	7c2b      	ldrb	r3, [r5, #16]
   d4446:	7423      	strb	r3, [r4, #16]
   d4448:	4628      	mov	r0, r5
   d444a:	f002 fd27 	bl	d6e9c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d444e:	3d14      	subs	r5, #20
   d4450:	3c14      	subs	r4, #20
   d4452:	e7f0      	b.n	d4436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x34>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4454:	d015      	beq.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4456:	46c1      	mov	r9, r8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4458:	42a5      	cmp	r5, r4
   d445a:	d012      	beq.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*p));
   d445c:	f1b9 0f00 	cmp.w	r9, #0
   d4460:	d006      	beq.n	d4470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x6e>
   d4462:	4621      	mov	r1, r4
   d4464:	4648      	mov	r0, r9
   d4466:	f002 fd09 	bl	d6e7c <_ZN6StringC1EOS_>
   d446a:	7c23      	ldrb	r3, [r4, #16]
   d446c:	f889 3010 	strb.w	r3, [r9, #16]
   d4470:	4620      	mov	r0, r4
   d4472:	f002 fd13 	bl	d6e9c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4476:	3414      	adds	r4, #20
   d4478:	f109 0914 	add.w	r9, r9, #20
   d447c:	e7ec      	b.n	d4458 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d447e:	f04f 0800 	mov.w	r8, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4482:	6830      	ldr	r0, [r6, #0]
   d4484:	f000 fad0 	bl	d4a28 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4488:	f8c6 8000 	str.w	r8, [r6]
        capacity_ = n;
   d448c:	60b7      	str	r7, [r6, #8]
        return true;
   d448e:	2001      	movs	r0, #1
   d4490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
   d4494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_>:
    static void copy(T* dest, const T* p, const T* end) {
        ::memcpy(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void copy(T* dest, const T* p, const T* end) {
   d4498:	b570      	push	{r4, r5, r6, lr}
   d449a:	4604      	mov	r4, r0
   d449c:	460d      	mov	r5, r1
   d449e:	4616      	mov	r6, r2
        for (; p != end; ++p, ++dest) {
   d44a0:	42b5      	cmp	r5, r6
   d44a2:	d009      	beq.n	d44b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_+0x20>
            new(dest) T(*p);
   d44a4:	b12c      	cbz	r4, d44b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_+0x1a>
   d44a6:	4629      	mov	r1, r5
   d44a8:	4620      	mov	r0, r4
   d44aa:	f002 fd60 	bl	d6f6e <_ZN6StringC1ERKS_>
   d44ae:	7c2b      	ldrb	r3, [r5, #16]
   d44b0:	7423      	strb	r3, [r4, #16]
        ::memcpy(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void copy(T* dest, const T* p, const T* end) {
        for (; p != end; ++p, ++dest) {
   d44b2:	3514      	adds	r5, #20
   d44b4:	3414      	adds	r4, #20
   d44b6:	e7f3      	b.n	d44a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_+0x8>
   d44b8:	bd70      	pop	{r4, r5, r6, pc}

000d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44ba:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d44bc:	2300      	movs	r3, #0
   d44be:	6003      	str	r3, [r0, #0]
   d44c0:	6043      	str	r3, [r0, #4]
   d44c2:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44c4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44c6:	6849      	ldr	r1, [r1, #4]
   d44c8:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44ca:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44cc:	dd0c      	ble.n	d44e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2e>
   d44ce:	f7ff ff98 	bl	d4402 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d44d2:	b148      	cbz	r0, d44e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d44d4:	e895 000a 	ldmia.w	r5, {r1, r3}
   d44d8:	2214      	movs	r2, #20
   d44da:	fb02 1203 	mla	r2, r2, r3, r1
   d44de:	6820      	ldr	r0, [r4, #0]
   d44e0:	f7ff ffda 	bl	d4498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_>
        size_ = vector.size_;
   d44e4:	686b      	ldr	r3, [r5, #4]
   d44e6:	6063      	str	r3, [r4, #4]
    }
}
   d44e8:	4620      	mov	r0, r4
   d44ea:	bd38      	pop	{r3, r4, r5, pc}

000d44ec <_GLOBAL__sub_I_advData>:
   d44ec:	b530      	push	{r4, r5, lr}
   d44ee:	b093      	sub	sp, #76	; 0x4c

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44f0:	f000 f94e 	bl	d4790 <HAL_Pin_Map>
 * Date:  April 20, 2020
 */
#include "Particle.h"
#include "config.h"

BleAdvertisingData advData;
   d44f4:	4830      	ldr	r0, [pc, #192]	; (d45b8 <_GLOBAL__sub_I_advData+0xcc>)
   d44f6:	f000 fbf7 	bl	d4ce8 <_ZN8particle18BleAdvertisingDataC1Ev>
// Stores the most recent data related to the device we're looking for
int8_t lastRSSI;
system_tick_t lastSeen = 0;

// The payload going to the cloud
String status;
   d44fa:	4930      	ldr	r1, [pc, #192]	; (d45bc <_GLOBAL__sub_I_advData+0xd0>)
   d44fc:	4830      	ldr	r0, [pc, #192]	; (d45c0 <_GLOBAL__sub_I_advData+0xd4>)
   d44fe:	f002 fd14 	bl	d6f2a <_ZN6StringC1EPK19__FlashStringHelper>
   d4502:	4a30      	ldr	r2, [pc, #192]	; (d45c4 <_GLOBAL__sub_I_advData+0xd8>)
   d4504:	4930      	ldr	r1, [pc, #192]	; (d45c8 <_GLOBAL__sub_I_advData+0xdc>)
   d4506:	482e      	ldr	r0, [pc, #184]	; (d45c0 <_GLOBAL__sub_I_advData+0xd4>)
   d4508:	f002 ff4a 	bl	d73a0 <__aeabi_atexit>
        level_(level) {
}

inline spark::LogCategoryFilter::LogCategoryFilter(const char *category, LogLevel level) :
        cat_(category),
        level_(level) {
   d450c:	2401      	movs	r4, #1
   d450e:	492f      	ldr	r1, [pc, #188]	; (d45cc <_GLOBAL__sub_I_advData+0xe0>)
   d4510:	a80d      	add	r0, sp, #52	; 0x34
   d4512:	f002 fd0a 	bl	d6f2a <_ZN6StringC1EPK19__FlashStringHelper>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4516:	2300      	movs	r3, #0
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(std::initializer_list<T> values) : Vector() {
    const size_t n = values.size();
    if (n > 0 && realloc(n)) {
   d4518:	4621      	mov	r1, r4
   d451a:	a801      	add	r0, sp, #4
   d451c:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	9302      	str	r3, [sp, #8]
   d4524:	9303      	str	r3, [sp, #12]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(std::initializer_list<T> values) : Vector() {
    const size_t n = values.size();
    if (n > 0 && realloc(n)) {
   d4526:	f7ff ff6c 	bl	d4402 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d452a:	2800      	cmp	r0, #0
   d452c:	d13c      	bne.n	d45a8 <_GLOBAL__sub_I_advData+0xbc>
        Serial.begin();
        LogManager::instance()->addHandler(this);
    }

    explicit SerialLogHandler(int baud, LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d452e:	f002 fe4b 	bl	d71c8 <_Z16_fetch_usbserialv>
   d4532:	a901      	add	r1, sp, #4
   d4534:	4605      	mov	r5, r0
   d4536:	a804      	add	r0, sp, #16
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4538:	4c25      	ldr	r4, [pc, #148]	; (d45d0 <_GLOBAL__sub_I_advData+0xe4>)
   d453a:	f7ff ffbe 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d453e:	a904      	add	r1, sp, #16
   d4540:	a807      	add	r0, sp, #28
   d4542:	f7ff ffba 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4546:	4b23      	ldr	r3, [pc, #140]	; (d45d4 <_GLOBAL__sub_I_advData+0xe8>)
   d4548:	6023      	str	r3, [r4, #0]
   d454a:	a907      	add	r1, sp, #28
   d454c:	a80a      	add	r0, sp, #40	; 0x28
   d454e:	f7ff ffb4 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4552:	aa0a      	add	r2, sp, #40	; 0x28
   d4554:	2132      	movs	r1, #50	; 0x32
   d4556:	1d20      	adds	r0, r4, #4
   d4558:	f001 ff61 	bl	d641e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d455c:	a80a      	add	r0, sp, #40	; 0x28
   d455e:	f7ff ff3d 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4562:	a807      	add	r0, sp, #28
   d4564:	f7ff ff3a 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4568:	4b1b      	ldr	r3, [pc, #108]	; (d45d8 <_GLOBAL__sub_I_advData+0xec>)
   d456a:	6023      	str	r3, [r4, #0]
   d456c:	6225      	str	r5, [r4, #32]
   d456e:	a804      	add	r0, sp, #16
   d4570:	f7ff ff34 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4574:	4b19      	ldr	r3, [pc, #100]	; (d45dc <_GLOBAL__sub_I_advData+0xf0>)
   d4576:	6023      	str	r3, [r4, #0]
        Serial.begin(baud);
   d4578:	f002 fe26 	bl	d71c8 <_Z16_fetch_usbserialv>
   d457c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4580:	f002 fe12 	bl	d71a8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4584:	f001 fbf4 	bl	d5d70 <_ZN5spark10LogManager8instanceEv>
   d4588:	4621      	mov	r1, r4
   d458a:	f001 fedb 	bl	d6344 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

// For logging
SerialLogHandler logHandler(115200, LOG_LEVEL_ERROR, {
    { "app", LOG_LEVEL_TRACE }, // enable all app messages
});
   d458e:	a801      	add	r0, sp, #4
   d4590:	f7ff ff24 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4594:	a80d      	add	r0, sp, #52	; 0x34
   d4596:	f002 fc81 	bl	d6e9c <_ZN6StringD1Ev>

// The payload going to the cloud
String status;

// For logging
SerialLogHandler logHandler(115200, LOG_LEVEL_ERROR, {
   d459a:	4a0a      	ldr	r2, [pc, #40]	; (d45c4 <_GLOBAL__sub_I_advData+0xd8>)
   d459c:	4910      	ldr	r1, [pc, #64]	; (d45e0 <_GLOBAL__sub_I_advData+0xf4>)
   d459e:	4620      	mov	r0, r4
   d45a0:	f002 fefe 	bl	d73a0 <__aeabi_atexit>
      BLE.scan(scanResultCallback, NULL);
  }
  Log.info("isadvertising: %d", BLE.advertising());
  BleAdvertisingData tempdata;
  Log.info("advertise size: %d ", BLE.getAdvertisingData(&tempdata));
}
   d45a4:	b013      	add	sp, #76	; 0x4c
   d45a6:	bd30      	pop	{r4, r5, pc}
        copy(data_, values.begin(), values.end());
   d45a8:	aa12      	add	r2, sp, #72	; 0x48
   d45aa:	a90d      	add	r1, sp, #52	; 0x34
   d45ac:	9801      	ldr	r0, [sp, #4]
   d45ae:	f7ff ff73 	bl	d4498 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_>
        size_ = n;
   d45b2:	9402      	str	r4, [sp, #8]
   d45b4:	e7bb      	b.n	d452e <_GLOBAL__sub_I_advData+0x42>
   d45b6:	bf00      	nop
   d45b8:	2003e380 	.word	0x2003e380
   d45bc:	000d7cc8 	.word	0x000d7cc8
   d45c0:	2003e3a8 	.word	0x2003e3a8
   d45c4:	2003e2f4 	.word	0x2003e2f4
   d45c8:	000d6e9d 	.word	0x000d6e9d
   d45cc:	000d79b7 	.word	0x000d79b7
   d45d0:	2003e318 	.word	0x2003e318
   d45d4:	000d7938 	.word	0x000d7938
   d45d8:	000d7d08 	.word	0x000d7d08
   d45dc:	000d7950 	.word	0x000d7950
   d45e0:	000d4105 	.word	0x000d4105

000d45e4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <hal_ble_stack_init+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	689b      	ldr	r3, [r3, #8]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030278 	.word	0x00030278

000d45f4 <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <hal_ble_gap_get_device_address+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	69db      	ldr	r3, [r3, #28]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030278 	.word	0x00030278

000d4604 <hal_ble_gap_get_tx_power>:
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <hal_ble_gap_get_tx_power+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030278 	.word	0x00030278

000d4614 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <hal_ble_gap_set_advertising_parameters+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030278 	.word	0x00030278

000d4624 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <hal_ble_gap_get_advertising_parameters+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030278 	.word	0x00030278

000d4634 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <hal_ble_gap_set_advertising_data+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030278 	.word	0x00030278

000d4644 <hal_ble_gap_get_advertising_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <hal_ble_gap_get_advertising_data+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030278 	.word	0x00030278

000d4654 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <hal_ble_gap_set_scan_response_data+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030278 	.word	0x00030278

000d4664 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <hal_ble_gap_start_advertising+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030278 	.word	0x00030278

000d4674 <hal_ble_gap_is_advertising>:
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <hal_ble_gap_is_advertising+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030278 	.word	0x00030278

000d4684 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <hal_ble_gap_set_scan_parameters+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030278 	.word	0x00030278

000d4694 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <hal_ble_gap_get_scan_parameters+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030278 	.word	0x00030278

000d46a4 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <hal_ble_gap_start_scan+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030278 	.word	0x00030278

000d46b4 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b03      	ldr	r3, [pc, #12]	; (d46c4 <hal_ble_gap_stop_scan+0x10>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d46be:	9301      	str	r3, [sp, #4]
   d46c0:	bd08      	pop	{r3, pc}
   d46c2:	0000      	.short	0x0000
   d46c4:	00030278 	.word	0x00030278

000d46c8 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b03      	ldr	r3, [pc, #12]	; (d46d8 <hal_ble_gap_disconnect+0x10>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d46d2:	9301      	str	r3, [sp, #4]
   d46d4:	bd08      	pop	{r3, pc}
   d46d6:	0000      	.short	0x0000
   d46d8:	00030278 	.word	0x00030278

000d46dc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b03      	ldr	r3, [pc, #12]	; (d46ec <hal_ble_set_callback_on_periph_link_events+0x10>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d46e6:	9301      	str	r3, [sp, #4]
   d46e8:	bd08      	pop	{r3, pc}
   d46ea:	0000      	.short	0x0000
   d46ec:	00030278 	.word	0x00030278

000d46f0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <os_thread_is_current+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	689b      	ldr	r3, [r3, #8]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030248 	.word	0x00030248

000d4700 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <os_thread_join+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	691b      	ldr	r3, [r3, #16]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030248 	.word	0x00030248

000d4710 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <os_thread_cleanup+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	695b      	ldr	r3, [r3, #20]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030248 	.word	0x00030248

000d4720 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <os_mutex_recursive_create+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030248 	.word	0x00030248

000d4730 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <os_mutex_recursive_destroy+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030248 	.word	0x00030248

000d4740 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <os_mutex_recursive_lock+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030248 	.word	0x00030248

000d4750 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <os_mutex_recursive_unlock+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030248 	.word	0x00030248

000d4760 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_RNG_GetRandomNumber+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	685b      	ldr	r3, [r3, #4]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030218 	.word	0x00030218

000d4770 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_Delay_Microseconds+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	68db      	ldr	r3, [r3, #12]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030218 	.word	0x00030218

000d4780 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	695b      	ldr	r3, [r3, #20]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030218 	.word	0x00030218

000d4790 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_Pin_Map+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	681b      	ldr	r3, [r3, #0]
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	0003022c 	.word	0x0003022c

000d47a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <inet_inet_ntop+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	695b      	ldr	r3, [r3, #20]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030264 	.word	0x00030264

000d47b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <netdb_freeaddrinfo+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	689b      	ldr	r3, [r3, #8]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030268 	.word	0x00030268

000d47c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <netdb_getaddrinfo+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	68db      	ldr	r3, [r3, #12]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030268 	.word	0x00030268

000d47d0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_USART_Init+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	681b      	ldr	r3, [r3, #0]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	0003023c 	.word	0x0003023c

000d47e0 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <HAL_USART_End+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	689b      	ldr	r3, [r3, #8]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003023c 	.word	0x0003023c

000d47f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <HAL_USART_Write_Data+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	68db      	ldr	r3, [r3, #12]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003023c 	.word	0x0003023c

000d4800 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <HAL_USART_Available_Data+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	691b      	ldr	r3, [r3, #16]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003023c 	.word	0x0003023c

000d4810 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <HAL_USART_Read_Data+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	695b      	ldr	r3, [r3, #20]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003023c 	.word	0x0003023c

000d4820 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_USART_Peek_Data+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	699b      	ldr	r3, [r3, #24]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003023c 	.word	0x0003023c

000d4830 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <HAL_USART_Flush_Data+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	69db      	ldr	r3, [r3, #28]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003023c 	.word	0x0003023c

000d4840 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_USART_Available_Data_For_Write+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003023c 	.word	0x0003023c

000d4850 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_USART_BeginConfig+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003023c 	.word	0x0003023c

000d4860 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_USB_USART_Init+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	681b      	ldr	r3, [r3, #0]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003024c 	.word	0x0003024c

000d4870 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <HAL_USB_USART_Begin+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	685b      	ldr	r3, [r3, #4]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003024c 	.word	0x0003024c

000d4880 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_USB_USART_End+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	689b      	ldr	r3, [r3, #8]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003024c 	.word	0x0003024c

000d4890 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_USB_USART_Available_Data+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	691b      	ldr	r3, [r3, #16]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003024c 	.word	0x0003024c

000d48a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	695b      	ldr	r3, [r3, #20]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	0003024c 	.word	0x0003024c

000d48b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <HAL_USB_USART_Receive_Data+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	699b      	ldr	r3, [r3, #24]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	0003024c 	.word	0x0003024c

000d48c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <HAL_USB_USART_Send_Data+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	69db      	ldr	r3, [r3, #28]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003024c 	.word	0x0003024c

000d48d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <HAL_USB_USART_Flush_Data+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	6a1b      	ldr	r3, [r3, #32]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	0003024c 	.word	0x0003024c

000d48e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <panic_+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030260 	.word	0x00030260

000d48f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <log_message+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030260 	.word	0x00030260

000d4900 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <log_message_v+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030260 	.word	0x00030260

000d4910 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <log_level_name+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030260 	.word	0x00030260

000d4920 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <log_set_callbacks+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030260 	.word	0x00030260

000d4930 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <set_system_mode+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	685b      	ldr	r3, [r3, #4]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030220 	.word	0x00030220

000d4940 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b03      	ldr	r3, [pc, #12]	; (d4950 <system_ctrl_set_app_request_handler+0x10>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d494a:	9301      	str	r3, [sp, #4]
   d494c:	bd08      	pop	{r3, pc}
   d494e:	0000      	.short	0x0000
   d4950:	00030220 	.word	0x00030220

000d4954 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b03      	ldr	r3, [pc, #12]	; (d4964 <system_ctrl_set_result+0x10>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d495e:	9301      	str	r3, [sp, #4]
   d4960:	bd08      	pop	{r3, pc}
   d4962:	0000      	.short	0x0000
   d4964:	00030220 	.word	0x00030220

000d4968 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <spark_set_random_seed_from_cloud_handler+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030244 	.word	0x00030244

000d4978 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <network_connect+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	685b      	ldr	r3, [r3, #4]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030240 	.word	0x00030240

000d4988 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <network_connecting+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	689b      	ldr	r3, [r3, #8]
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030240 	.word	0x00030240

000d4998 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <network_disconnect+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	68db      	ldr	r3, [r3, #12]
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030240 	.word	0x00030240

000d49a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <network_ready+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	691b      	ldr	r3, [r3, #16]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030240 	.word	0x00030240

000d49b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b02      	ldr	r3, [pc, #8]	; (d49c4 <network_on+0xc>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	695b      	ldr	r3, [r3, #20]
   d49c0:	9301      	str	r3, [sp, #4]
   d49c2:	bd08      	pop	{r3, pc}
   d49c4:	00030240 	.word	0x00030240

000d49c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b02      	ldr	r3, [pc, #8]	; (d49d4 <network_off+0xc>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	699b      	ldr	r3, [r3, #24]
   d49d0:	9301      	str	r3, [sp, #4]
   d49d2:	bd08      	pop	{r3, pc}
   d49d4:	00030240 	.word	0x00030240

000d49d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b02      	ldr	r3, [pc, #8]	; (d49e4 <network_listen+0xc>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	69db      	ldr	r3, [r3, #28]
   d49e0:	9301      	str	r3, [sp, #4]
   d49e2:	bd08      	pop	{r3, pc}
   d49e4:	00030240 	.word	0x00030240

000d49e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b02      	ldr	r3, [pc, #8]	; (d49f4 <network_listening+0xc>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	6a1b      	ldr	r3, [r3, #32]
   d49f0:	9301      	str	r3, [sp, #4]
   d49f2:	bd08      	pop	{r3, pc}
   d49f4:	00030240 	.word	0x00030240

000d49f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49f8:	b508      	push	{r3, lr}
   d49fa:	4b02      	ldr	r3, [pc, #8]	; (d4a04 <network_set_listen_timeout+0xc>)
   d49fc:	681b      	ldr	r3, [r3, #0]
   d49fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a00:	9301      	str	r3, [sp, #4]
   d4a02:	bd08      	pop	{r3, pc}
   d4a04:	00030240 	.word	0x00030240

000d4a08 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a08:	b508      	push	{r3, lr}
   d4a0a:	4b02      	ldr	r3, [pc, #8]	; (d4a14 <network_get_listen_timeout+0xc>)
   d4a0c:	681b      	ldr	r3, [r3, #0]
   d4a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a10:	9301      	str	r3, [sp, #4]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	00030240 	.word	0x00030240

000d4a18 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a18:	b508      	push	{r3, lr}
   d4a1a:	4b02      	ldr	r3, [pc, #8]	; (d4a24 <malloc+0xc>)
   d4a1c:	681b      	ldr	r3, [r3, #0]
   d4a1e:	681b      	ldr	r3, [r3, #0]
   d4a20:	9301      	str	r3, [sp, #4]
   d4a22:	bd08      	pop	{r3, pc}
   d4a24:	0003021c 	.word	0x0003021c

000d4a28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b02      	ldr	r3, [pc, #8]	; (d4a34 <free+0xc>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	685b      	ldr	r3, [r3, #4]
   d4a30:	9301      	str	r3, [sp, #4]
   d4a32:	bd08      	pop	{r3, pc}
   d4a34:	0003021c 	.word	0x0003021c

000d4a38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a38:	b508      	push	{r3, lr}
   d4a3a:	4b02      	ldr	r3, [pc, #8]	; (d4a44 <realloc+0xc>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	689b      	ldr	r3, [r3, #8]
   d4a40:	9301      	str	r3, [sp, #4]
   d4a42:	bd08      	pop	{r3, pc}
   d4a44:	0003021c 	.word	0x0003021c

000d4a48 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4a48:	b508      	push	{r3, lr}
   d4a4a:	4b02      	ldr	r3, [pc, #8]	; (d4a54 <sprintf+0xc>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	68db      	ldr	r3, [r3, #12]
   d4a50:	9301      	str	r3, [sp, #4]
   d4a52:	bd08      	pop	{r3, pc}
   d4a54:	0003021c 	.word	0x0003021c

000d4a58 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4a58:	b508      	push	{r3, lr}
   d4a5a:	4b02      	ldr	r3, [pc, #8]	; (d4a64 <vsnprintf+0xc>)
   d4a5c:	681b      	ldr	r3, [r3, #0]
   d4a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a60:	9301      	str	r3, [sp, #4]
   d4a62:	bd08      	pop	{r3, pc}
   d4a64:	0003021c 	.word	0x0003021c

000d4a68 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4a68:	4770      	bx	lr

000d4a6a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4a6a:	2000      	movs	r0, #0
   d4a6c:	4770      	bx	lr

000d4a6e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4a6e:	b510      	push	{r4, lr}
   d4a70:	2114      	movs	r1, #20
   d4a72:	4604      	mov	r4, r0
   d4a74:	f002 fc99 	bl	d73aa <_ZdlPvj>
   d4a78:	4620      	mov	r0, r4
   d4a7a:	bd10      	pop	{r4, pc}

000d4a7c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4a7c:	f7ff bb0d 	b.w	d409a <_ZdlPv>

000d4a80 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4a80:	b510      	push	{r4, lr}
   d4a82:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4a84:	6800      	ldr	r0, [r0, #0]
   d4a86:	b108      	cbz	r0, d4a8c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4a88:	f7ff fe52 	bl	d4730 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4a8c:	4620      	mov	r0, r4
   d4a8e:	bd10      	pop	{r4, pc}

000d4a90 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4a90:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4a92:	200a      	movs	r0, #10
   d4a94:	4a02      	ldr	r2, [pc, #8]	; (d4aa0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d4a96:	2100      	movs	r1, #0
   d4a98:	f7ff ff22 	bl	d48e0 <panic_>
    }
}
   d4a9c:	bd08      	pop	{r3, pc}
   d4a9e:	bf00      	nop
   d4aa0:	000d4771 	.word	0x000d4771

000d4aa4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4aa4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4aa6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4aa8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4aaa:	689b      	ldr	r3, [r3, #8]
   d4aac:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4aae:	68a3      	ldr	r3, [r4, #8]
   d4ab0:	3b01      	subs	r3, #1
   d4ab2:	60a3      	str	r3, [r4, #8]
   d4ab4:	b92b      	cbnz	r3, d4ac2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4ab6:	6823      	ldr	r3, [r4, #0]
   d4ab8:	4620      	mov	r0, r4
   d4aba:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4ac0:	4718      	bx	r3
   d4ac2:	bd10      	pop	{r4, pc}

000d4ac4 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4ac4:	b510      	push	{r4, lr}
            locked_(false) {
   d4ac6:	2300      	movs	r3, #0
   d4ac8:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4aca:	4b04      	ldr	r3, [pc, #16]	; (d4adc <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4acc:	4604      	mov	r4, r0
   d4ace:	6818      	ldr	r0, [r3, #0]
   d4ad0:	f7ff fe36 	bl	d4740 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4ad4:	2301      	movs	r3, #1
   d4ad6:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4ad8:	4620      	mov	r0, r4
   d4ada:	bd10      	pop	{r4, pc}
   d4adc:	2003e3c0 	.word	0x2003e3c0

000d4ae0 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4ae0:	b510      	push	{r4, lr}
        if (locked_) {
   d4ae2:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4ae4:	4604      	mov	r4, r0
        if (locked_) {
   d4ae6:	b11b      	cbz	r3, d4af0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4ae8:	4b02      	ldr	r3, [pc, #8]	; (d4af4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4aea:	6818      	ldr	r0, [r3, #0]
   d4aec:	f7ff fe30 	bl	d4750 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4af0:	4620      	mov	r0, r4
   d4af2:	bd10      	pop	{r4, pc}
   d4af4:	2003e3c0 	.word	0x2003e3c0

000d4af8 <_ZN8particle10BleAddress4typeENS_14BleAddressTypeE>:
BleAddress::BleAddress(const String& address, BleAddressType type) {
    set(address, type);
}

int BleAddress::type(BleAddressType type) {
    address_.addr_type = static_cast<ble_sig_addr_type_t>(type);
   d4af8:	7181      	strb	r1, [r0, #6]
    return SYSTEM_ERROR_NONE;
}
   d4afa:	2000      	movs	r0, #0
   d4afc:	4770      	bx	lr

000d4afe <_ZNK8particle10BleAddressixEh>:
    buf[len++] = '\0';
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
   d4afe:	2905      	cmp	r1, #5
        return 0;
    }
    return address_.addr[i];
   d4b00:	bf94      	ite	ls
   d4b02:	5c40      	ldrbls	r0, [r0, r1]
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
        return 0;
   d4b04:	2000      	movhi	r0, #0
    }
    return address_.addr[i];
}
   d4b06:	4770      	bx	lr

000d4b08 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4b08:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4b0a:	7982      	ldrb	r2, [r0, #6]
   d4b0c:	798b      	ldrb	r3, [r1, #6]
   d4b0e:	429a      	cmp	r2, r3
   d4b10:	d106      	bne.n	d4b20 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4b12:	2206      	movs	r2, #6
   d4b14:	f002 fdba 	bl	d768c <memcmp>
   d4b18:	fab0 f080 	clz	r0, r0
   d4b1c:	0940      	lsrs	r0, r0, #5
   d4b1e:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4b20:	2000      	movs	r0, #0
}
   d4b22:	bd08      	pop	{r3, pc}

000d4b24 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4b24:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d4b26:	2301      	movs	r3, #1
   d4b28:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4b2a:	4b05      	ldr	r3, [pc, #20]	; (d4b40 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4b2c:	4602      	mov	r2, r0
   d4b2e:	f103 0110 	add.w	r1, r3, #16
   d4b32:	f853 4b04 	ldr.w	r4, [r3], #4
   d4b36:	f842 4b04 	str.w	r4, [r2], #4
   d4b3a:	428b      	cmp	r3, r1
   d4b3c:	d1f9      	bne.n	d4b32 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4b3e:	bd10      	pop	{r4, pc}
   d4b40:	000d7b78 	.word	0x000d7b78

000d4b44 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4b44:	b510      	push	{r4, lr}
    if (uuid128) {
   d4b46:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4b48:	4604      	mov	r4, r0
    if (uuid128) {
   d4b4a:	b1b9      	cbz	r1, d4b7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d4b4c:	2a01      	cmp	r2, #1
   d4b4e:	d109      	bne.n	d4b64 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4b50:	4603      	mov	r3, r0
   d4b52:	f101 0210 	add.w	r2, r1, #16
   d4b56:	f851 0b04 	ldr.w	r0, [r1], #4
   d4b5a:	f843 0b04 	str.w	r0, [r3], #4
   d4b5e:	4291      	cmp	r1, r2
   d4b60:	d1f9      	bne.n	d4b56 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d4b62:	e008      	b.n	d4b76 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d4b64:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d4b66:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d4b68:	5c98      	ldrb	r0, [r3, r2]
   d4b6a:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4b6e:	3a01      	subs	r2, #1
   d4b70:	b2d2      	uxtb	r2, r2
   d4b72:	2aff      	cmp	r2, #255	; 0xff
   d4b74:	d1f8      	bne.n	d4b68 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d4b76:	2301      	movs	r3, #1
   d4b78:	6123      	str	r3, [r4, #16]
   d4b7a:	e002      	b.n	d4b82 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4b7c:	2210      	movs	r2, #16
   d4b7e:	f002 fdba 	bl	d76f6 <memset>
    }
}
   d4b82:	4620      	mov	r0, r4
   d4b84:	bd10      	pop	{r4, pc}

000d4b86 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d4b86:	b538      	push	{r3, r4, r5, lr}
   d4b88:	4604      	mov	r4, r0
   d4b8a:	460d      	mov	r5, r1
        : BleUuid() {
   d4b8c:	f7ff ffca 	bl	d4b24 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d4b90:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4b92:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4b94:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d4b96:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4b98:	7365      	strb	r5, [r4, #13]
}
   d4b9a:	4620      	mov	r0, r4
   d4b9c:	bd38      	pop	{r3, r4, r5, pc}

000d4b9e <_ZNK8particle7BleUuid7shortedEv>:
    }
    return uuid;
}

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4b9e:	7b42      	ldrb	r2, [r0, #13]
   d4ba0:	7b00      	ldrb	r0, [r0, #12]
}
   d4ba2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4ba6:	4770      	bx	lr

000d4ba8 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4ba8:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4baa:	690b      	ldr	r3, [r1, #16]
   d4bac:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4bae:	f101 0210 	add.w	r2, r1, #16
   d4bb2:	4603      	mov	r3, r0
   d4bb4:	f851 4b04 	ldr.w	r4, [r1], #4
   d4bb8:	f843 4b04 	str.w	r4, [r3], #4
   d4bbc:	4291      	cmp	r1, r2
   d4bbe:	d1f9      	bne.n	d4bb4 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d4bc0:	bd10      	pop	{r4, pc}

000d4bc2 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4bc2:	b510      	push	{r4, lr}
   d4bc4:	b086      	sub	sp, #24
   d4bc6:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4bc8:	2201      	movs	r2, #1
   d4bca:	a801      	add	r0, sp, #4
   d4bcc:	f7ff ffba 	bl	d4b44 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4bd0:	a901      	add	r1, sp, #4
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	f7ff ffe8 	bl	d4ba8 <_ZN8particle7BleUuidaSERKS0_>
}
   d4bd8:	b006      	add	sp, #24
   d4bda:	bd10      	pop	{r4, pc}

000d4bdc <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d4bdc:	b510      	push	{r4, lr}
   d4bde:	b086      	sub	sp, #24
   d4be0:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d4be2:	a801      	add	r0, sp, #4
   d4be4:	f7ff ffcf 	bl	d4b86 <_ZN8particle7BleUuidC1Et>
   d4be8:	a901      	add	r1, sp, #4
   d4bea:	4620      	mov	r0, r4
   d4bec:	f7ff ffdc 	bl	d4ba8 <_ZN8particle7BleUuidaSERKS0_>
}
   d4bf0:	b006      	add	sp, #24
   d4bf2:	bd10      	pop	{r4, pc}

000d4bf4 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d4bf4:	b538      	push	{r3, r4, r5, lr}
   d4bf6:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d4bf8:	b101      	cbz	r1, d4bfc <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d4bfa:	b912      	cbnz	r2, d4c02 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d4bfc:	2000      	movs	r0, #0
   d4bfe:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d4c00:	bd38      	pop	{r3, r4, r5, pc}
   d4c02:	2a1f      	cmp	r2, #31
   d4c04:	bf28      	it	cs
   d4c06:	221f      	movcs	r2, #31
   d4c08:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d4c0a:	f002 fd4e 	bl	d76aa <memcpy>
    selfLen_ = len;
   d4c0e:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d4c10:	4620      	mov	r0, r4
}
   d4c12:	bd38      	pop	{r3, r4, r5, pc}

000d4c14 <_ZN8particle18BleAdvertisingData6resizeEj>:

size_t BleAdvertisingData::appendCustomData(const uint8_t* buf, size_t len, bool force) {
    return append(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len, force);
}

size_t BleAdvertisingData::resize(size_t size) {
   d4c14:	291f      	cmp	r1, #31
   d4c16:	bf28      	it	cs
   d4c18:	211f      	movcs	r1, #31
    selfLen_ = std::min(size, (size_t)BLE_MAX_ADV_DATA_LEN);
   d4c1a:	6201      	str	r1, [r0, #32]
    return selfLen_;
}
   d4c1c:	4608      	mov	r0, r1
   d4c1e:	4770      	bx	lr

000d4c20 <_ZN8particle18BleAdvertisingData5clearEv>:

void BleAdvertisingData::clear() {
    selfLen_ = 0;
   d4c20:	2100      	movs	r1, #0
   d4c22:	6201      	str	r1, [r0, #32]
    memset(selfData_, 0x00, sizeof(selfData_));
   d4c24:	221f      	movs	r2, #31
   d4c26:	f002 bd66 	b.w	d76f6 <memset>

000d4c2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4c2c:	b18b      	cbz	r3, d4c52 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4c2e:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4c30:	1ce5      	adds	r5, r4, #3
   d4c32:	428d      	cmp	r5, r1
   d4c34:	d80f      	bhi.n	d4c56 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4c36:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4c38:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4c3a:	5d87      	ldrb	r7, [r0, r6]
   d4c3c:	4297      	cmp	r7, r2
   d4c3e:	d105      	bne.n	d4c4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4c40:	442e      	add	r6, r5
   d4c42:	42b1      	cmp	r1, r6
   d4c44:	d307      	bcc.n	d4c56 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4c46:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4c48:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4c4c:	3501      	adds	r5, #1
   d4c4e:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4c50:	e7ee      	b.n	d4c30 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4c52:	4618      	mov	r0, r3
   d4c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c56:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4c5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4c5e:	4604      	mov	r4, r0
   d4c60:	460e      	mov	r6, r1
   d4c62:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4c64:	4617      	mov	r7, r2
   d4c66:	2a00      	cmp	r2, #0
   d4c68:	d03a      	beq.n	d4ce0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4c6a:	460a      	mov	r2, r1
   d4c6c:	ab01      	add	r3, sp, #4
   d4c6e:	6a01      	ldr	r1, [r0, #32]
   d4c70:	f7ff ffdb 	bl	d4c2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4c74:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4c78:	6a22      	ldr	r2, [r4, #32]
   d4c7a:	bb03      	cbnz	r3, d4cbe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4c7c:	b1f8      	cbz	r0, d4cbe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4c7e:	1c96      	adds	r6, r2, #2
   d4c80:	442e      	add	r6, r5
   d4c82:	1a36      	subs	r6, r6, r0
   d4c84:	2e1f      	cmp	r6, #31
   d4c86:	d82b      	bhi.n	d4ce0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4c88:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4c8c:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4c90:	ebc8 0202 	rsb	r2, r8, r2
   d4c94:	1a12      	subs	r2, r2, r0
   d4c96:	eb00 0108 	add.w	r1, r0, r8
   d4c9a:	eb05 0009 	add.w	r0, r5, r9
   d4c9e:	b292      	uxth	r2, r2
   d4ca0:	4421      	add	r1, r4
   d4ca2:	4420      	add	r0, r4
   d4ca4:	f002 fd0c 	bl	d76c0 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4ca8:	1c6b      	adds	r3, r5, #1
   d4caa:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4cae:	462a      	mov	r2, r5
   d4cb0:	4639      	mov	r1, r7
   d4cb2:	eb04 0009 	add.w	r0, r4, r9
   d4cb6:	f002 fcf8 	bl	d76aa <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4cba:	6226      	str	r6, [r4, #32]
   d4cbc:	e010      	b.n	d4ce0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4cbe:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4cc0:	182b      	adds	r3, r5, r0
   d4cc2:	2b1f      	cmp	r3, #31
   d4cc4:	d80c      	bhi.n	d4ce0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4cc6:	1c6b      	adds	r3, r5, #1
   d4cc8:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4cca:	4422      	add	r2, r4
   d4ccc:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4cce:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4cd0:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4cd2:	4420      	add	r0, r4
   d4cd4:	462a      	mov	r2, r5
   d4cd6:	f002 fce8 	bl	d76aa <memcpy>
        selfLen_ += len;
   d4cda:	6a22      	ldr	r2, [r4, #32]
   d4cdc:	442a      	add	r2, r5
   d4cde:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4ce0:	6a20      	ldr	r0, [r4, #32]
}
   d4ce2:	b003      	add	sp, #12
   d4ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4ce8 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4cea:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4cec:	4603      	mov	r3, r0
   d4cee:	f100 021f 	add.w	r2, r0, #31
   d4cf2:	2000      	movs	r0, #0
   d4cf4:	f803 0b01 	strb.w	r0, [r3], #1
   d4cf8:	4293      	cmp	r3, r2
   d4cfa:	f04f 0100 	mov.w	r1, #0
   d4cfe:	d1f9      	bne.n	d4cf4 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4d00:	aa04      	add	r2, sp, #16
   d4d02:	2306      	movs	r3, #6
   d4d04:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4d08:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4d0a:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4d0c:	9100      	str	r1, [sp, #0]
   d4d0e:	4620      	mov	r0, r4
   d4d10:	4619      	mov	r1, r3
   d4d12:	f7ff ffa2 	bl	d4c5a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4d16:	4620      	mov	r0, r4
   d4d18:	b004      	add	sp, #16
   d4d1a:	bd10      	pop	{r4, pc}

000d4d1c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4d1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4d1e:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4d20:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4d22:	ab01      	add	r3, sp, #4
   d4d24:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4d26:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4d28:	f7ff ff7f 	bl	d4c2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4d2c:	4605      	mov	r5, r0
   d4d2e:	b178      	cbz	r0, d4d50 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4d30:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4d32:	6a22      	ldr	r2, [r4, #32]
   d4d34:	1829      	adds	r1, r5, r0
   d4d36:	1a12      	subs	r2, r2, r0
   d4d38:	1b52      	subs	r2, r2, r5
   d4d3a:	4421      	add	r1, r4
   d4d3c:	4420      	add	r0, r4
   d4d3e:	f002 fcb4 	bl	d76aa <memcpy>
        selfLen_ -= len;
   d4d42:	6a23      	ldr	r3, [r4, #32]
   d4d44:	1b5d      	subs	r5, r3, r5
   d4d46:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4d48:	4631      	mov	r1, r6
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	f7ff ffe6 	bl	d4d1c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4d50:	b002      	add	sp, #8
   d4d52:	bd70      	pop	{r4, r5, r6, pc}

000d4d54 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d4d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4d58:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d4d5a:	b085      	sub	sp, #20
   d4d5c:	4606      	mov	r6, r0
   d4d5e:	4689      	mov	r9, r1
   d4d60:	4617      	mov	r7, r2
   d4d62:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d4d64:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d4d66:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4d6a:	6a31      	ldr	r1, [r6, #32]
   d4d6c:	428d      	cmp	r5, r1
   d4d6e:	d22a      	bcs.n	d4dc6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d4d70:	ab03      	add	r3, sp, #12
   d4d72:	464a      	mov	r2, r9
   d4d74:	1b49      	subs	r1, r1, r5
   d4d76:	1970      	adds	r0, r6, r5
   d4d78:	f7ff ff57 	bl	d4c2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d4d7c:	4683      	mov	fp, r0
   d4d7e:	b310      	cbz	r0, d4dc6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d4d80:	4554      	cmp	r4, sl
   d4d82:	d220      	bcs.n	d4dc6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d4d84:	2804      	cmp	r0, #4
   d4d86:	9903      	ldr	r1, [sp, #12]
   d4d88:	d10c      	bne.n	d4da4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d4d8a:	4429      	add	r1, r5
   d4d8c:	1872      	adds	r2, r6, r1
   d4d8e:	1c63      	adds	r3, r4, #1
   d4d90:	78d1      	ldrb	r1, [r2, #3]
   d4d92:	7892      	ldrb	r2, [r2, #2]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d4d9a:	fb08 7004 	mla	r0, r8, r4, r7
   d4d9e:	f7ff ff1d 	bl	d4bdc <_ZN8particle7BleUuidaSEt>
   d4da2:	e00a      	b.n	d4dba <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d4da4:	2812      	cmp	r0, #18
   d4da6:	d10a      	bne.n	d4dbe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d4da8:	3102      	adds	r1, #2
   d4daa:	4429      	add	r1, r5
   d4dac:	1c63      	adds	r3, r4, #1
   d4dae:	4431      	add	r1, r6
   d4db0:	fb08 7004 	mla	r0, r8, r4, r7
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	f7ff ff04 	bl	d4bc2 <_ZN8particle7BleUuidaSEPKh>
   d4dba:	9b01      	ldr	r3, [sp, #4]
   d4dbc:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4dbe:	9b03      	ldr	r3, [sp, #12]
   d4dc0:	445b      	add	r3, fp
   d4dc2:	441d      	add	r5, r3
   d4dc4:	e7d1      	b.n	d4d6a <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d4dc6:	4620      	mov	r0, r4
   d4dc8:	b005      	add	sp, #20
   d4dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4dce <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4dd2:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4dd4:	460d      	mov	r5, r1
   d4dd6:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4dd8:	460a      	mov	r2, r1
   d4dda:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4ddc:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4dde:	f7ff ffb9 	bl	d4d54 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d4de2:	f04f 0814 	mov.w	r8, #20
   d4de6:	1a33      	subs	r3, r6, r0
   d4de8:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4dec:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d4dee:	2103      	movs	r1, #3
   d4df0:	4638      	mov	r0, r7
   d4df2:	f7ff ffaf 	bl	d4d54 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d4df6:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4df8:	1b33      	subs	r3, r6, r4
   d4dfa:	fb08 5204 	mla	r2, r8, r4, r5
   d4dfe:	2106      	movs	r1, #6
   d4e00:	4638      	mov	r0, r7
   d4e02:	f7ff ffa7 	bl	d4d54 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d4e06:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d4e08:	1b33      	subs	r3, r6, r4
   d4e0a:	fb08 5204 	mla	r2, r8, r4, r5
   d4e0e:	2107      	movs	r1, #7
   d4e10:	4638      	mov	r0, r7
   d4e12:	f7ff ff9f 	bl	d4d54 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d4e16:	4420      	add	r0, r4
   d4e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4e1c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4e1c:	b510      	push	{r4, lr}
   d4e1e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4e20:	69c2      	ldr	r2, [r0, #28]
   d4e22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d4e26:	4293      	cmp	r3, r2
   d4e28:	4618      	mov	r0, r3
   d4e2a:	d006      	beq.n	d4e3a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4e2c:	6804      	ldr	r4, [r0, #0]
   d4e2e:	8824      	ldrh	r4, [r4, #0]
   d4e30:	428c      	cmp	r4, r1
   d4e32:	f103 0308 	add.w	r3, r3, #8
   d4e36:	d1f6      	bne.n	d4e26 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d4e38:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d4e3a:	2000      	movs	r0, #0
    }
   d4e3c:	bd10      	pop	{r4, pc}

000d4e3e <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d4e3e:	b510      	push	{r4, lr}
    return impl()->address();
   d4e40:	680a      	ldr	r2, [r1, #0]
   d4e42:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d4e46:	6003      	str	r3, [r0, #0]
   d4e48:	6853      	ldr	r3, [r2, #4]
   d4e4a:	6043      	str	r3, [r0, #4]
}
   d4e4c:	bd10      	pop	{r4, pc}

000d4e4e <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4e4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4e50:	6802      	ldr	r2, [r0, #0]
   d4e52:	680b      	ldr	r3, [r1, #0]
   d4e54:	8812      	ldrh	r2, [r2, #0]
   d4e56:	881b      	ldrh	r3, [r3, #0]
   d4e58:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4e5a:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4e5c:	d10c      	bne.n	d4e78 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d4e5e:	4601      	mov	r1, r0
   d4e60:	4668      	mov	r0, sp
   d4e62:	f7ff ffec 	bl	d4e3e <_ZNK8particle13BlePeerDevice7addressEv>
   d4e66:	4621      	mov	r1, r4
   d4e68:	a802      	add	r0, sp, #8
   d4e6a:	f7ff ffe8 	bl	d4e3e <_ZNK8particle13BlePeerDevice7addressEv>
   d4e6e:	a902      	add	r1, sp, #8
   d4e70:	4668      	mov	r0, sp
   d4e72:	f7ff fe49 	bl	d4b08 <_ZNK8particle10BleAddresseqERKS0_>
   d4e76:	b900      	cbnz	r0, d4e7a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d4e78:	2000      	movs	r0, #0
}
   d4e7a:	b004      	add	sp, #16
   d4e7c:	bd10      	pop	{r4, pc}
	...

000d4e80 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4e80:	b510      	push	{r4, lr}
   d4e82:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4e84:	2034      	movs	r0, #52	; 0x34
   d4e86:	f7ff f906 	bl	d4096 <_Znwj>
   d4e8a:	4601      	mov	r1, r0
   d4e8c:	b168      	cbz	r0, d4eaa <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4e8e:	2300      	movs	r3, #0
   d4e90:	6003      	str	r3, [r0, #0]
   d4e92:	6043      	str	r3, [r0, #4]
   d4e94:	6083      	str	r3, [r0, #8]
   d4e96:	60c3      	str	r3, [r0, #12]
   d4e98:	6103      	str	r3, [r0, #16]
   d4e9a:	6143      	str	r3, [r0, #20]
   d4e9c:	6183      	str	r3, [r0, #24]
   d4e9e:	61c3      	str	r3, [r0, #28]
   d4ea0:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d4ea2:	6243      	str	r3, [r0, #36]	; 0x24
   d4ea4:	6283      	str	r3, [r0, #40]	; 0x28
   d4ea6:	62c3      	str	r3, [r0, #44]	; 0x2c
   d4ea8:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4eaa:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d4eac:	b919      	cbnz	r1, d4eb6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d4eae:	4a0a      	ldr	r2, [pc, #40]	; (d4ed8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4eb0:	200a      	movs	r0, #10
   d4eb2:	f7ff fd15 	bl	d48e0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4eb6:	2000      	movs	r0, #0
   d4eb8:	f7ff fb94 	bl	d45e4 <hal_ble_stack_init>
   d4ebc:	b120      	cbz	r0, d4ec8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d4ebe:	4a06      	ldr	r2, [pc, #24]	; (d4ed8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4ec0:	2100      	movs	r1, #0
   d4ec2:	200a      	movs	r0, #10
   d4ec4:	f7ff fd0c 	bl	d48e0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d4ec8:	2200      	movs	r2, #0
   d4eca:	6821      	ldr	r1, [r4, #0]
   d4ecc:	4803      	ldr	r0, [pc, #12]	; (d4edc <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d4ece:	f7ff fc05 	bl	d46dc <hal_ble_set_callback_on_periph_link_events>
}
   d4ed2:	4620      	mov	r0, r4
   d4ed4:	bd10      	pop	{r4, pc}
   d4ed6:	bf00      	nop
   d4ed8:	000d4771 	.word	0x000d4771
   d4edc:	000d5391 	.word	0x000d5391

000d4ee0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4ee0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4ee2:	4c0a      	ldr	r4, [pc, #40]	; (d4f0c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4ee4:	6823      	ldr	r3, [r4, #0]
   d4ee6:	07db      	lsls	r3, r3, #31
   d4ee8:	d40e      	bmi.n	d4f08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4eea:	4620      	mov	r0, r4
   d4eec:	f7ff f8e4 	bl	d40b8 <__cxa_guard_acquire>
   d4ef0:	b150      	cbz	r0, d4f08 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4ef2:	4807      	ldr	r0, [pc, #28]	; (d4f10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4ef4:	f7ff ffc4 	bl	d4e80 <_ZN8particle14BleLocalDeviceC1Ev>
   d4ef8:	4620      	mov	r0, r4
   d4efa:	f7ff f8e2 	bl	d40c2 <__cxa_guard_release>
   d4efe:	4a05      	ldr	r2, [pc, #20]	; (d4f14 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4f00:	4905      	ldr	r1, [pc, #20]	; (d4f18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4f02:	4803      	ldr	r0, [pc, #12]	; (d4f10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4f04:	f002 fa4c 	bl	d73a0 <__aeabi_atexit>
    return instance;
}
   d4f08:	4801      	ldr	r0, [pc, #4]	; (d4f10 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4f0a:	bd10      	pop	{r4, pc}
   d4f0c:	2003e3bc 	.word	0x2003e3bc
   d4f10:	2003e3b8 	.word	0x2003e3b8
   d4f14:	2003e2f4 	.word	0x2003e2f4
   d4f18:	000d5179 	.word	0x000d5179

000d4f1c <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   d4f1c:	b513      	push	{r0, r1, r4, lr}
   d4f1e:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   d4f20:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d4f22:	4668      	mov	r0, sp
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
   d4f24:	9100      	str	r1, [sp, #0]
   d4f26:	9101      	str	r1, [sp, #4]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d4f28:	f7ff fb64 	bl	d45f4 <hal_ble_gap_get_device_address>
        : address_{} {
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}

BleAddress::BleAddress(const hal_ble_addr_t& addr) {
    address_ = addr;
   d4f2c:	466b      	mov	r3, sp
   d4f2e:	cb03      	ldmia	r3!, {r0, r1}
   d4f30:	6020      	str	r0, [r4, #0]

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
    hal_ble_gap_get_device_address(&halAddr, nullptr);
    return BleAddress(halAddr);
}
   d4f32:	4620      	mov	r0, r4
        : address_{} {
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}

BleAddress::BleAddress(const hal_ble_addr_t& addr) {
    address_ = addr;
   d4f34:	6061      	str	r1, [r4, #4]

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
    hal_ble_gap_get_device_address(&halAddr, nullptr);
    return BleAddress(halAddr);
}
   d4f36:	b002      	add	sp, #8
   d4f38:	bd10      	pop	{r4, pc}

000d4f3a <_ZNK8particle14BleLocalDevice7txPowerEPa>:
int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}

int BleLocalDevice::txPower(int8_t* txPower) const {
   d4f3a:	b513      	push	{r0, r1, r4, lr}
   d4f3c:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4f3e:	a801      	add	r0, sp, #4
   d4f40:	f7ff fdc0 	bl	d4ac4 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_get_tx_power(txPower, nullptr);
   d4f44:	2100      	movs	r1, #0
   d4f46:	4620      	mov	r0, r4
   d4f48:	f7ff fb5c 	bl	d4604 <hal_ble_gap_get_tx_power>
   d4f4c:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}

int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
   d4f4e:	a801      	add	r0, sp, #4
   d4f50:	f7ff fdc6 	bl	d4ae0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}
   d4f54:	4620      	mov	r0, r4
   d4f56:	b002      	add	sp, #8
   d4f58:	bd10      	pop	{r4, pc}

000d4f5a <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>:
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d4f5a:	b530      	push	{r4, r5, lr}
   d4f5c:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4f5e:	2400      	movs	r4, #0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d4f60:	4668      	mov	r0, sp
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d4f62:	460d      	mov	r5, r1
    WiringBleLock lk;
   d4f64:	f7ff fdae 	bl	d4ac4 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4f68:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4f6a:	4621      	mov	r1, r4
   d4f6c:	a801      	add	r0, sp, #4
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4f6e:	9401      	str	r4, [sp, #4]
   d4f70:	9402      	str	r4, [sp, #8]
   d4f72:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4f74:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4f78:	f7ff fb54 	bl	d4624 <hal_ble_gap_get_advertising_parameters>
   d4f7c:	2800      	cmp	r0, #0
   d4f7e:	db05      	blt.n	d4f8c <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE+0x32>
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4f80:	4621      	mov	r1, r4
   d4f82:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
   d4f84:	f88d 500c 	strb.w	r5, [sp, #12]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4f88:	f7ff fb44 	bl	d4614 <hal_ble_gap_set_advertising_parameters>
   d4f8c:	4604      	mov	r4, r0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d4f8e:	4668      	mov	r0, sp
   d4f90:	f7ff fda6 	bl	d4ae0 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d4f94:	4620      	mov	r0, r4
   d4f96:	b005      	add	sp, #20
   d4f98:	bd30      	pop	{r4, r5, pc}

000d4f9a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d4f9a:	4608      	mov	r0, r1
   d4f9c:	b909      	cbnz	r1, d4fa2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d4f9e:	460a      	mov	r2, r1
   d4fa0:	e001      	b.n	d4fa6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d4fa2:	6a09      	ldr	r1, [r1, #32]
   d4fa4:	2200      	movs	r2, #0
   d4fa6:	f7ff bb45 	b.w	d4634 <hal_ble_gap_set_advertising_data>

000d4faa <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d4faa:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d4fac:	460c      	mov	r4, r1
   d4fae:	b911      	cbnz	r1, d4fb6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d4fb0:	460a      	mov	r2, r1
   d4fb2:	4608      	mov	r0, r1
   d4fb4:	e006      	b.n	d4fc4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d4fb6:	2101      	movs	r1, #1
   d4fb8:	4620      	mov	r0, r4
   d4fba:	f7ff feaf 	bl	d4d1c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4fbe:	6a21      	ldr	r1, [r4, #32]
   d4fc0:	2200      	movs	r2, #0
   d4fc2:	4620      	mov	r0, r4
    }
}
   d4fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4fc8:	f7ff bb44 	b.w	d4654 <hal_ble_gap_set_scan_response_data>

000d4fcc <_ZNK8particle14BleLocalDevice18getAdvertisingDataEPNS_18BleAdvertisingDataE>:
    }
}

ssize_t BleLocalDevice::getAdvertisingData(BleAdvertisingData* advertisingData) const {
   d4fcc:	b513      	push	{r0, r1, r4, lr}
   d4fce:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4fd0:	a801      	add	r0, sp, #4
   d4fd2:	f7ff fd77 	bl	d4ac4 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (advertisingData == nullptr) {
   d4fd6:	b174      	cbz	r4, d4ff6 <_ZNK8particle14BleLocalDevice18getAdvertisingDataEPNS_18BleAdvertisingDataE+0x2a>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    advertisingData->clear();
   d4fd8:	4620      	mov	r0, r4
   d4fda:	f7ff fe21 	bl	d4c20 <_ZN8particle18BleAdvertisingData5clearEv>
    size_t len = CHECK(hal_ble_gap_get_advertising_data(advertisingData->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
   d4fde:	2200      	movs	r2, #0
   d4fe0:	211f      	movs	r1, #31
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	f7ff fb2e 	bl	d4644 <hal_ble_gap_get_advertising_data>
   d4fe8:	1e03      	subs	r3, r0, #0
   d4fea:	db06      	blt.n	d4ffa <_ZNK8particle14BleLocalDevice18getAdvertisingDataEPNS_18BleAdvertisingDataE+0x2e>
    advertisingData->resize(len);
   d4fec:	4619      	mov	r1, r3
   d4fee:	4620      	mov	r0, r4
   d4ff0:	f7ff fe10 	bl	d4c14 <_ZN8particle18BleAdvertisingData6resizeEj>
   d4ff4:	e001      	b.n	d4ffa <_ZNK8particle14BleLocalDevice18getAdvertisingDataEPNS_18BleAdvertisingDataE+0x2e>
}

ssize_t BleLocalDevice::getAdvertisingData(BleAdvertisingData* advertisingData) const {
    WiringBleLock lk;
    if (advertisingData == nullptr) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d4ff6:	4c04      	ldr	r4, [pc, #16]	; (d5008 <_ZNK8particle14BleLocalDevice18getAdvertisingDataEPNS_18BleAdvertisingDataE+0x3c>)
   d4ff8:	e000      	b.n	d4ffc <_ZNK8particle14BleLocalDevice18getAdvertisingDataEPNS_18BleAdvertisingDataE+0x30>
   d4ffa:	461c      	mov	r4, r3
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}

ssize_t BleLocalDevice::getAdvertisingData(BleAdvertisingData* advertisingData) const {
    WiringBleLock lk;
   d4ffc:	a801      	add	r0, sp, #4
   d4ffe:	f7ff fd6f 	bl	d4ae0 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
    advertisingData->clear();
    size_t len = CHECK(hal_ble_gap_get_advertising_data(advertisingData->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    advertisingData->resize(len);
    return len;
}
   d5002:	4620      	mov	r0, r4
   d5004:	b002      	add	sp, #8
   d5006:	bd10      	pop	{r4, pc}
   d5008:	fffffef2 	.word	0xfffffef2

000d500c <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d500c:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d500e:	a801      	add	r0, sp, #4
   d5010:	f7ff fd58 	bl	d4ac4 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5014:	2000      	movs	r0, #0
   d5016:	f7ff fb25 	bl	d4664 <hal_ble_gap_start_advertising>
   d501a:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d501c:	a801      	add	r0, sp, #4
   d501e:	f7ff fd5f 	bl	d4ae0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5022:	4620      	mov	r0, r4
   d5024:	b002      	add	sp, #8
   d5026:	bd10      	pop	{r4, pc}

000d5028 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5028:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d502a:	4605      	mov	r5, r0
   d502c:	460c      	mov	r4, r1
    WiringBleLock lk;
   d502e:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5030:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5032:	f7ff fd47 	bl	d4ac4 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5036:	4621      	mov	r1, r4
   d5038:	4628      	mov	r0, r5
   d503a:	f7ff ffae 	bl	d4f9a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d503e:	2800      	cmp	r0, #0
   d5040:	db08      	blt.n	d5054 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5042:	4631      	mov	r1, r6
   d5044:	4628      	mov	r0, r5
   d5046:	f7ff ffb0 	bl	d4faa <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d504a:	2800      	cmp	r0, #0
   d504c:	db02      	blt.n	d5054 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d504e:	4628      	mov	r0, r5
   d5050:	f7ff ffdc 	bl	d500c <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5054:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5056:	a801      	add	r0, sp, #4
   d5058:	f7ff fd42 	bl	d4ae0 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d505c:	4620      	mov	r0, r4
   d505e:	b002      	add	sp, #8
   d5060:	bd70      	pop	{r4, r5, r6, pc}

000d5062 <_ZNK8particle14BleLocalDevice11advertisingEv>:
int BleLocalDevice::stopAdvertising() const {
    return hal_ble_gap_stop_advertising(nullptr);
}

bool BleLocalDevice::advertising() const {
    return hal_ble_gap_is_advertising(nullptr);
   d5062:	2000      	movs	r0, #0
   d5064:	f7ff bb06 	b.w	d4674 <hal_ble_gap_is_advertising>

000d5068 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d5068:	b530      	push	{r4, r5, lr}
   d506a:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d506c:	2400      	movs	r4, #0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d506e:	4668      	mov	r0, sp
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d5070:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5072:	f7ff fd27 	bl	d4ac4 <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d5076:	230c      	movs	r3, #12
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d5078:	4621      	mov	r1, r4
   d507a:	a801      	add	r0, sp, #4
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d507c:	9401      	str	r4, [sp, #4]
   d507e:	9402      	str	r4, [sp, #8]
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d5080:	f8ad 3006 	strh.w	r3, [sp, #6]
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d5084:	9403      	str	r4, [sp, #12]
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d5086:	f7ff fb05 	bl	d4694 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d508a:	4621      	mov	r1, r4
   d508c:	a801      	add	r0, sp, #4
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
   d508e:	f8ad 500c 	strh.w	r5, [sp, #12]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d5092:	f7ff faf7 	bl	d4684 <hal_ble_gap_set_scan_parameters>
   d5096:	4604      	mov	r4, r0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d5098:	4668      	mov	r0, sp
   d509a:	f7ff fd21 	bl	d4ae0 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}
   d509e:	4620      	mov	r0, r4
   d50a0:	b005      	add	sp, #20
   d50a2:	bd30      	pop	{r4, r5, pc}

000d50a4 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>:
int BleLocalDevice::getScanParameters(BleScanParams* params) const {
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   d50a4:	b530      	push	{r4, r5, lr}
   d50a6:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d50a8:	a801      	add	r0, sp, #4
int BleLocalDevice::getScanParameters(BleScanParams* params) const {
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   d50aa:	4614      	mov	r4, r2
   d50ac:	460d      	mov	r5, r1
    WiringBleLock lk;
   d50ae:	f7ff fd09 	bl	d4ac4 <_ZN8particle3ble13WiringBleLockC1Ev>
   d50b2:	2200      	movs	r2, #0
    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
        context_ = context;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d50b4:	a902      	add	r1, sp, #8
   d50b6:	480c      	ldr	r0, [pc, #48]	; (d50e8 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_+0x44>)
   d50b8:	9202      	str	r2, [sp, #8]
   d50ba:	9203      	str	r2, [sp, #12]
   d50bc:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d50be:	9205      	str	r2, [sp, #20]
   d50c0:	9206      	str	r2, [sp, #24]
   d50c2:	9207      	str	r2, [sp, #28]

    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
        context_ = context;
   d50c4:	9409      	str	r4, [sp, #36]	; 0x24
    }

    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
   d50c6:	9508      	str	r5, [sp, #32]
        context_ = context;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d50c8:	f7ff faec 	bl	d46a4 <hal_ble_gap_start_scan>
   d50cc:	2800      	cmp	r0, #0
   d50ce:	bfb8      	it	lt
   d50d0:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d50d2:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d50d4:	bfa8      	it	ge
   d50d6:	9c07      	ldrge	r4, [sp, #28]
   d50d8:	f7ff fca6 	bl	d4a28 <free>
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
    WiringBleLock lk;
   d50dc:	a801      	add	r0, sp, #4
   d50de:	f7ff fcff 	bl	d4ae0 <_ZN8particle3ble13WiringBleLockD1Ev>
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}
   d50e2:	4620      	mov	r0, r4
   d50e4:	b00b      	add	sp, #44	; 0x2c
   d50e6:	bd30      	pop	{r4, r5, pc}
   d50e8:	000d54ff 	.word	0x000d54ff

000d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d50ec:	680b      	ldr	r3, [r1, #0]
   d50ee:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d50f0:	b113      	cbz	r3, d50f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d50f2:	685a      	ldr	r2, [r3, #4]
   d50f4:	3201      	adds	r2, #1
   d50f6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d50f8:	4770      	bx	lr

000d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d50fa:	b510      	push	{r4, lr}
   d50fc:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d50fe:	6800      	ldr	r0, [r0, #0]
   d5100:	b128      	cbz	r0, d510e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5102:	6843      	ldr	r3, [r0, #4]
   d5104:	3b01      	subs	r3, #1
   d5106:	6043      	str	r3, [r0, #4]
   d5108:	b90b      	cbnz	r3, d510e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d510a:	f7ff fccb 	bl	d4aa4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d510e:	4620      	mov	r0, r4
   d5110:	bd10      	pop	{r4, pc}

000d5112 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5112:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5114:	6804      	ldr	r4, [r0, #0]
   d5116:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5118:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d511a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d511e:	42a6      	cmp	r6, r4
   d5120:	d004      	beq.n	d512c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5122:	1d20      	adds	r0, r4, #4
   d5124:	f7ff ffe9 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5128:	3408      	adds	r4, #8
   d512a:	e7f8      	b.n	d511e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d512c:	6828      	ldr	r0, [r5, #0]
   d512e:	f7ff fc7b 	bl	d4a28 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5132:	4628      	mov	r0, r5
   d5134:	bd70      	pop	{r4, r5, r6, pc}

000d5136 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5136:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5138:	6804      	ldr	r4, [r0, #0]
   d513a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d513c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d513e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5142:	42a6      	cmp	r6, r4
   d5144:	d004      	beq.n	d5150 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5146:	1d20      	adds	r0, r4, #4
   d5148:	f7ff ffd7 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d514c:	3408      	adds	r4, #8
   d514e:	e7f8      	b.n	d5142 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5150:	6828      	ldr	r0, [r5, #0]
   d5152:	f7ff fc69 	bl	d4a28 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5156:	4628      	mov	r0, r5
   d5158:	bd70      	pop	{r4, r5, r6, pc}

000d515a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d515a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d515c:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d515e:	f104 0018 	add.w	r0, r4, #24
   d5162:	f7ff ffe8 	bl	d5136 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5166:	f104 000c 	add.w	r0, r4, #12
   d516a:	f7ff ffd2 	bl	d5112 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d516e:	4620      	mov	r0, r4
   d5170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5174:	f7fe bf91 	b.w	d409a <_ZdlPv>

000d5178 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d517a:	6804      	ldr	r4, [r0, #0]
   d517c:	4607      	mov	r7, r0
   d517e:	b1c4      	cbz	r4, d51b2 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5180:	69a5      	ldr	r5, [r4, #24]
   d5182:	69e3      	ldr	r3, [r4, #28]
   d5184:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5188:	42ae      	cmp	r6, r5
   d518a:	d004      	beq.n	d5196 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d518c:	1d28      	adds	r0, r5, #4
   d518e:	f7ff ffb4 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5192:	3508      	adds	r5, #8
   d5194:	e7f8      	b.n	d5188 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5196:	69a0      	ldr	r0, [r4, #24]
   d5198:	f7ff fc46 	bl	d4a28 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d519c:	f104 000c 	add.w	r0, r4, #12
   d51a0:	f7ff ffc9 	bl	d5136 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d51a4:	4620      	mov	r0, r4
   d51a6:	f7ff ffb4 	bl	d5112 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51aa:	2134      	movs	r1, #52	; 0x34
   d51ac:	4620      	mov	r0, r4
   d51ae:	f002 f8fc 	bl	d73aa <_ZdlPvj>
   d51b2:	4638      	mov	r0, r7
   d51b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d51b8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d51b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d51ba:	2500      	movs	r5, #0
   d51bc:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d51be:	6045      	str	r5, [r0, #4]
   d51c0:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d51c2:	2024      	movs	r0, #36	; 0x24
   d51c4:	f7fe ff67 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d51c8:	4604      	mov	r4, r0
   d51ca:	b178      	cbz	r0, d51ec <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d51cc:	4603      	mov	r3, r0
   d51ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d51d2:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d51d6:	f8c0 5002 	str.w	r5, [r0, #2]
   d51da:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d51dc:	7285      	strb	r5, [r0, #10]
   d51de:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d51e0:	60c5      	str	r5, [r0, #12]
   d51e2:	6105      	str	r5, [r0, #16]
   d51e4:	6145      	str	r5, [r0, #20]
   d51e6:	6185      	str	r5, [r0, #24]
   d51e8:	61c5      	str	r5, [r0, #28]
   d51ea:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d51ec:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d51ee:	2014      	movs	r0, #20
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	f7fe ff50 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d51f6:	4603      	mov	r3, r0
   d51f8:	b128      	cbz	r0, d5206 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d51fa:	2201      	movs	r2, #1
   d51fc:	6042      	str	r2, [r0, #4]
   d51fe:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5200:	4a08      	ldr	r2, [pc, #32]	; (d5224 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5202:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5204:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5206:	a802      	add	r0, sp, #8
   d5208:	6872      	ldr	r2, [r6, #4]
   d520a:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d520e:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5210:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5212:	f7ff ff72 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5216:	6833      	ldr	r3, [r6, #0]
   d5218:	b90b      	cbnz	r3, d521e <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d521a:	f7ff fc39 	bl	d4a90 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d521e:	4630      	mov	r0, r6
   d5220:	b002      	add	sp, #8
   d5222:	bd70      	pop	{r4, r5, r6, pc}
   d5224:	000d79c4 	.word	0x000d79c4

000d5228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5228:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d522a:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d522c:	6803      	ldr	r3, [r0, #0]
   d522e:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5230:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5232:	d00c      	beq.n	d524e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5234:	b114      	cbz	r4, d523c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5236:	6863      	ldr	r3, [r4, #4]
   d5238:	3301      	adds	r3, #1
   d523a:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d523c:	6828      	ldr	r0, [r5, #0]
   d523e:	b128      	cbz	r0, d524c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5240:	6843      	ldr	r3, [r0, #4]
   d5242:	3b01      	subs	r3, #1
   d5244:	6043      	str	r3, [r0, #4]
   d5246:	b90b      	cbnz	r3, d524c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d5248:	f7ff fc2c 	bl	d4aa4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d524c:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d524e:	4628      	mov	r0, r5
   d5250:	bd38      	pop	{r3, r4, r5, pc}

000d5252 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5252:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5254:	b570      	push	{r4, r5, r6, lr}
   d5256:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5258:	d91a      	bls.n	d5290 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d525a:	4290      	cmp	r0, r2
   d525c:	d219      	bcs.n	d5292 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d525e:	f1a1 0608 	sub.w	r6, r1, #8
   d5262:	1a51      	subs	r1, r2, r1
   d5264:	3904      	subs	r1, #4
   d5266:	1f15      	subs	r5, r2, #4
   d5268:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d526a:	1f2b      	subs	r3, r5, #4
   d526c:	429e      	cmp	r6, r3
   d526e:	d025      	beq.n	d52bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5270:	2c04      	cmp	r4, #4
   d5272:	d007      	beq.n	d5284 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5274:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5278:	f844 3c04 	str.w	r3, [r4, #-4]
   d527c:	4629      	mov	r1, r5
   d527e:	4620      	mov	r0, r4
   d5280:	f7ff ff34 	bl	d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5284:	4628      	mov	r0, r5
   d5286:	f7ff ff38 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d528a:	3d08      	subs	r5, #8
   d528c:	3c08      	subs	r4, #8
   d528e:	e7ec      	b.n	d526a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5290:	d014      	beq.n	d52bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5292:	1d0c      	adds	r4, r1, #4
   d5294:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5296:	1f23      	subs	r3, r4, #4
   d5298:	429d      	cmp	r5, r3
   d529a:	d00f      	beq.n	d52bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d529c:	2e04      	cmp	r6, #4
   d529e:	d007      	beq.n	d52b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d52a4:	f846 3c04 	str.w	r3, [r6, #-4]
   d52a8:	4621      	mov	r1, r4
   d52aa:	4630      	mov	r0, r6
   d52ac:	f7ff ff1e 	bl	d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52b0:	4620      	mov	r0, r4
   d52b2:	f7ff ff22 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52b6:	3408      	adds	r4, #8
   d52b8:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d52ba:	e7ec      	b.n	d5296 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d52bc:	bd70      	pop	{r4, r5, r6, pc}

000d52be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d52be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d52c2:	6804      	ldr	r4, [r0, #0]
   d52c4:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d52c6:	4605      	mov	r5, r0
   d52c8:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d52ca:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d52ce:	42a7      	cmp	r7, r4
   d52d0:	d018      	beq.n	d5304 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d52d2:	4641      	mov	r1, r8
   d52d4:	4620      	mov	r0, r4
   d52d6:	f7ff fdba 	bl	d4e4e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d52da:	4606      	mov	r6, r0
   d52dc:	b908      	cbnz	r0, d52e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d52de:	3408      	adds	r4, #8
   d52e0:	e7f5      	b.n	d52ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d52e2:	b18c      	cbz	r4, d5308 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d52e4:	1d20      	adds	r0, r4, #4
   d52e6:	f7ff ff08 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d52ea:	682b      	ldr	r3, [r5, #0]
   d52ec:	686a      	ldr	r2, [r5, #4]
   d52ee:	f104 0108 	add.w	r1, r4, #8
   d52f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d52f6:	4620      	mov	r0, r4
   d52f8:	f7ff ffab 	bl	d5252 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d52fc:	686b      	ldr	r3, [r5, #4]
   d52fe:	3b01      	subs	r3, #1
   d5300:	606b      	str	r3, [r5, #4]
    return true;
   d5302:	e002      	b.n	d530a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5304:	2600      	movs	r6, #0
   d5306:	e000      	b.n	d530a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5308:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d530a:	4630      	mov	r0, r6
   d530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5310 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5312:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5314:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5318:	6847      	ldr	r7, [r0, #4]
   d531a:	9300      	str	r3, [sp, #0]
   d531c:	a801      	add	r0, sp, #4
   d531e:	f7ff fee5 	bl	d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5322:	6866      	ldr	r6, [r4, #4]
   d5324:	68a3      	ldr	r3, [r4, #8]
   d5326:	429e      	cmp	r6, r3
   d5328:	db14      	blt.n	d5354 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d532a:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d532c:	2e00      	cmp	r6, #0
   d532e:	dd0b      	ble.n	d5348 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5330:	00f0      	lsls	r0, r6, #3
   d5332:	f7ff fb71 	bl	d4a18 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5336:	4605      	mov	r5, r0
   d5338:	b318      	cbz	r0, d5382 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d533a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d533e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5342:	f7ff ff86 	bl	d5252 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5346:	e000      	b.n	d534a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5348:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d534a:	6820      	ldr	r0, [r4, #0]
   d534c:	f7ff fb6c 	bl	d4a28 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5350:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5352:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5354:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5356:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5358:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d535c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5360:	4629      	mov	r1, r5
   d5362:	f105 0008 	add.w	r0, r5, #8
   d5366:	f7ff ff74 	bl	d5252 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d536a:	b135      	cbz	r5, d537a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d536c:	9b00      	ldr	r3, [sp, #0]
   d536e:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5372:	a901      	add	r1, sp, #4
   d5374:	1d28      	adds	r0, r5, #4
   d5376:	f7ff feb9 	bl	d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d537a:	6863      	ldr	r3, [r4, #4]
   d537c:	3301      	adds	r3, #1
   d537e:	6063      	str	r3, [r4, #4]
   d5380:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5382:	a801      	add	r0, sp, #4
   d5384:	f7ff feb9 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5388:	4628      	mov	r0, r5
   d538a:	b003      	add	sp, #12
   d538c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5390 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5394:	4604      	mov	r4, r0
   d5396:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5398:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d539a:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d539c:	f7ff fb92 	bl	d4ac4 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d53a0:	6823      	ldr	r3, [r4, #0]
   d53a2:	2b03      	cmp	r3, #3
   d53a4:	d002      	beq.n	d53ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d53a6:	2b04      	cmp	r3, #4
   d53a8:	d042      	beq.n	d5430 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d53aa:	e087      	b.n	d54bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d53ac:	a804      	add	r0, sp, #16
   d53ae:	f7ff ff03 	bl	d51b8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d53b2:	9b04      	ldr	r3, [sp, #16]
   d53b4:	8922      	ldrh	r2, [r4, #8]
   d53b6:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d53b8:	6862      	ldr	r2, [r4, #4]
   d53ba:	9904      	ldr	r1, [sp, #16]
   d53bc:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d53c0:	f8c1 3002 	str.w	r3, [r1, #2]
   d53c4:	6853      	ldr	r3, [r2, #4]
   d53c6:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53ca:	a807      	add	r0, sp, #28
   d53cc:	9b04      	ldr	r3, [sp, #16]
   d53ce:	9306      	str	r3, [sp, #24]
   d53d0:	a905      	add	r1, sp, #20
   d53d2:	f7ff fe8b 	bl	d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d53d6:	a906      	add	r1, sp, #24
   d53d8:	f105 0018 	add.w	r0, r5, #24
   d53dc:	f7ff ff98 	bl	d5310 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d53e0:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53e2:	a807      	add	r0, sp, #28
   d53e4:	f7ff fe89 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53e8:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d53ea:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d53ec:	b974      	cbnz	r4, d540c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d53ee:	4b36      	ldr	r3, [pc, #216]	; (d54c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d53f0:	9300      	str	r3, [sp, #0]
   d53f2:	aa06      	add	r2, sp, #24
   d53f4:	4623      	mov	r3, r4
   d53f6:	4935      	ldr	r1, [pc, #212]	; (d54cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d53f8:	9407      	str	r4, [sp, #28]
   d53fa:	2032      	movs	r0, #50	; 0x32
   d53fc:	f7ff fa78 	bl	d48f0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5400:	9b04      	ldr	r3, [sp, #16]
   d5402:	4621      	mov	r1, r4
   d5404:	8818      	ldrh	r0, [r3, #0]
   d5406:	f7ff f95f 	bl	d46c8 <hal_ble_gap_disconnect>
   d540a:	e00d      	b.n	d5428 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d540c:	4a30      	ldr	r2, [pc, #192]	; (d54d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d540e:	9200      	str	r2, [sp, #0]
   d5410:	2300      	movs	r3, #0
   d5412:	aa06      	add	r2, sp, #24
   d5414:	492d      	ldr	r1, [pc, #180]	; (d54cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5416:	9307      	str	r3, [sp, #28]
   d5418:	2001      	movs	r0, #1
   d541a:	f7ff fa69 	bl	d48f0 <log_message>
                if (impl->connectedCb_) {
   d541e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5420:	b113      	cbz	r3, d5428 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5422:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5424:	a804      	add	r0, sp, #16
   d5426:	4798      	blx	r3
   d5428:	a805      	add	r0, sp, #20
   d542a:	f7ff fe66 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d542e:	e045      	b.n	d54bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5430:	8921      	ldrh	r1, [r4, #8]
   d5432:	4628      	mov	r0, r5
   d5434:	f7ff fcf2 	bl	d4e1c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5438:	4607      	mov	r7, r0
   d543a:	2800      	cmp	r0, #0
   d543c:	d03e      	beq.n	d54bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d543e:	6804      	ldr	r4, [r0, #0]
   d5440:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5442:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5444:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5448:	8022      	strh	r2, [r4, #0]
   d544a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d544e:	4299      	cmp	r1, r3
   d5450:	d003      	beq.n	d545a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5452:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5456:	8042      	strh	r2, [r0, #2]
   d5458:	e7f9      	b.n	d544e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d545a:	68e6      	ldr	r6, [r4, #12]
   d545c:	6923      	ldr	r3, [r4, #16]
   d545e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5462:	45b0      	cmp	r8, r6
   d5464:	d004      	beq.n	d5470 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5466:	1d30      	adds	r0, r6, #4
   d5468:	f7ff fe47 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d546c:	3608      	adds	r6, #8
   d546e:	e7f8      	b.n	d5462 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5470:	2300      	movs	r3, #0
   d5472:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5474:	69a6      	ldr	r6, [r4, #24]
   d5476:	69e3      	ldr	r3, [r4, #28]
   d5478:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d547c:	45b0      	cmp	r8, r6
   d547e:	d004      	beq.n	d548a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5480:	1d30      	adds	r0, r6, #4
   d5482:	f7ff fe3a 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5486:	3608      	adds	r6, #8
   d5488:	e7f8      	b.n	d547c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d548a:	2300      	movs	r3, #0
   d548c:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d548e:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5490:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5492:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5494:	b113      	cbz	r3, d549c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5496:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5498:	4638      	mov	r0, r7
   d549a:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d549c:	2320      	movs	r3, #32
   d549e:	4a0d      	ldr	r2, [pc, #52]	; (d54d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d54a0:	9306      	str	r3, [sp, #24]
   d54a2:	9200      	str	r2, [sp, #0]
   d54a4:	2300      	movs	r3, #0
   d54a6:	4909      	ldr	r1, [pc, #36]	; (d54cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d54a8:	9307      	str	r3, [sp, #28]
   d54aa:	2001      	movs	r0, #1
   d54ac:	aa06      	add	r2, sp, #24
   d54ae:	f7ff fa1f 	bl	d48f0 <log_message>
                    impl->peers_.removeOne(*peer);
   d54b2:	4639      	mov	r1, r7
   d54b4:	f105 0018 	add.w	r0, r5, #24
   d54b8:	f7ff ff01 	bl	d52be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d54bc:	a803      	add	r0, sp, #12
   d54be:	f7ff fb0f 	bl	d4ae0 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d54c2:	b00e      	add	sp, #56	; 0x38
   d54c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d54c8:	000d7a3a 	.word	0x000d7a3a
   d54cc:	000d79d8 	.word	0x000d79d8
   d54d0:	000d7a60 	.word	0x000d7a60
   d54d4:	000d7a7d 	.word	0x000d7a7d

000d54d8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d54d8:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d54da:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d54dc:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d54de:	dd06      	ble.n	d54ee <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d54e0:	2154      	movs	r1, #84	; 0x54
   d54e2:	4369      	muls	r1, r5
   d54e4:	6800      	ldr	r0, [r0, #0]
   d54e6:	f7ff faa7 	bl	d4a38 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d54ea:	b920      	cbnz	r0, d54f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d54ec:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d54ee:	6800      	ldr	r0, [r0, #0]
   d54f0:	f7ff fa9a 	bl	d4a28 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d54f4:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d54f6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d54f8:	60a5      	str	r5, [r4, #8]
        return true;
   d54fa:	2001      	movs	r0, #1
    }
   d54fc:	bd38      	pop	{r3, r4, r5, pc}

000d54fe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d54fe:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5500:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5502:	b0c0      	sub	sp, #256	; 0x100
   d5504:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5506:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5508:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d550a:	a801      	add	r0, sp, #4
   d550c:	2100      	movs	r1, #0
   d550e:	f002 f8f2 	bl	d76f6 <memset>
   d5512:	a803      	add	r0, sp, #12
   d5514:	f7ff fbe8 	bl	d4ce8 <_ZN8particle18BleAdvertisingDataC1Ev>
   d5518:	a80c      	add	r0, sp, #48	; 0x30
   d551a:	f7ff fbe5 	bl	d4ce8 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d551e:	462a      	mov	r2, r5
   d5520:	ab01      	add	r3, sp, #4
   d5522:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d5526:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5528:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d552a:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d552c:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d552e:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5530:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5534:	a80c      	add	r0, sp, #48	; 0x30
   d5536:	f7ff fb5d 	bl	d4bf4 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d553a:	89aa      	ldrh	r2, [r5, #12]
   d553c:	6869      	ldr	r1, [r5, #4]
   d553e:	a803      	add	r0, sp, #12
   d5540:	f7ff fb58 	bl	d4bf4 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d5544:	69a5      	ldr	r5, [r4, #24]
   d5546:	b11d      	cbz	r5, d5550 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d5548:	69e1      	ldr	r1, [r4, #28]
   d554a:	a801      	add	r0, sp, #4
   d554c:	47a8      	blx	r5
   d554e:	e03c      	b.n	d55ca <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d5550:	68e0      	ldr	r0, [r4, #12]
   d5552:	b198      	cbz	r0, d557c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d5554:	6963      	ldr	r3, [r4, #20]
   d5556:	6922      	ldr	r2, [r4, #16]
   d5558:	4293      	cmp	r3, r2
   d555a:	d239      	bcs.n	d55d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d555c:	1c5a      	adds	r2, r3, #1
   d555e:	6162      	str	r2, [r4, #20]
   d5560:	fb06 0003 	mla	r0, r6, r3, r0
   d5564:	2251      	movs	r2, #81	; 0x51
   d5566:	a901      	add	r1, sp, #4
   d5568:	f002 f89f 	bl	d76aa <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d556c:	6962      	ldr	r2, [r4, #20]
   d556e:	6923      	ldr	r3, [r4, #16]
   d5570:	429a      	cmp	r2, r3
   d5572:	d32d      	bcc.n	d55d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d5574:	4628      	mov	r0, r5
   d5576:	f7ff f89d 	bl	d46b4 <hal_ble_gap_stop_scan>
   d557a:	e029      	b.n	d55d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d557c:	4632      	mov	r2, r6
   d557e:	a901      	add	r1, sp, #4
   d5580:	a816      	add	r0, sp, #88	; 0x58
   d5582:	f002 f892 	bl	d76aa <memcpy>
   d5586:	4632      	mov	r2, r6
   d5588:	a916      	add	r1, sp, #88	; 0x58
   d558a:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d558c:	6865      	ldr	r5, [r4, #4]
   d558e:	f002 f88c 	bl	d76aa <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5592:	68a3      	ldr	r3, [r4, #8]
   d5594:	429d      	cmp	r5, r3
   d5596:	db04      	blt.n	d55a2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d5598:	1c69      	adds	r1, r5, #1
   d559a:	4620      	mov	r0, r4
   d559c:	f7ff ff9c 	bl	d54d8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d55a0:	b1b0      	cbz	r0, d55d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d55a2:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d55a4:	6822      	ldr	r2, [r4, #0]
   d55a6:	2654      	movs	r6, #84	; 0x54
   d55a8:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d55ac:	fb06 2203 	mla	r2, r6, r3, r2
   d55b0:	1b52      	subs	r2, r2, r5
   d55b2:	4629      	mov	r1, r5
   d55b4:	19a8      	adds	r0, r5, r6
   d55b6:	f002 f883 	bl	d76c0 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d55ba:	4632      	mov	r2, r6
   d55bc:	a92b      	add	r1, sp, #172	; 0xac
   d55be:	4628      	mov	r0, r5
   d55c0:	f002 f873 	bl	d76aa <memcpy>
    ++size_;
   d55c4:	6863      	ldr	r3, [r4, #4]
   d55c6:	3301      	adds	r3, #1
   d55c8:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d55ca:	6963      	ldr	r3, [r4, #20]
   d55cc:	3301      	adds	r3, #1
   d55ce:	6163      	str	r3, [r4, #20]
        }
    }
   d55d0:	b040      	add	sp, #256	; 0x100
   d55d2:	bd70      	pop	{r4, r5, r6, pc}

000d55d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d55d4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d55d6:	4c06      	ldr	r4, [pc, #24]	; (d55f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d55d8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d55da:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d55dc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d55de:	f7ff f89f 	bl	d4720 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d55e2:	4620      	mov	r0, r4
   d55e4:	4a03      	ldr	r2, [pc, #12]	; (d55f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d55e6:	4904      	ldr	r1, [pc, #16]	; (d55f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d55e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d55ec:	f001 bed8 	b.w	d73a0 <__aeabi_atexit>
   d55f0:	2003e3c0 	.word	0x2003e3c0
   d55f4:	2003e2f4 	.word	0x2003e2f4
   d55f8:	000d4a81 	.word	0x000d4a81

000d55fc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d55fc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d55fe:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5600:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5602:	b113      	cbz	r3, d560a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5604:	2203      	movs	r2, #3
   d5606:	4601      	mov	r1, r0
   d5608:	4798      	blx	r3
    }
   d560a:	4620      	mov	r0, r4
   d560c:	bd10      	pop	{r4, pc}

000d560e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d560e:	2200      	movs	r2, #0
   d5610:	4611      	mov	r1, r2
   d5612:	6840      	ldr	r0, [r0, #4]
   d5614:	f7ff b9e8 	b.w	d49e8 <network_listening>

000d5618 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5618:	2200      	movs	r2, #0
   d561a:	4611      	mov	r1, r2
   d561c:	6840      	ldr	r0, [r0, #4]
   d561e:	f7ff b9f3 	b.w	d4a08 <network_get_listen_timeout>

000d5622 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5622:	2200      	movs	r2, #0
   d5624:	6840      	ldr	r0, [r0, #4]
   d5626:	f7ff b9e7 	b.w	d49f8 <network_set_listen_timeout>

000d562a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d562a:	2200      	movs	r2, #0
   d562c:	f081 0101 	eor.w	r1, r1, #1
   d5630:	6840      	ldr	r0, [r0, #4]
   d5632:	f7ff b9d1 	b.w	d49d8 <network_listen>

000d5636 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5636:	2300      	movs	r3, #0
   d5638:	461a      	mov	r2, r3
   d563a:	4619      	mov	r1, r3
   d563c:	6840      	ldr	r0, [r0, #4]
   d563e:	f7ff b9c3 	b.w	d49c8 <network_off>

000d5642 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5642:	2300      	movs	r3, #0
   d5644:	461a      	mov	r2, r3
   d5646:	4619      	mov	r1, r3
   d5648:	6840      	ldr	r0, [r0, #4]
   d564a:	f7ff b9b5 	b.w	d49b8 <network_on>

000d564e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d564e:	2200      	movs	r2, #0
   d5650:	4611      	mov	r1, r2
   d5652:	6840      	ldr	r0, [r0, #4]
   d5654:	f7ff b9a8 	b.w	d49a8 <network_ready>

000d5658 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5658:	2200      	movs	r2, #0
   d565a:	4611      	mov	r1, r2
   d565c:	6840      	ldr	r0, [r0, #4]
   d565e:	f7ff b993 	b.w	d4988 <network_connecting>

000d5662 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5662:	2200      	movs	r2, #0
   d5664:	2102      	movs	r1, #2
   d5666:	6840      	ldr	r0, [r0, #4]
   d5668:	f7ff b996 	b.w	d4998 <network_disconnect>

000d566c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d566c:	2300      	movs	r3, #0
   d566e:	461a      	mov	r2, r3
   d5670:	6840      	ldr	r0, [r0, #4]
   d5672:	f7ff b981 	b.w	d4978 <network_connect>
	...

000d5678 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5678:	4b02      	ldr	r3, [pc, #8]	; (d5684 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d567a:	2203      	movs	r2, #3
   d567c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d567e:	4a02      	ldr	r2, [pc, #8]	; (d5688 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5680:	601a      	str	r2, [r3, #0]
   d5682:	4770      	bx	lr
   d5684:	2003e3c4 	.word	0x2003e3c4
   d5688:	000d7b90 	.word	0x000d7b90

000d568c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d568c:	4770      	bx	lr

000d568e <_ZN9IPAddressD0Ev>:
   d568e:	b510      	push	{r4, lr}
   d5690:	2118      	movs	r1, #24
   d5692:	4604      	mov	r4, r0
   d5694:	f001 fe89 	bl	d73aa <_ZdlPvj>
   d5698:	4620      	mov	r0, r4
   d569a:	bd10      	pop	{r4, pc}

000d569c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d569c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d569e:	7d03      	ldrb	r3, [r0, #20]
   d56a0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d56a2:	b08d      	sub	sp, #52	; 0x34
   d56a4:	460e      	mov	r6, r1
   d56a6:	f100 0704 	add.w	r7, r0, #4
   d56aa:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d56ae:	d002      	beq.n	d56b6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d56b0:	f100 0508 	add.w	r5, r0, #8
   d56b4:	e018      	b.n	d56e8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d56b6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d56b8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d56ba:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d56be:	232f      	movs	r3, #47	; 0x2f
   d56c0:	462a      	mov	r2, r5
   d56c2:	200a      	movs	r0, #10
   d56c4:	f7ff f86c 	bl	d47a0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d56c8:	4628      	mov	r0, r5
   d56ca:	f002 f867 	bl	d779c <strlen>
   d56ce:	6833      	ldr	r3, [r6, #0]
   d56d0:	4602      	mov	r2, r0
   d56d2:	68db      	ldr	r3, [r3, #12]
   d56d4:	4629      	mov	r1, r5
   d56d6:	4630      	mov	r0, r6
   d56d8:	4798      	blx	r3
   d56da:	e00f      	b.n	d56fc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d56dc:	b124      	cbz	r4, d56e8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d56de:	212e      	movs	r1, #46	; 0x2e
   d56e0:	4630      	mov	r0, r6
   d56e2:	f001 fb4d 	bl	d6d80 <_ZN5Print5printEc>
   d56e6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d56e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d56ec:	220a      	movs	r2, #10
   d56ee:	4630      	mov	r0, r6
   d56f0:	f001 fb55 	bl	d6d9e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56f4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56f6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56f8:	d1f0      	bne.n	d56dc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56fa:	4620      	mov	r0, r4
    }
    return n;
}
   d56fc:	b00d      	add	sp, #52	; 0x34
   d56fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5700 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5700:	b510      	push	{r4, lr}
   d5702:	4b05      	ldr	r3, [pc, #20]	; (d5718 <_ZN9IPAddressC1Ev+0x18>)
   d5704:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5706:	2211      	movs	r2, #17
   d5708:	f840 3b04 	str.w	r3, [r0], #4
   d570c:	2100      	movs	r1, #0
   d570e:	f001 fff2 	bl	d76f6 <memset>
{
    clear();
}
   d5712:	4620      	mov	r0, r4
   d5714:	bd10      	pop	{r4, pc}
   d5716:	bf00      	nop
   d5718:	000d7bc4 	.word	0x000d7bc4

000d571c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d571c:	4603      	mov	r3, r0
   d571e:	4a07      	ldr	r2, [pc, #28]	; (d573c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5720:	b510      	push	{r4, lr}
   d5722:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5726:	f101 0210 	add.w	r2, r1, #16
   d572a:	f851 4b04 	ldr.w	r4, [r1], #4
   d572e:	f843 4b04 	str.w	r4, [r3], #4
   d5732:	4291      	cmp	r1, r2
   d5734:	d1f9      	bne.n	d572a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5736:	780a      	ldrb	r2, [r1, #0]
   d5738:	701a      	strb	r2, [r3, #0]
}
   d573a:	bd10      	pop	{r4, pc}
   d573c:	000d7bc4 	.word	0x000d7bc4

000d5740 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5740:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5742:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5746:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d574a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d574e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5752:	2304      	movs	r3, #4
   d5754:	6041      	str	r1, [r0, #4]
   d5756:	7503      	strb	r3, [r0, #20]
   d5758:	bd10      	pop	{r4, pc}

000d575a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d575a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d575c:	780d      	ldrb	r5, [r1, #0]
   d575e:	788b      	ldrb	r3, [r1, #2]
   d5760:	784a      	ldrb	r2, [r1, #1]
   d5762:	78c9      	ldrb	r1, [r1, #3]
   d5764:	9100      	str	r1, [sp, #0]
   d5766:	4629      	mov	r1, r5
   d5768:	f7ff ffea 	bl	d5740 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d576c:	b003      	add	sp, #12
   d576e:	bd30      	pop	{r4, r5, pc}

000d5770 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d5770:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d5774:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d5776:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d577a:	2901      	cmp	r1, #1
   d577c:	4610      	mov	r0, r2
   d577e:	d104      	bne.n	d578a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d5780:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d5784:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d5788:	e004      	b.n	d5794 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d578a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d578c:	bf04      	itt	eq
   d578e:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d5792:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d5794:	3b01      	subs	r3, #1
   d5796:	f102 0210 	add.w	r2, r2, #16
   d579a:	d1ec      	bne.n	d5776 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d579c:	4770      	bx	lr

000d579e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d579e:	b40e      	push	{r1, r2, r3}
   d57a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d57a4:	b087      	sub	sp, #28
   d57a6:	af00      	add	r7, sp, #0
   d57a8:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d57ac:	4605      	mov	r5, r0
   d57ae:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d57b2:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d57b4:	4623      	mov	r3, r4
   d57b6:	4632      	mov	r2, r6
   d57b8:	2110      	movs	r1, #16
   d57ba:	f107 0008 	add.w	r0, r7, #8
   d57be:	f7ff f94b 	bl	d4a58 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d57c2:	280f      	cmp	r0, #15
   d57c4:	d916      	bls.n	d57f4 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d57c6:	f100 0308 	add.w	r3, r0, #8
   d57ca:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d57ce:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d57d0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d57d4:	4632      	mov	r2, r6
   d57d6:	1c41      	adds	r1, r0, #1
   d57d8:	4623      	mov	r3, r4
   d57da:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d57dc:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d57de:	f7ff f93b 	bl	d4a58 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d57e2:	1e02      	subs	r2, r0, #0
   d57e4:	dd04      	ble.n	d57f0 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d57e6:	682b      	ldr	r3, [r5, #0]
   d57e8:	4669      	mov	r1, sp
   d57ea:	689b      	ldr	r3, [r3, #8]
   d57ec:	4628      	mov	r0, r5
   d57ee:	4798      	blx	r3
   d57f0:	46c5      	mov	sp, r8
   d57f2:	e007      	b.n	d5804 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d57f4:	b130      	cbz	r0, d5804 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d57f6:	682b      	ldr	r3, [r5, #0]
   d57f8:	4602      	mov	r2, r0
   d57fa:	689b      	ldr	r3, [r3, #8]
   d57fc:	f107 0108 	add.w	r1, r7, #8
   d5800:	4628      	mov	r0, r5
   d5802:	4798      	blx	r3
    }
}
   d5804:	371c      	adds	r7, #28
   d5806:	46bd      	mov	sp, r7
   d5808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d580c:	b003      	add	sp, #12
   d580e:	4770      	bx	lr

000d5810 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5810:	b513      	push	{r0, r1, r4, lr}
   d5812:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5814:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5816:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d581a:	6894      	ldr	r4, [r2, #8]
   d581c:	4619      	mov	r1, r3
   d581e:	2201      	movs	r2, #1
   d5820:	47a0      	blx	r4
}
   d5822:	b002      	add	sp, #8
   d5824:	bd10      	pop	{r4, pc}

000d5826 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d5826:	6883      	ldr	r3, [r0, #8]
   d5828:	b1fb      	cbz	r3, d586a <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d582a:	781a      	ldrb	r2, [r3, #0]
   d582c:	2a03      	cmp	r2, #3
   d582e:	d81a      	bhi.n	d5866 <_ZNK5spark9JSONValue4typeEv+0x40>
   d5830:	e8df f002 	tbb	[pc, r2]
   d5834:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d5838:	2005      	movs	r0, #5
   d583a:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d583c:	6802      	ldr	r2, [r0, #0]
   d583e:	685b      	ldr	r3, [r3, #4]
   d5840:	6852      	ldr	r2, [r2, #4]
   d5842:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d5844:	282d      	cmp	r0, #45	; 0x2d
   d5846:	d014      	beq.n	d5872 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d5848:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d584c:	2b09      	cmp	r3, #9
   d584e:	d910      	bls.n	d5872 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d5850:	2874      	cmp	r0, #116	; 0x74
   d5852:	d010      	beq.n	d5876 <_ZNK5spark9JSONValue4typeEv+0x50>
   d5854:	2866      	cmp	r0, #102	; 0x66
   d5856:	d00e      	beq.n	d5876 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d5858:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d585c:	4258      	negs	r0, r3
   d585e:	4158      	adcs	r0, r3
   d5860:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d5862:	2006      	movs	r0, #6
   d5864:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d5866:	2000      	movs	r0, #0
   d5868:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d586a:	4618      	mov	r0, r3
   d586c:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d586e:	2004      	movs	r0, #4
   d5870:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d5872:	2003      	movs	r0, #3
   d5874:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d5876:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d5878:	4770      	bx	lr

000d587a <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d587a:	b510      	push	{r4, lr}
   d587c:	4604      	mov	r4, r0
    switch (type()) {
   d587e:	f7ff ffd2 	bl	d5826 <_ZNK5spark9JSONValue4typeEv>
   d5882:	2802      	cmp	r0, #2
   d5884:	d00d      	beq.n	d58a2 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d5886:	d316      	bcc.n	d58b6 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d5888:	2804      	cmp	r0, #4
   d588a:	d814      	bhi.n	d58b6 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d588c:	6822      	ldr	r2, [r4, #0]
   d588e:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d5890:	6850      	ldr	r0, [r2, #4]
   d5892:	685b      	ldr	r3, [r3, #4]
   d5894:	220a      	movs	r2, #10
   d5896:	2100      	movs	r1, #0
   d5898:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d589e:	f002 b833 	b.w	d7908 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d58a2:	6822      	ldr	r2, [r4, #0]
   d58a4:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d58a6:	6852      	ldr	r2, [r2, #4]
   d58a8:	685b      	ldr	r3, [r3, #4]
   d58aa:	5cd0      	ldrb	r0, [r2, r3]
   d58ac:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d58b0:	4258      	negs	r0, r3
   d58b2:	4158      	adcs	r0, r3
   d58b4:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d58b6:	2000      	movs	r0, #0
    }
}
   d58b8:	bd10      	pop	{r4, pc}

000d58ba <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d58ba:	b510      	push	{r4, lr}
    if (!n_) {
   d58bc:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d58be:	4604      	mov	r4, r0
    if (!n_) {
   d58c0:	b15b      	cbz	r3, d58da <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d58c2:	6880      	ldr	r0, [r0, #8]
   d58c4:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d58c6:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d58c8:	3010      	adds	r0, #16
   d58ca:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d58cc:	6120      	str	r0, [r4, #16]
    --n_;
   d58ce:	6163      	str	r3, [r4, #20]
    if (n_) {
   d58d0:	b12b      	cbz	r3, d58de <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d58d2:	f7ff ff4d 	bl	d5770 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d58d6:	60a0      	str	r0, [r4, #8]
   d58d8:	e001      	b.n	d58de <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d58da:	4618      	mov	r0, r3
   d58dc:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d58de:	2001      	movs	r0, #1
}
   d58e0:	bd10      	pop	{r4, pc}

000d58e2 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d58e2:	b510      	push	{r4, lr}
    write('}');
   d58e4:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d58e6:	4604      	mov	r4, r0
    write('}');
   d58e8:	f7ff ff92 	bl	d5810 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d58ec:	2301      	movs	r3, #1
   d58ee:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d58f0:	4620      	mov	r0, r4
   d58f2:	bd10      	pop	{r4, pc}

000d58f4 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d58f4:	b508      	push	{r3, lr}
    switch (state_) {
   d58f6:	7903      	ldrb	r3, [r0, #4]
   d58f8:	2b01      	cmp	r3, #1
   d58fa:	d002      	beq.n	d5902 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d58fc:	2b02      	cmp	r3, #2
   d58fe:	d002      	beq.n	d5906 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d5900:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d5902:	212c      	movs	r1, #44	; 0x2c
   d5904:	e000      	b.n	d5908 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d5906:	213a      	movs	r1, #58	; 0x3a
   d5908:	f7ff ff82 	bl	d5810 <_ZN5spark10JSONWriter5writeEc>
   d590c:	bd08      	pop	{r3, pc}

000d590e <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d590e:	b510      	push	{r4, lr}
   d5910:	4604      	mov	r4, r0
    writeSeparator();
   d5912:	f7ff ffef 	bl	d58f4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d5916:	4620      	mov	r0, r4
   d5918:	217b      	movs	r1, #123	; 0x7b
   d591a:	f7ff ff79 	bl	d5810 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d591e:	2300      	movs	r3, #0
   d5920:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5922:	4620      	mov	r0, r4
   d5924:	bd10      	pop	{r4, pc}
	...

000d5928 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d5928:	b538      	push	{r3, r4, r5, lr}
   d592a:	4604      	mov	r4, r0
   d592c:	460d      	mov	r5, r1
    writeSeparator();
   d592e:	f7ff ffe1 	bl	d58f4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d5932:	6823      	ldr	r3, [r4, #0]
   d5934:	4904      	ldr	r1, [pc, #16]	; (d5948 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d5936:	68db      	ldr	r3, [r3, #12]
   d5938:	4620      	mov	r0, r4
   d593a:	462a      	mov	r2, r5
   d593c:	4798      	blx	r3
    state_ = NEXT;
   d593e:	2301      	movs	r3, #1
   d5940:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5942:	4620      	mov	r0, r4
   d5944:	bd38      	pop	{r3, r4, r5, pc}
   d5946:	bf00      	nop
   d5948:	000d79a0 	.word	0x000d79a0

000d594c <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d594c:	b538      	push	{r3, r4, r5, lr}
   d594e:	4604      	mov	r4, r0
   d5950:	460d      	mov	r5, r1
    writeSeparator();
   d5952:	f7ff ffcf 	bl	d58f4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d5956:	6823      	ldr	r3, [r4, #0]
   d5958:	4904      	ldr	r1, [pc, #16]	; (d596c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d595a:	68db      	ldr	r3, [r3, #12]
   d595c:	4620      	mov	r0, r4
   d595e:	462a      	mov	r2, r5
   d5960:	4798      	blx	r3
    state_ = NEXT;
   d5962:	2301      	movs	r3, #1
   d5964:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5966:	4620      	mov	r0, r4
   d5968:	bd38      	pop	{r3, r4, r5, pc}
   d596a:	bf00      	nop
   d596c:	000d7bdf 	.word	0x000d7bdf

000d5970 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5972:	460d      	mov	r5, r1
   d5974:	4617      	mov	r7, r2
    write('"');
   d5976:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5978:	4604      	mov	r4, r0
   d597a:	442f      	add	r7, r5
    write('"');
   d597c:	f7ff ff48 	bl	d5810 <_ZN5spark10JSONWriter5writeEc>
   d5980:	462a      	mov	r2, r5
    const char* const end = str + size;
   d5982:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d5984:	42ba      	cmp	r2, r7
   d5986:	d038      	beq.n	d59fa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d5988:	4616      	mov	r6, r2
   d598a:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d598e:	2d22      	cmp	r5, #34	; 0x22
   d5990:	d003      	beq.n	d599a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d5992:	2d5c      	cmp	r5, #92	; 0x5c
   d5994:	d001      	beq.n	d599a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d5996:	2d1f      	cmp	r5, #31
   d5998:	d82d      	bhi.n	d59f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d599a:	6823      	ldr	r3, [r4, #0]
   d599c:	1a52      	subs	r2, r2, r1
   d599e:	689b      	ldr	r3, [r3, #8]
   d59a0:	4620      	mov	r0, r4
   d59a2:	4798      	blx	r3
            write('\\');
   d59a4:	215c      	movs	r1, #92	; 0x5c
   d59a6:	4620      	mov	r0, r4
   d59a8:	f7ff ff32 	bl	d5810 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d59ac:	2d0c      	cmp	r5, #12
   d59ae:	d019      	beq.n	d59e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d59b0:	d807      	bhi.n	d59c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d59b2:	2d09      	cmp	r5, #9
   d59b4:	d00f      	beq.n	d59d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d59b6:	2d0a      	cmp	r5, #10
   d59b8:	d012      	beq.n	d59e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d59ba:	2d08      	cmp	r5, #8
   d59bc:	d114      	bne.n	d59e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d59be:	2162      	movs	r1, #98	; 0x62
   d59c0:	e00a      	b.n	d59d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d59c2:	2d22      	cmp	r5, #34	; 0x22
   d59c4:	d005      	beq.n	d59d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d59c6:	2d5c      	cmp	r5, #92	; 0x5c
   d59c8:	d003      	beq.n	d59d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d59ca:	2d0d      	cmp	r5, #13
   d59cc:	d10c      	bne.n	d59e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d59ce:	2172      	movs	r1, #114	; 0x72
   d59d0:	e002      	b.n	d59d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d59d2:	4629      	mov	r1, r5
   d59d4:	e000      	b.n	d59d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d59d6:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d59d8:	4620      	mov	r0, r4
   d59da:	f7ff ff19 	bl	d5810 <_ZN5spark10JSONWriter5writeEc>
                break;
   d59de:	e009      	b.n	d59f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d59e0:	216e      	movs	r1, #110	; 0x6e
   d59e2:	e7f9      	b.n	d59d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d59e4:	2166      	movs	r1, #102	; 0x66
   d59e6:	e7f7      	b.n	d59d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d59e8:	6823      	ldr	r3, [r4, #0]
   d59ea:	490a      	ldr	r1, [pc, #40]	; (d5a14 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d59ec:	68db      	ldr	r3, [r3, #12]
   d59ee:	462a      	mov	r2, r5
   d59f0:	4620      	mov	r0, r4
   d59f2:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d59f4:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d59f6:	4632      	mov	r2, r6
   d59f8:	e7c4      	b.n	d5984 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d59fa:	4291      	cmp	r1, r2
   d59fc:	d004      	beq.n	d5a08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d59fe:	6823      	ldr	r3, [r4, #0]
   d5a00:	1a52      	subs	r2, r2, r1
   d5a02:	689d      	ldr	r5, [r3, #8]
   d5a04:	4620      	mov	r0, r4
   d5a06:	47a8      	blx	r5
    }
    write('"');
   d5a08:	2122      	movs	r1, #34	; 0x22
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	f7ff ff00 	bl	d5810 <_ZN5spark10JSONWriter5writeEc>
   d5a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5a12:	bf00      	nop
   d5a14:	000d7bf0 	.word	0x000d7bf0

000d5a18 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d5a18:	b570      	push	{r4, r5, r6, lr}
   d5a1a:	4604      	mov	r4, r0
   d5a1c:	460d      	mov	r5, r1
   d5a1e:	4616      	mov	r6, r2
    writeSeparator();
   d5a20:	f7ff ff68 	bl	d58f4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d5a24:	4620      	mov	r0, r4
   d5a26:	4632      	mov	r2, r6
   d5a28:	4629      	mov	r1, r5
   d5a2a:	f7ff ffa1 	bl	d5970 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d5a2e:	2302      	movs	r3, #2
   d5a30:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5a32:	4620      	mov	r0, r4
   d5a34:	bd70      	pop	{r4, r5, r6, pc}

000d5a36 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d5a36:	b570      	push	{r4, r5, r6, lr}
   d5a38:	4604      	mov	r4, r0
   d5a3a:	460d      	mov	r5, r1
   d5a3c:	4616      	mov	r6, r2
    writeSeparator();
   d5a3e:	f7ff ff59 	bl	d58f4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d5a42:	4620      	mov	r0, r4
   d5a44:	4632      	mov	r2, r6
   d5a46:	4629      	mov	r1, r5
   d5a48:	f7ff ff92 	bl	d5970 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d5a4c:	2301      	movs	r3, #1
   d5a4e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5a50:	4620      	mov	r0, r4
   d5a52:	bd70      	pop	{r4, r5, r6, pc}

000d5a54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a54:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5a56:	2300      	movs	r3, #0
   d5a58:	4604      	mov	r4, r0
   d5a5a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a5c:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5a5e:	4810      	ldr	r0, [pc, #64]	; (d5aa0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d5a60:	60a0      	str	r0, [r4, #8]
   d5a62:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5a64:	b1d1      	cbz	r1, d5a9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d5a66:	780b      	ldrb	r3, [r1, #0]
   d5a68:	2b03      	cmp	r3, #3
   d5a6a:	d006      	beq.n	d5a7a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5a6c:	b9b3      	cbnz	r3, d5a9c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5a6e:	6813      	ldr	r3, [r2, #0]
   d5a70:	6858      	ldr	r0, [r3, #4]
   d5a72:	684b      	ldr	r3, [r1, #4]
   d5a74:	5cc3      	ldrb	r3, [r0, r3]
   d5a76:	2b6e      	cmp	r3, #110	; 0x6e
   d5a78:	d008      	beq.n	d5a8c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d5a7a:	6813      	ldr	r3, [r2, #0]
   d5a7c:	6858      	ldr	r0, [r3, #4]
   d5a7e:	684b      	ldr	r3, [r1, #4]
   d5a80:	4403      	add	r3, r0
   d5a82:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d5a84:	688b      	ldr	r3, [r1, #8]
   d5a86:	6849      	ldr	r1, [r1, #4]
   d5a88:	1a5b      	subs	r3, r3, r1
   d5a8a:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5a8c:	4611      	mov	r1, r2
   d5a8e:	4620      	mov	r0, r4
   d5a90:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a94:	f840 3b04 	str.w	r3, [r0], #4
   d5a98:	f7ff fbc6 	bl	d5228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	bd10      	pop	{r4, pc}
   d5aa0:	000d7cc8 	.word	0x000d7cc8

000d5aa4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5aa4:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5aa6:	b510      	push	{r4, lr}
   d5aa8:	4604      	mov	r4, r0
   d5aaa:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5aac:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5aae:	6083      	str	r3, [r0, #8]
   d5ab0:	60c3      	str	r3, [r0, #12]
   d5ab2:	6103      	str	r3, [r0, #16]
   d5ab4:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5ab6:	b171      	cbz	r1, d5ad6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d5ab8:	780b      	ldrb	r3, [r1, #0]
   d5aba:	2b01      	cmp	r3, #1
   d5abc:	d10b      	bne.n	d5ad6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d5abe:	f101 0310 	add.w	r3, r1, #16
   d5ac2:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d5ac4:	68cb      	ldr	r3, [r1, #12]
   d5ac6:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5ac8:	4611      	mov	r1, r2
   d5aca:	f851 3b04 	ldr.w	r3, [r1], #4
   d5ace:	f840 3b04 	str.w	r3, [r0], #4
   d5ad2:	f7ff fba9 	bl	d5228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d5ad6:	4620      	mov	r0, r4
   d5ad8:	bd10      	pop	{r4, pc}

000d5ada <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5ada:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5adc:	b510      	push	{r4, lr}
   d5ade:	4604      	mov	r4, r0
   d5ae0:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5ae2:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d5ae4:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d5ae6:	b131      	cbz	r1, d5af6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5ae8:	4611      	mov	r1, r2
   d5aea:	f851 3b04 	ldr.w	r3, [r1], #4
   d5aee:	f840 3b04 	str.w	r3, [r0], #4
   d5af2:	f7ff fb99 	bl	d5228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d5af6:	4620      	mov	r0, r4
   d5af8:	bd10      	pop	{r4, pc}

000d5afa <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5afa:	6880      	ldr	r0, [r0, #8]
   d5afc:	6803      	ldr	r3, [r0, #0]
   d5afe:	68db      	ldr	r3, [r3, #12]
   d5b00:	4718      	bx	r3

000d5b02 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d5b02:	4770      	bx	lr

000d5b04 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5b04:	b119      	cbz	r1, d5b0e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d5b06:	680b      	ldr	r3, [r1, #0]
   d5b08:	4608      	mov	r0, r1
   d5b0a:	685b      	ldr	r3, [r3, #4]
   d5b0c:	4718      	bx	r3
   d5b0e:	4770      	bx	lr

000d5b10 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5b10:	b119      	cbz	r1, d5b1a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d5b12:	680b      	ldr	r3, [r1, #0]
   d5b14:	4608      	mov	r0, r1
   d5b16:	685b      	ldr	r3, [r3, #4]
   d5b18:	4718      	bx	r3
   d5b1a:	4770      	bx	lr

000d5b1c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5b1c:	4770      	bx	lr

000d5b1e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5b1e:	4770      	bx	lr

000d5b20 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5b20:	4770      	bx	lr

000d5b22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5b22:	b538      	push	{r3, r4, r5, lr}
   d5b24:	4604      	mov	r4, r0
   d5b26:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5b28:	6800      	ldr	r0, [r0, #0]
   d5b2a:	212e      	movs	r1, #46	; 0x2e
   d5b2c:	f001 fe22 	bl	d7774 <strchrnul>
    size = s - category;
   d5b30:	6823      	ldr	r3, [r4, #0]
   d5b32:	1ac3      	subs	r3, r0, r3
   d5b34:	602b      	str	r3, [r5, #0]
    if (size) {
   d5b36:	b123      	cbz	r3, d5b42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5b38:	7803      	ldrb	r3, [r0, #0]
   d5b3a:	b103      	cbz	r3, d5b3e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5b3c:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5b3e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b40:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d5b42:	4618      	mov	r0, r3
}
   d5b44:	bd38      	pop	{r3, r4, r5, pc}

000d5b46 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5b46:	b510      	push	{r4, lr}
   d5b48:	210c      	movs	r1, #12
   d5b4a:	4604      	mov	r4, r0
   d5b4c:	f001 fc2d 	bl	d73aa <_ZdlPvj>
   d5b50:	4620      	mov	r0, r4
   d5b52:	bd10      	pop	{r4, pc}

000d5b54 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5b54:	b510      	push	{r4, lr}
   d5b56:	2104      	movs	r1, #4
   d5b58:	4604      	mov	r4, r0
   d5b5a:	f001 fc26 	bl	d73aa <_ZdlPvj>
   d5b5e:	4620      	mov	r0, r4
   d5b60:	bd10      	pop	{r4, pc}

000d5b62 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5b62:	b510      	push	{r4, lr}
   d5b64:	2104      	movs	r1, #4
   d5b66:	4604      	mov	r4, r0
   d5b68:	f001 fc1f 	bl	d73aa <_ZdlPvj>
   d5b6c:	4620      	mov	r0, r4
   d5b6e:	bd10      	pop	{r4, pc}

000d5b70 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5b70:	b538      	push	{r3, r4, r5, lr}
   d5b72:	460c      	mov	r4, r1
   d5b74:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5b76:	f001 fb27 	bl	d71c8 <_Z16_fetch_usbserialv>
   d5b7a:	4284      	cmp	r4, r0
   d5b7c:	d00d      	beq.n	d5b9a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5b7e:	f001 fa97 	bl	d70b0 <_Z22__fetch_global_Serial1v>
   d5b82:	4284      	cmp	r4, r0
   d5b84:	d105      	bne.n	d5b92 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d5b86:	f001 fa93 	bl	d70b0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d5b8e:	f001 ba8c 	b.w	d70aa <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d5b92:	4621      	mov	r1, r4
   d5b94:	4628      	mov	r0, r5
   d5b96:	f7ff ffbb 	bl	d5b10 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d5b9a:	bd38      	pop	{r3, r4, r5, pc}

000d5b9c <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5b9c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5b9e:	f001 fdf3 	bl	d7788 <strcmp>
}
   d5ba2:	fab0 f080 	clz	r0, r0
   d5ba6:	0940      	lsrs	r0, r0, #5
   d5ba8:	bd08      	pop	{r3, pc}

000d5baa <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5baa:	b538      	push	{r3, r4, r5, lr}
   d5bac:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5bae:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5bb0:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d5bb2:	f001 fdf3 	bl	d779c <strlen>
   d5bb6:	4621      	mov	r1, r4
   d5bb8:	4602      	mov	r2, r0
   d5bba:	4628      	mov	r0, r5
}
   d5bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5bc0:	f7ff bf39 	b.w	d5a36 <_ZN5spark10JSONWriter5valueEPKcj>

000d5bc4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5bc4:	6800      	ldr	r0, [r0, #0]
   d5bc6:	f7fe bdbb 	b.w	d4740 <os_mutex_recursive_lock>

000d5bca <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5bca:	b570      	push	{r4, r5, r6, lr}
   d5bcc:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5bce:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5bd0:	460d      	mov	r5, r1
    write(str, strlen(str));
   d5bd2:	f001 fde3 	bl	d779c <strlen>
   d5bd6:	6823      	ldr	r3, [r4, #0]
   d5bd8:	4602      	mov	r2, r0
   d5bda:	4629      	mov	r1, r5
   d5bdc:	4620      	mov	r0, r4
   d5bde:	68db      	ldr	r3, [r3, #12]
}
   d5be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d5be4:	4718      	bx	r3

000d5be6 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d5be6:	b513      	push	{r0, r1, r4, lr}
   d5be8:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5bea:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d5bec:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5bf0:	68d4      	ldr	r4, [r2, #12]
   d5bf2:	4619      	mov	r1, r3
   d5bf4:	2201      	movs	r2, #1
   d5bf6:	47a0      	blx	r4
}
   d5bf8:	b002      	add	sp, #8
   d5bfa:	bd10      	pop	{r4, pc}

000d5bfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5c00:	6845      	ldr	r5, [r0, #4]
   d5c02:	6807      	ldr	r7, [r0, #0]
   d5c04:	b085      	sub	sp, #20
   d5c06:	4691      	mov	r9, r2
   d5c08:	2214      	movs	r2, #20
   d5c0a:	4355      	muls	r5, r2
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	10ab      	asrs	r3, r5, #2
   d5c10:	4d19      	ldr	r5, [pc, #100]	; (d5c78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5c12:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5c14:	435d      	muls	r5, r3
   d5c16:	468b      	mov	fp, r1
   d5c18:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5c1a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5c1c:	2d00      	cmp	r5, #0
   d5c1e:	9303      	str	r3, [sp, #12]
   d5c20:	dd23      	ble.n	d5c6a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5c22:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d5c24:	106e      	asrs	r6, r5, #1
   d5c26:	fb03 f006 	mul.w	r0, r3, r6
   d5c2a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5c2e:	464a      	mov	r2, r9
   d5c30:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d5c34:	5820      	ldr	r0, [r4, r0]
   d5c36:	45d1      	cmp	r9, sl
   d5c38:	bf28      	it	cs
   d5c3a:	4652      	movcs	r2, sl
   d5c3c:	4659      	mov	r1, fp
   d5c3e:	f001 fdb5 	bl	d77ac <strncmp>
                if (cmp == 0) {
   d5c42:	9b03      	ldr	r3, [sp, #12]
   d5c44:	b948      	cbnz	r0, d5c5a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d5c46:	45d1      	cmp	r9, sl
   d5c48:	d103      	bne.n	d5c52 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5c4a:	9a01      	ldr	r2, [sp, #4]
   d5c4c:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5c4e:	4635      	mov	r5, r6
   d5c50:	e7e4      	b.n	d5c1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d5c52:	bf8c      	ite	hi
   d5c54:	2001      	movhi	r0, #1
   d5c56:	2000      	movls	r0, #0
   d5c58:	e000      	b.n	d5c5c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d5c5a:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5c5c:	2800      	cmp	r0, #0
   d5c5e:	d0f6      	beq.n	d5c4e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5c60:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d5c62:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d5c66:	3e01      	subs	r6, #1
   d5c68:	e7f1      	b.n	d5c4e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d5c6a:	1be4      	subs	r4, r4, r7
}
   d5c6c:	4802      	ldr	r0, [pc, #8]	; (d5c78 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d5c6e:	10a4      	asrs	r4, r4, #2
}
   d5c70:	4360      	muls	r0, r4
   d5c72:	b005      	add	sp, #20
   d5c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c78:	cccccccd 	.word	0xcccccccd

000d5c7c <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c7e:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d5c80:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5c82:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d5c84:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d5c86:	b313      	cbz	r3, d5cce <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d5c88:	b309      	cbz	r1, d5cce <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5c8a:	af04      	add	r7, sp, #16
   d5c8c:	2300      	movs	r3, #0
   d5c8e:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d5c92:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5c96:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5c98:	4639      	mov	r1, r7
   d5c9a:	a801      	add	r0, sp, #4
   d5c9c:	f7ff ff41 	bl	d5b22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5ca0:	4601      	mov	r1, r0
   d5ca2:	b1a0      	cbz	r0, d5cce <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d5ca4:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d5ca6:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5ca8:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5cac:	4620      	mov	r0, r4
   d5cae:	f7ff ffa5 	bl	d5bfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5cb2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5cb6:	b153      	cbz	r3, d5cce <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d5cb8:	6823      	ldr	r3, [r4, #0]
   d5cba:	2414      	movs	r4, #20
   d5cbc:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d5cc0:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d5cc2:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d5cc6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5cc8:	bfa8      	it	ge
   d5cca:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5ccc:	e7e4      	b.n	d5c98 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d5cce:	4630      	mov	r0, r6
   d5cd0:	b005      	add	sp, #20
   d5cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5cd4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5cd4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d5cd6:	4c09      	ldr	r4, [pc, #36]	; (d5cfc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d5cd8:	6823      	ldr	r3, [r4, #0]
   d5cda:	07db      	lsls	r3, r3, #31
   d5cdc:	d40b      	bmi.n	d5cf6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5cde:	4620      	mov	r0, r4
   d5ce0:	f7fe f9ea 	bl	d40b8 <__cxa_guard_acquire>
   d5ce4:	b138      	cbz	r0, d5cf6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5ce6:	4620      	mov	r0, r4
   d5ce8:	f7fe f9eb 	bl	d40c2 <__cxa_guard_release>
   d5cec:	4a04      	ldr	r2, [pc, #16]	; (d5d00 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5cee:	4905      	ldr	r1, [pc, #20]	; (d5d04 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5cf0:	4805      	ldr	r0, [pc, #20]	; (d5d08 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5cf2:	f001 fb55 	bl	d73a0 <__aeabi_atexit>
    return &factory;
}
   d5cf6:	4804      	ldr	r0, [pc, #16]	; (d5d08 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5cf8:	bd10      	pop	{r4, pc}
   d5cfa:	bf00      	nop
   d5cfc:	2003e3cc 	.word	0x2003e3cc
   d5d00:	2003e2f4 	.word	0x2003e2f4
   d5d04:	000d5b1f 	.word	0x000d5b1f
   d5d08:	2003e284 	.word	0x2003e284

000d5d0c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5d0c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5d0e:	4c09      	ldr	r4, [pc, #36]	; (d5d34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5d10:	6823      	ldr	r3, [r4, #0]
   d5d12:	07db      	lsls	r3, r3, #31
   d5d14:	d40b      	bmi.n	d5d2e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5d16:	4620      	mov	r0, r4
   d5d18:	f7fe f9ce 	bl	d40b8 <__cxa_guard_acquire>
   d5d1c:	b138      	cbz	r0, d5d2e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5d1e:	4620      	mov	r0, r4
   d5d20:	f7fe f9cf 	bl	d40c2 <__cxa_guard_release>
   d5d24:	4a04      	ldr	r2, [pc, #16]	; (d5d38 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5d26:	4905      	ldr	r1, [pc, #20]	; (d5d3c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5d28:	4805      	ldr	r0, [pc, #20]	; (d5d40 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5d2a:	f001 fb39 	bl	d73a0 <__aeabi_atexit>
    return &factory;
}
   d5d2e:	4804      	ldr	r0, [pc, #16]	; (d5d40 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5d30:	bd10      	pop	{r4, pc}
   d5d32:	bf00      	nop
   d5d34:	2003e3fc 	.word	0x2003e3fc
   d5d38:	2003e2f4 	.word	0x2003e2f4
   d5d3c:	000d5b1d 	.word	0x000d5b1d
   d5d40:	2003e280 	.word	0x2003e280

000d5d44 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5d44:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5d46:	2500      	movs	r5, #0
   d5d48:	4604      	mov	r4, r0
   d5d4a:	6005      	str	r5, [r0, #0]
   d5d4c:	6045      	str	r5, [r0, #4]
   d5d4e:	6085      	str	r5, [r0, #8]
   d5d50:	6105      	str	r5, [r0, #16]
   d5d52:	6145      	str	r5, [r0, #20]
   d5d54:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5d56:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d5d5a:	f7fe fce1 	bl	d4720 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5d5e:	f7ff ffb9 	bl	d5cd4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d5d62:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5d64:	f7ff ffd2 	bl	d5d0c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5d68:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5d6a:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	bd38      	pop	{r3, r4, r5, pc}

000d5d70 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5d70:	b510      	push	{r4, lr}
    static LogManager mgr;
   d5d72:	4c0a      	ldr	r4, [pc, #40]	; (d5d9c <_ZN5spark10LogManager8instanceEv+0x2c>)
   d5d74:	6823      	ldr	r3, [r4, #0]
   d5d76:	07db      	lsls	r3, r3, #31
   d5d78:	d40e      	bmi.n	d5d98 <_ZN5spark10LogManager8instanceEv+0x28>
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	f7fe f99c 	bl	d40b8 <__cxa_guard_acquire>
   d5d80:	b150      	cbz	r0, d5d98 <_ZN5spark10LogManager8instanceEv+0x28>
   d5d82:	4807      	ldr	r0, [pc, #28]	; (d5da0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5d84:	f7ff ffde 	bl	d5d44 <_ZN5spark10LogManagerC1Ev>
   d5d88:	4620      	mov	r0, r4
   d5d8a:	f7fe f99a 	bl	d40c2 <__cxa_guard_release>
   d5d8e:	4a05      	ldr	r2, [pc, #20]	; (d5da4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5d90:	4905      	ldr	r1, [pc, #20]	; (d5da8 <_ZN5spark10LogManager8instanceEv+0x38>)
   d5d92:	4803      	ldr	r0, [pc, #12]	; (d5da0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5d94:	f001 fb04 	bl	d73a0 <__aeabi_atexit>
    return &mgr;
}
   d5d98:	4801      	ldr	r0, [pc, #4]	; (d5da0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5d9a:	bd10      	pop	{r4, pc}
   d5d9c:	2003e3d0 	.word	0x2003e3d0
   d5da0:	2003e3d4 	.word	0x2003e3d4
   d5da4:	2003e2f4 	.word	0x2003e2f4
   d5da8:	000d61db 	.word	0x000d61db

000d5dac <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5dac:	2300      	movs	r3, #0
   d5dae:	4a02      	ldr	r2, [pc, #8]	; (d5db8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5db0:	4902      	ldr	r1, [pc, #8]	; (d5dbc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5db2:	4803      	ldr	r0, [pc, #12]	; (d5dc0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d5db4:	f7fe bdb4 	b.w	d4920 <log_set_callbacks>
   d5db8:	000d60bd 	.word	0x000d60bd
   d5dbc:	000d604d 	.word	0x000d604d
   d5dc0:	000d5fd5 	.word	0x000d5fd5

000d5dc4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5dc4:	2300      	movs	r3, #0
   d5dc6:	461a      	mov	r2, r3
   d5dc8:	4619      	mov	r1, r3
   d5dca:	4618      	mov	r0, r3
   d5dcc:	f7fe bda8 	b.w	d4920 <log_set_callbacks>

000d5dd0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5dd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5dd2:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d5dd4:	688e      	ldr	r6, [r1, #8]
   d5dd6:	f851 3b04 	ldr.w	r3, [r1], #4
   d5dda:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5dde:	4605      	mov	r5, r0
   d5de0:	a801      	add	r0, sp, #4
   d5de2:	f7ff f983 	bl	d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d5de6:	4622      	mov	r2, r4
   d5de8:	4631      	mov	r1, r6
   d5dea:	4628      	mov	r0, r5
   d5dec:	f7ff fe5a 	bl	d5aa4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5df0:	a801      	add	r0, sp, #4
   d5df2:	f7ff f982 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5df6:	4628      	mov	r0, r5
   d5df8:	b002      	add	sp, #8
   d5dfa:	bd70      	pop	{r4, r5, r6, pc}

000d5dfc <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5dfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5dfe:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d5e00:	690e      	ldr	r6, [r1, #16]
   d5e02:	f851 3b04 	ldr.w	r3, [r1], #4
   d5e06:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5e0a:	4605      	mov	r5, r0
   d5e0c:	a801      	add	r0, sp, #4
   d5e0e:	f7ff f96d 	bl	d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5e12:	4622      	mov	r2, r4
   d5e14:	4631      	mov	r1, r6
   d5e16:	4628      	mov	r0, r5
   d5e18:	f7ff fe5f 	bl	d5ada <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e1c:	a801      	add	r0, sp, #4
   d5e1e:	f7ff f96c 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e22:	4628      	mov	r0, r5
   d5e24:	b002      	add	sp, #8
   d5e26:	bd70      	pop	{r4, r5, r6, pc}

000d5e28 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e2a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d5e2c:	68ce      	ldr	r6, [r1, #12]
   d5e2e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5e32:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5e36:	4605      	mov	r5, r0
   d5e38:	a801      	add	r0, sp, #4
   d5e3a:	f7ff f957 	bl	d50ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5e3e:	4622      	mov	r2, r4
   d5e40:	4631      	mov	r1, r6
   d5e42:	4628      	mov	r0, r5
   d5e44:	f7ff fe06 	bl	d5a54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e48:	a801      	add	r0, sp, #4
   d5e4a:	f7ff f956 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e4e:	4628      	mov	r0, r5
   d5e50:	b002      	add	sp, #8
   d5e52:	bd70      	pop	{r4, r5, r6, pc}

000d5e54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5e54:	b530      	push	{r4, r5, lr}
   d5e56:	b08b      	sub	sp, #44	; 0x2c
   d5e58:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5e5a:	4601      	mov	r1, r0
   d5e5c:	a804      	add	r0, sp, #16
   d5e5e:	f7ff ffb7 	bl	d5dd0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d5e62:	a804      	add	r0, sp, #16
   d5e64:	f7ff fd29 	bl	d58ba <_ZN5spark18JSONObjectIterator4nextEv>
   d5e68:	b1e8      	cbz	r0, d5ea6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d5e6a:	a904      	add	r1, sp, #16
   d5e6c:	4668      	mov	r0, sp
   d5e6e:	f7ff ffdb 	bl	d5e28 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5e72:	490f      	ldr	r1, [pc, #60]	; (d5eb0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d5e74:	9802      	ldr	r0, [sp, #8]
   d5e76:	f7ff fe91 	bl	d5b9c <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d5e7a:	4604      	mov	r4, r0
   d5e7c:	b110      	cbz	r0, d5e84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d5e7e:	1c2c      	adds	r4, r5, #0
   d5e80:	bf18      	it	ne
   d5e82:	2401      	movne	r4, #1
   d5e84:	a801      	add	r0, sp, #4
   d5e86:	f7ff f938 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e8a:	2c00      	cmp	r4, #0
   d5e8c:	d0e9      	beq.n	d5e62 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d5e8e:	a904      	add	r1, sp, #16
   d5e90:	4668      	mov	r0, sp
   d5e92:	f7ff ffb3 	bl	d5dfc <_ZNK5spark18JSONObjectIterator5valueEv>
   d5e96:	4668      	mov	r0, sp
   d5e98:	f7ff fcef 	bl	d587a <_ZNK5spark9JSONValue5toIntEv>
   d5e9c:	6028      	str	r0, [r5, #0]
   d5e9e:	a801      	add	r0, sp, #4
   d5ea0:	f7ff f92b 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ea4:	e7dd      	b.n	d5e62 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d5ea6:	a805      	add	r0, sp, #20
   d5ea8:	f7ff f927 	bl	d50fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d5eac:	b00b      	add	sp, #44	; 0x2c
   d5eae:	bd30      	pop	{r4, r5, pc}
   d5eb0:	000d7c28 	.word	0x000d7c28

000d5eb4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5eb6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5eb8:	4620      	mov	r0, r4
   d5eba:	4913      	ldr	r1, [pc, #76]	; (d5f08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5ebc:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5ebe:	f001 fc63 	bl	d7788 <strcmp>
   d5ec2:	b940      	cbnz	r0, d5ed6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d5ec4:	f001 f980 	bl	d71c8 <_Z16_fetch_usbserialv>
   d5ec8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5ecc:	f001 f96c 	bl	d71a8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5ed0:	f001 f97a 	bl	d71c8 <_Z16_fetch_usbserialv>
   d5ed4:	e015      	b.n	d5f02 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d5ed6:	490d      	ldr	r1, [pc, #52]	; (d5f0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d5ed8:	4620      	mov	r0, r4
   d5eda:	f001 fc55 	bl	d7788 <strcmp>
   d5ede:	b978      	cbnz	r0, d5f00 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5ee0:	a902      	add	r1, sp, #8
   d5ee2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d5ee6:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d5eea:	4628      	mov	r0, r5
   d5eec:	f7ff ffb2 	bl	d5e54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5ef0:	f001 f8de 	bl	d70b0 <_Z22__fetch_global_Serial1v>
   d5ef4:	9901      	ldr	r1, [sp, #4]
   d5ef6:	f001 f8d5 	bl	d70a4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5efa:	f001 f8d9 	bl	d70b0 <_Z22__fetch_global_Serial1v>
   d5efe:	e000      	b.n	d5f02 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d5f00:	2000      	movs	r0, #0
}
   d5f02:	b003      	add	sp, #12
   d5f04:	bd30      	pop	{r4, r5, pc}
   d5f06:	bf00      	nop
   d5f08:	000d7c2d 	.word	0x000d7c2d
   d5f0c:	000d7c34 	.word	0x000d7c34

000d5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f10:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5f12:	6804      	ldr	r4, [r0, #0]
   d5f14:	6843      	ldr	r3, [r0, #4]
   d5f16:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f18:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5f1a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f1e:	42a6      	cmp	r6, r4
   d5f20:	d005      	beq.n	d5f2e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5f22:	f104 0008 	add.w	r0, r4, #8
   d5f26:	f7ff fff3 	bl	d5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5f2a:	3414      	adds	r4, #20
   d5f2c:	e7f7      	b.n	d5f1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f2e:	6828      	ldr	r0, [r5, #0]
   d5f30:	f7fe fd7a 	bl	d4a28 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5f34:	4628      	mov	r0, r5
   d5f36:	bd70      	pop	{r4, r5, r6, pc}

000d5f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f38:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5f3a:	6804      	ldr	r4, [r0, #0]
   d5f3c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f3e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5f40:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f44:	42a6      	cmp	r6, r4
   d5f46:	d004      	beq.n	d5f52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5f48:	4620      	mov	r0, r4
   d5f4a:	f000 ffa7 	bl	d6e9c <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f4e:	3410      	adds	r4, #16
   d5f50:	e7f8      	b.n	d5f44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f52:	6828      	ldr	r0, [r5, #0]
   d5f54:	f7fe fd68 	bl	d4a28 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5f58:	4628      	mov	r0, r5
   d5f5a:	bd70      	pop	{r4, r5, r6, pc}

000d5f5c <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d5f5c:	b510      	push	{r4, lr}
   d5f5e:	4604      	mov	r4, r0
   d5f60:	300c      	adds	r0, #12
   d5f62:	f7ff ffd5 	bl	d5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5f66:	4620      	mov	r0, r4
   d5f68:	f7ff ffe6 	bl	d5f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5f6c:	4620      	mov	r0, r4
   d5f6e:	bd10      	pop	{r4, pc}

000d5f70 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5f70:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5f72:	4b04      	ldr	r3, [pc, #16]	; (d5f84 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5f74:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5f76:	f840 3b04 	str.w	r3, [r0], #4
   d5f7a:	f7ff ffef 	bl	d5f5c <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5f7e:	4620      	mov	r0, r4
   d5f80:	bd10      	pop	{r4, pc}
   d5f82:	bf00      	nop
   d5f84:	000d7938 	.word	0x000d7938

000d5f88 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5f88:	b510      	push	{r4, lr}
   d5f8a:	4604      	mov	r4, r0
   d5f8c:	f7ff fff0 	bl	d5f70 <_ZN5spark16StreamLogHandlerD1Ev>
   d5f90:	4620      	mov	r0, r4
   d5f92:	2124      	movs	r1, #36	; 0x24
   d5f94:	f001 fa09 	bl	d73aa <_ZdlPvj>
   d5f98:	4620      	mov	r0, r4
   d5f9a:	bd10      	pop	{r4, pc}

000d5f9c <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d5f9c:	b510      	push	{r4, lr}
   d5f9e:	4b03      	ldr	r3, [pc, #12]	; (d5fac <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5fa0:	6003      	str	r3, [r0, #0]
   d5fa2:	4604      	mov	r4, r0
   d5fa4:	f7ff ffe4 	bl	d5f70 <_ZN5spark16StreamLogHandlerD1Ev>
   d5fa8:	4620      	mov	r0, r4
   d5faa:	bd10      	pop	{r4, pc}
   d5fac:	000d7c18 	.word	0x000d7c18

000d5fb0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5fb0:	b510      	push	{r4, lr}
   d5fb2:	4604      	mov	r4, r0
   d5fb4:	f7ff fff2 	bl	d5f9c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5fb8:	4620      	mov	r0, r4
   d5fba:	2124      	movs	r1, #36	; 0x24
   d5fbc:	f001 f9f5 	bl	d73aa <_ZdlPvj>
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	bd10      	pop	{r4, pc}

000d5fc4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5fc4:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5fc6:	6803      	ldr	r3, [r0, #0]
   d5fc8:	4604      	mov	r4, r0
   d5fca:	6818      	ldr	r0, [r3, #0]
   d5fcc:	f7fe fbc0 	bl	d4750 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	bd10      	pop	{r4, pc}

000d5fd4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fd8:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d5fda:	4b1b      	ldr	r3, [pc, #108]	; (d6048 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d5fdc:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5fde:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5fe2:	b085      	sub	sp, #20
   d5fe4:	4682      	mov	sl, r0
   d5fe6:	460e      	mov	r6, r1
   d5fe8:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5fea:	bb53      	cbnz	r3, d6042 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d5fec:	f7ff fec0 	bl	d5d70 <_ZN5spark10LogManager8instanceEv>
   d5ff0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5ff2:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5ff4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d5ff6:	f7ff fde5 	bl	d5bc4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d5ffa:	7b23      	ldrb	r3, [r4, #12]
   d5ffc:	b9f3      	cbnz	r3, d603c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5ffe:	2301      	movs	r3, #1
   d6000:	7323      	strb	r3, [r4, #12]
   d6002:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6004:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6006:	b2f6      	uxtb	r6, r6
   d6008:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d600c:	454d      	cmp	r5, r9
   d600e:	d013      	beq.n	d6038 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6010:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6014:	4641      	mov	r1, r8
   d6016:	1d38      	adds	r0, r7, #4
   d6018:	f7ff fe30 	bl	d5c7c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d601c:	4286      	cmp	r6, r0
   d601e:	d3f5      	bcc.n	d600c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6020:	683b      	ldr	r3, [r7, #0]
   d6022:	f8cd b000 	str.w	fp, [sp]
   d6026:	689b      	ldr	r3, [r3, #8]
   d6028:	469e      	mov	lr, r3
   d602a:	4638      	mov	r0, r7
   d602c:	4643      	mov	r3, r8
   d602e:	4632      	mov	r2, r6
   d6030:	4651      	mov	r1, sl
   d6032:	4677      	mov	r7, lr
   d6034:	47b8      	blx	r7
   d6036:	e7e9      	b.n	d600c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6038:	2300      	movs	r3, #0
   d603a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d603c:	a803      	add	r0, sp, #12
   d603e:	f7ff ffc1 	bl	d5fc4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d6042:	b005      	add	sp, #20
   d6044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6048:	e000ed00 	.word	0xe000ed00

000d604c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d604c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6050:	4699      	mov	r9, r3
   d6052:	4b19      	ldr	r3, [pc, #100]	; (d60b8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d6054:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6056:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d605a:	4607      	mov	r7, r0
   d605c:	4688      	mov	r8, r1
   d605e:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6060:	bb33      	cbnz	r3, d60b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d6062:	f7ff fe85 	bl	d5d70 <_ZN5spark10LogManager8instanceEv>
   d6066:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6068:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d606a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d606c:	f7ff fdaa 	bl	d5bc4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6070:	7b23      	ldrb	r3, [r4, #12]
   d6072:	b9d3      	cbnz	r3, d60aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6074:	2301      	movs	r3, #1
   d6076:	7323      	strb	r3, [r4, #12]
   d6078:	6825      	ldr	r5, [r4, #0]
   d607a:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d607c:	fa5f fb86 	uxtb.w	fp, r6
   d6080:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6084:	4555      	cmp	r5, sl
   d6086:	d00e      	beq.n	d60a6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d6088:	f855 6b04 	ldr.w	r6, [r5], #4
   d608c:	4649      	mov	r1, r9
   d608e:	1d30      	adds	r0, r6, #4
   d6090:	f7ff fdf4 	bl	d5c7c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6094:	4583      	cmp	fp, r0
   d6096:	d3f5      	bcc.n	d6084 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6098:	6833      	ldr	r3, [r6, #0]
   d609a:	4642      	mov	r2, r8
   d609c:	68db      	ldr	r3, [r3, #12]
   d609e:	4639      	mov	r1, r7
   d60a0:	4630      	mov	r0, r6
   d60a2:	4798      	blx	r3
   d60a4:	e7ee      	b.n	d6084 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d60a6:	2300      	movs	r3, #0
   d60a8:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d60aa:	a801      	add	r0, sp, #4
   d60ac:	f7ff ff8a 	bl	d5fc4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d60b0:	b003      	add	sp, #12
   d60b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60b6:	bf00      	nop
   d60b8:	e000ed00 	.word	0xe000ed00

000d60bc <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d60bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d60c0:	4b15      	ldr	r3, [pc, #84]	; (d6118 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d60c2:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d60c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d60c8:	4604      	mov	r4, r0
   d60ca:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d60cc:	b9fb      	cbnz	r3, d610e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d60ce:	f7ff fe4f 	bl	d5d70 <_ZN5spark10LogManager8instanceEv>
   d60d2:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d60d4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d60d6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d60d8:	f7ff fd74 	bl	d5bc4 <_ZN14RecursiveMutex4lockEv>
   d60dc:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d60e0:	2646      	movs	r6, #70	; 0x46
   d60e2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d60e6:	42af      	cmp	r7, r5
   d60e8:	d107      	bne.n	d60fa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d60ea:	a801      	add	r0, sp, #4
   d60ec:	f7ff ff6a 	bl	d5fc4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d60f0:	42b4      	cmp	r4, r6
   d60f2:	bfb4      	ite	lt
   d60f4:	2000      	movlt	r0, #0
   d60f6:	2001      	movge	r0, #1
   d60f8:	e00a      	b.n	d6110 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d60fa:	f855 0b04 	ldr.w	r0, [r5], #4
   d60fe:	4641      	mov	r1, r8
   d6100:	3004      	adds	r0, #4
   d6102:	f7ff fdbb 	bl	d5c7c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6106:	4286      	cmp	r6, r0
   d6108:	bfa8      	it	ge
   d610a:	4606      	movge	r6, r0
   d610c:	e7eb      	b.n	d60e6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d610e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6110:	b002      	add	sp, #8
   d6112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6116:	bf00      	nop
   d6118:	e000ed00 	.word	0xe000ed00

000d611c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d611c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d611e:	6803      	ldr	r3, [r0, #0]
   d6120:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6122:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6124:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6128:	429a      	cmp	r2, r3
   d612a:	4618      	mov	r0, r3
   d612c:	d00e      	beq.n	d614c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d612e:	6806      	ldr	r6, [r0, #0]
   d6130:	680d      	ldr	r5, [r1, #0]
   d6132:	42ae      	cmp	r6, r5
   d6134:	f103 0304 	add.w	r3, r3, #4
   d6138:	d1f6      	bne.n	d6128 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d613a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d613c:	1a52      	subs	r2, r2, r1
   d613e:	f001 fabf 	bl	d76c0 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6142:	6863      	ldr	r3, [r4, #4]
   d6144:	3b01      	subs	r3, #1
   d6146:	6063      	str	r3, [r4, #4]
    return true;
   d6148:	2001      	movs	r0, #1
}
   d614a:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d614c:	2000      	movs	r0, #0
   d614e:	bd70      	pop	{r4, r5, r6, pc}

000d6150 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6152:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6154:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6156:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6158:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d615a:	f7ff fd33 	bl	d5bc4 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d615e:	a901      	add	r1, sp, #4
   d6160:	4620      	mov	r0, r4
   d6162:	f7ff ffdb 	bl	d611c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6166:	b920      	cbnz	r0, d6172 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6168:	a803      	add	r0, sp, #12
   d616a:	f7ff ff2b 	bl	d5fc4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d616e:	b004      	add	sp, #16
   d6170:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6172:	6863      	ldr	r3, [r4, #4]
   d6174:	2b00      	cmp	r3, #0
   d6176:	d1f7      	bne.n	d6168 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6178:	f7ff fe24 	bl	d5dc4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d617c:	e7f4      	b.n	d6168 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d617e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d617e:	b570      	push	{r4, r5, r6, lr}
   d6180:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6182:	6943      	ldr	r3, [r0, #20]
   d6184:	2618      	movs	r6, #24
   d6186:	4604      	mov	r4, r0
   d6188:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d618c:	42ae      	cmp	r6, r5
   d618e:	d015      	beq.n	d61bc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6190:	f105 0110 	add.w	r1, r5, #16
   d6194:	4620      	mov	r0, r4
   d6196:	f7ff ffc1 	bl	d611c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d619a:	6863      	ldr	r3, [r4, #4]
   d619c:	b90b      	cbnz	r3, d61a2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d619e:	f7ff fe11 	bl	d5dc4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d61a2:	69e0      	ldr	r0, [r4, #28]
   d61a4:	6929      	ldr	r1, [r5, #16]
   d61a6:	6803      	ldr	r3, [r0, #0]
   d61a8:	68db      	ldr	r3, [r3, #12]
   d61aa:	4798      	blx	r3
        if (h.stream) {
   d61ac:	6969      	ldr	r1, [r5, #20]
   d61ae:	b119      	cbz	r1, d61b8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d61b0:	6a20      	ldr	r0, [r4, #32]
   d61b2:	6803      	ldr	r3, [r0, #0]
   d61b4:	68db      	ldr	r3, [r3, #12]
   d61b6:	4798      	blx	r3
   d61b8:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d61ba:	e7e7      	b.n	d618c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d61bc:	6925      	ldr	r5, [r4, #16]
   d61be:	6963      	ldr	r3, [r4, #20]
   d61c0:	2618      	movs	r6, #24
   d61c2:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d61c6:	42b5      	cmp	r5, r6
   d61c8:	d004      	beq.n	d61d4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d61ca:	4628      	mov	r0, r5
   d61cc:	f000 fe66 	bl	d6e9c <_ZN6StringD1Ev>
   d61d0:	3518      	adds	r5, #24
   d61d2:	e7f8      	b.n	d61c6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d61d4:	2300      	movs	r3, #0
   d61d6:	6163      	str	r3, [r4, #20]
   d61d8:	bd70      	pop	{r4, r5, r6, pc}

000d61da <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d61da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d61dc:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d61de:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d61e0:	f7ff fdf0 	bl	d5dc4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d61e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d61e8:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d61ec:	f7ff fcea 	bl	d5bc4 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d61f0:	4620      	mov	r0, r4
   d61f2:	f7ff ffc4 	bl	d617e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d61f6:	4628      	mov	r0, r5
   d61f8:	f7ff fee4 	bl	d5fc4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d61fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d61fe:	b108      	cbz	r0, d6204 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6200:	f7fe fa96 	bl	d4730 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6204:	6925      	ldr	r5, [r4, #16]
   d6206:	6963      	ldr	r3, [r4, #20]
   d6208:	2618      	movs	r6, #24
   d620a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d620e:	42b5      	cmp	r5, r6
   d6210:	d004      	beq.n	d621c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6212:	4628      	mov	r0, r5
   d6214:	f000 fe42 	bl	d6e9c <_ZN6StringD1Ev>
   d6218:	3518      	adds	r5, #24
   d621a:	e7f8      	b.n	d620e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d621c:	6920      	ldr	r0, [r4, #16]
   d621e:	f7fe fc03 	bl	d4a28 <free>
   d6222:	6820      	ldr	r0, [r4, #0]
   d6224:	f7fe fc00 	bl	d4a28 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6228:	4620      	mov	r0, r4
   d622a:	b002      	add	sp, #8
   d622c:	bd70      	pop	{r4, r5, r6, pc}

000d622e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d622e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6230:	680a      	ldr	r2, [r1, #0]
   d6232:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6234:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6236:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6238:	684a      	ldr	r2, [r1, #4]
   d623a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d623c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d623e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6240:	688a      	ldr	r2, [r1, #8]
   d6242:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6244:	608b      	str	r3, [r1, #8]
   d6246:	4770      	bx	lr

000d6248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6248:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d624a:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d624c:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d624e:	6003      	str	r3, [r0, #0]
   d6250:	6043      	str	r3, [r0, #4]
   d6252:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6254:	f7ff ffeb 	bl	d622e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6258:	4620      	mov	r0, r4
   d625a:	bd10      	pop	{r4, pc}

000d625c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d625c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d625e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6260:	4604      	mov	r4, r0
   d6262:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6264:	d925      	bls.n	d62b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6266:	4290      	cmp	r0, r2
   d6268:	d224      	bcs.n	d62b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d626a:	1a55      	subs	r5, r2, r1
   d626c:	3d14      	subs	r5, #20
   d626e:	442c      	add	r4, r5
   d6270:	f1a1 0714 	sub.w	r7, r1, #20
   d6274:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6278:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d627a:	f1a5 0308 	sub.w	r3, r5, #8
   d627e:	429f      	cmp	r7, r3
   d6280:	d037      	beq.n	d62f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6282:	b184      	cbz	r4, d62a6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6284:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6288:	6023      	str	r3, [r4, #0]
   d628a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d628e:	80a3      	strh	r3, [r4, #4]
   d6290:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6294:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6296:	60a6      	str	r6, [r4, #8]
   d6298:	60e6      	str	r6, [r4, #12]
   d629a:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d629c:	4629      	mov	r1, r5
   d629e:	f104 0008 	add.w	r0, r4, #8
   d62a2:	f7ff ffc4 	bl	d622e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d62a6:	4628      	mov	r0, r5
   d62a8:	f7ff fe32 	bl	d5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d62ac:	3c14      	subs	r4, #20
   d62ae:	3d14      	subs	r5, #20
   d62b0:	e7e3      	b.n	d627a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d62b2:	d01e      	beq.n	d62f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d62b4:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d62b8:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d62ba:	f1a5 0308 	sub.w	r3, r5, #8
   d62be:	429e      	cmp	r6, r3
   d62c0:	d017      	beq.n	d62f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d62c2:	b184      	cbz	r4, d62e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d62c4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d62c8:	6023      	str	r3, [r4, #0]
   d62ca:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d62ce:	80a3      	strh	r3, [r4, #4]
   d62d0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d62d4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d62d6:	60a7      	str	r7, [r4, #8]
   d62d8:	60e7      	str	r7, [r4, #12]
   d62da:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d62dc:	4629      	mov	r1, r5
   d62de:	f104 0008 	add.w	r0, r4, #8
   d62e2:	f7ff ffa4 	bl	d622e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d62e6:	4628      	mov	r0, r5
   d62e8:	f7ff fe12 	bl	d5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d62ec:	3414      	adds	r4, #20
   d62ee:	3514      	adds	r5, #20
   d62f0:	e7e3      	b.n	d62ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d62f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d62f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d62f6:	6845      	ldr	r5, [r0, #4]
   d62f8:	6883      	ldr	r3, [r0, #8]
   d62fa:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d62fc:	4604      	mov	r4, r0
   d62fe:	460e      	mov	r6, r1
   d6300:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6302:	db0e      	blt.n	d6322 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6304:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6306:	2d00      	cmp	r5, #0
   d6308:	dd05      	ble.n	d6316 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d630a:	00a9      	lsls	r1, r5, #2
   d630c:	6800      	ldr	r0, [r0, #0]
   d630e:	f7fe fb93 	bl	d4a38 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6312:	b920      	cbnz	r0, d631e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6316:	6800      	ldr	r0, [r0, #0]
   d6318:	f7fe fb86 	bl	d4a28 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d631c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d631e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6320:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6322:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6324:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6326:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d632a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d632e:	1a52      	subs	r2, r2, r1
   d6330:	1d08      	adds	r0, r1, #4
   d6332:	f001 f9c5 	bl	d76c0 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6336:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d633a:	6863      	ldr	r3, [r4, #4]
   d633c:	3301      	adds	r3, #1
   d633e:	6063      	str	r3, [r4, #4]
   d6340:	2001      	movs	r0, #1
    return true;
}
   d6342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6344 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6344:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6346:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6348:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d634a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d634c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d634e:	f7ff fc39 	bl	d5bc4 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d6352:	6823      	ldr	r3, [r4, #0]
   d6354:	6861      	ldr	r1, [r4, #4]
   d6356:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d635a:	4283      	cmp	r3, r0
   d635c:	461a      	mov	r2, r3
   d635e:	d009      	beq.n	d6374 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d6360:	6812      	ldr	r2, [r2, #0]
   d6362:	42aa      	cmp	r2, r5
   d6364:	f103 0304 	add.w	r3, r3, #4
   d6368:	d1f7      	bne.n	d635a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d636a:	a801      	add	r0, sp, #4
   d636c:	f7ff fe2a 	bl	d5fc4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6370:	2500      	movs	r5, #0
   d6372:	e00e      	b.n	d6392 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6374:	462a      	mov	r2, r5
   d6376:	4620      	mov	r0, r4
   d6378:	f7ff ffbc 	bl	d62f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d637c:	4605      	mov	r5, r0
   d637e:	2800      	cmp	r0, #0
   d6380:	d0f3      	beq.n	d636a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d6382:	6863      	ldr	r3, [r4, #4]
   d6384:	2b01      	cmp	r3, #1
   d6386:	d101      	bne.n	d638c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d6388:	f7ff fd10 	bl	d5dac <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d638c:	a801      	add	r0, sp, #4
   d638e:	f7ff fe19 	bl	d5fc4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6392:	4628      	mov	r0, r5
   d6394:	b003      	add	sp, #12
   d6396:	bd30      	pop	{r4, r5, pc}

000d6398 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6398:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d639a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d639c:	4606      	mov	r6, r0
   d639e:	460c      	mov	r4, r1
   d63a0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d63a2:	d914      	bls.n	d63ce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d63a4:	4290      	cmp	r0, r2
   d63a6:	d213      	bcs.n	d63d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d63a8:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d63ac:	1a6c      	subs	r4, r5, r1
   d63ae:	f1a1 0710 	sub.w	r7, r1, #16
   d63b2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d63b4:	42af      	cmp	r7, r5
   d63b6:	d018      	beq.n	d63ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d63b8:	b11c      	cbz	r4, d63c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d63ba:	4629      	mov	r1, r5
   d63bc:	4620      	mov	r0, r4
   d63be:	f000 fd5d 	bl	d6e7c <_ZN6StringC1EOS_>
                end->~T();
   d63c2:	4628      	mov	r0, r5
   d63c4:	f000 fd6a 	bl	d6e9c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d63c8:	3d10      	subs	r5, #16
   d63ca:	3c10      	subs	r4, #16
   d63cc:	e7f2      	b.n	d63b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d63ce:	d00c      	beq.n	d63ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d63d0:	42ac      	cmp	r4, r5
   d63d2:	d00a      	beq.n	d63ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d63d4:	b11e      	cbz	r6, d63de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d63d6:	4621      	mov	r1, r4
   d63d8:	4630      	mov	r0, r6
   d63da:	f000 fd4f 	bl	d6e7c <_ZN6StringC1EOS_>
                p->~T();
   d63de:	4620      	mov	r0, r4
   d63e0:	f000 fd5c 	bl	d6e9c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d63e4:	3410      	adds	r4, #16
   d63e6:	3610      	adds	r6, #16
   d63e8:	e7f2      	b.n	d63d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d63ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d63ec:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d63ee:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d63f0:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d63f2:	dd0b      	ble.n	d640c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d63f4:	0130      	lsls	r0, r6, #4
   d63f6:	f7fe fb0f 	bl	d4a18 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d63fa:	4604      	mov	r4, r0
   d63fc:	b170      	cbz	r0, d641c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d63fe:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6402:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6406:	f7ff ffc7 	bl	d6398 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d640a:	e000      	b.n	d640e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d640c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d640e:	6828      	ldr	r0, [r5, #0]
   d6410:	f7fe fb0a 	bl	d4a28 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6414:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6416:	60ae      	str	r6, [r5, #8]
        return true;
   d6418:	2001      	movs	r0, #1
   d641a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d641c:	bd70      	pop	{r4, r5, r6, pc}

000d641e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d641e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6422:	2300      	movs	r3, #0
   d6424:	b095      	sub	sp, #84	; 0x54
   d6426:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6428:	2246      	movs	r2, #70	; 0x46
   d642a:	6003      	str	r3, [r0, #0]
   d642c:	6043      	str	r3, [r0, #4]
   d642e:	6083      	str	r3, [r0, #8]
   d6430:	60c3      	str	r3, [r0, #12]
   d6432:	6103      	str	r3, [r0, #16]
   d6434:	6143      	str	r3, [r0, #20]
   d6436:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6438:	9102      	str	r1, [sp, #8]
   d643a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d643e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6440:	4299      	cmp	r1, r3
   d6442:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6444:	9309      	str	r3, [sp, #36]	; 0x24
   d6446:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6448:	f340 809d 	ble.w	d6586 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d644c:	a808      	add	r0, sp, #32
   d644e:	f7ff ffcd 	bl	d63ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6452:	2800      	cmp	r0, #0
   d6454:	f040 8097 	bne.w	d6586 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6458:	e08e      	b.n	d6578 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d645a:	4621      	mov	r1, r4
   d645c:	a80b      	add	r0, sp, #44	; 0x2c
   d645e:	f000 fd0d 	bl	d6e7c <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6462:	a90b      	add	r1, sp, #44	; 0x2c
   d6464:	a80f      	add	r0, sp, #60	; 0x3c
   d6466:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6468:	f000 fd08 	bl	d6e7c <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d646c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d646e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6470:	4299      	cmp	r1, r3
   d6472:	f2c0 80ce 	blt.w	d6612 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6476:	3101      	adds	r1, #1
   d6478:	a808      	add	r0, sp, #32
   d647a:	f7ff ffb7 	bl	d63ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d647e:	2800      	cmp	r0, #0
   d6480:	f040 80c7 	bne.w	d6612 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6484:	a80f      	add	r0, sp, #60	; 0x3c
   d6486:	f000 fd09 	bl	d6e9c <_ZN6StringD1Ev>
   d648a:	a80b      	add	r0, sp, #44	; 0x2c
   d648c:	f000 fd06 	bl	d6e9c <_ZN6StringD1Ev>
   d6490:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6492:	42a7      	cmp	r7, r4
   d6494:	d1e1      	bne.n	d645a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6496:	2600      	movs	r6, #0
   d6498:	960b      	str	r6, [sp, #44]	; 0x2c
   d649a:	960c      	str	r6, [sp, #48]	; 0x30
   d649c:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d649e:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d64a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d64a2:	429e      	cmp	r6, r3
   d64a4:	f280 80a8 	bge.w	d65f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d64a8:	0133      	lsls	r3, r6, #4
   d64aa:	9a08      	ldr	r2, [sp, #32]
   d64ac:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d64ae:	9306      	str	r3, [sp, #24]
        if (!category) {
   d64b0:	2b00      	cmp	r3, #0
   d64b2:	f000 809f 	beq.w	d65f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d64b6:	2314      	movs	r3, #20
   d64b8:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d64ba:	f8cd 901c 	str.w	r9, [sp, #28]
   d64be:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d64c0:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d64c2:	a907      	add	r1, sp, #28
   d64c4:	a806      	add	r0, sp, #24
   d64c6:	f7ff fb2c 	bl	d5b22 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d64ca:	4607      	mov	r7, r0
   d64cc:	2800      	cmp	r0, #0
   d64ce:	f000 8091 	beq.w	d65f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d64d2:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d64d4:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d64d6:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d64da:	9a07      	ldr	r2, [sp, #28]
   d64dc:	4620      	mov	r0, r4
   d64de:	f7ff fb8d 	bl	d5bfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d64e2:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d64e6:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d64e8:	f1b8 0f00 	cmp.w	r8, #0
   d64ec:	d153      	bne.n	d6596 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d64ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d64f2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d64f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d64fa:	970f      	str	r7, [sp, #60]	; 0x3c
   d64fc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6500:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6504:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6508:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d650c:	6867      	ldr	r7, [r4, #4]
   d650e:	68a3      	ldr	r3, [r4, #8]
   d6510:	429f      	cmp	r7, r3
   d6512:	da4f      	bge.n	d65b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6514:	9b00      	ldr	r3, [sp, #0]
   d6516:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d651a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d651c:	2214      	movs	r2, #20
   d651e:	4353      	muls	r3, r2
   d6520:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6524:	fb02 b201 	mla	r2, r2, r1, fp
   d6528:	f107 0014 	add.w	r0, r7, #20
   d652c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d652e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d6530:	f7ff fe94 	bl	d625c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6534:	b1a7      	cbz	r7, d6560 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6536:	9b03      	ldr	r3, [sp, #12]
   d6538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d653a:	f84b 2003 	str.w	r2, [fp, r3]
   d653e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d6542:	80bb      	strh	r3, [r7, #4]
   d6544:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d6548:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d654a:	f8c7 9008 	str.w	r9, [r7, #8]
   d654e:	f8c7 900c 	str.w	r9, [r7, #12]
   d6552:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6556:	a911      	add	r1, sp, #68	; 0x44
   d6558:	f107 0008 	add.w	r0, r7, #8
   d655c:	f7ff fe67 	bl	d622e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6560:	6863      	ldr	r3, [r4, #4]
   d6562:	3301      	adds	r3, #1
   d6564:	6063      	str	r3, [r4, #4]
   d6566:	a811      	add	r0, sp, #68	; 0x44
   d6568:	f7ff fcd2 	bl	d5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d656c:	f1b8 0f00 	cmp.w	r8, #0
   d6570:	d011      	beq.n	d6596 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6572:	a80b      	add	r0, sp, #44	; 0x2c
   d6574:	f7ff fccc 	bl	d5f10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6578:	a808      	add	r0, sp, #32
   d657a:	f7ff fcdd 	bl	d5f38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d657e:	4628      	mov	r0, r5
   d6580:	b015      	add	sp, #84	; 0x54
   d6582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6586:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d658a:	f8da 3004 	ldr.w	r3, [sl, #4]
   d658e:	2714      	movs	r7, #20
   d6590:	fb07 4703 	mla	r7, r7, r3, r4
   d6594:	e77d      	b.n	d6492 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d6596:	6823      	ldr	r3, [r4, #0]
   d6598:	9a00      	ldr	r2, [sp, #0]
   d659a:	2414      	movs	r4, #20
   d659c:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d65a0:	9b06      	ldr	r3, [sp, #24]
   d65a2:	781b      	ldrb	r3, [r3, #0]
   d65a4:	bb23      	cbnz	r3, d65f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d65a6:	f8da 3000 	ldr.w	r3, [sl]
   d65aa:	9a01      	ldr	r2, [sp, #4]
   d65ac:	4413      	add	r3, r2
   d65ae:	7c1b      	ldrb	r3, [r3, #16]
   d65b0:	80e3      	strh	r3, [r4, #6]
   d65b2:	e01d      	b.n	d65f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d65b4:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d65b6:	2f00      	cmp	r7, #0
   d65b8:	dd0f      	ble.n	d65da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d65ba:	2314      	movs	r3, #20
   d65bc:	fb03 f007 	mul.w	r0, r3, r7
   d65c0:	9303      	str	r3, [sp, #12]
   d65c2:	f7fe fa29 	bl	d4a18 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d65c6:	4683      	mov	fp, r0
   d65c8:	b178      	cbz	r0, d65ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d65ca:	e894 0006 	ldmia.w	r4, {r1, r2}
   d65ce:	9b03      	ldr	r3, [sp, #12]
   d65d0:	fb03 1202 	mla	r2, r3, r2, r1
   d65d4:	f7ff fe42 	bl	d625c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d65d8:	e000      	b.n	d65dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d65da:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d65dc:	6820      	ldr	r0, [r4, #0]
   d65de:	f7fe fa23 	bl	d4a28 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d65e2:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d65e6:	60a7      	str	r7, [r4, #8]
   d65e8:	e794      	b.n	d6514 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d65ea:	f04f 0801 	mov.w	r8, #1
   d65ee:	e7ba      	b.n	d6566 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d65f0:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d65f2:	e766      	b.n	d64c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d65f4:	3601      	adds	r6, #1
   d65f6:	e753      	b.n	d64a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d65f8:	a908      	add	r1, sp, #32
   d65fa:	4628      	mov	r0, r5
   d65fc:	f7ff fe17 	bl	d622e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6600:	a90b      	add	r1, sp, #44	; 0x2c
   d6602:	f105 000c 	add.w	r0, r5, #12
   d6606:	f7ff fe12 	bl	d622e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d660a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d660e:	762b      	strb	r3, [r5, #24]
   d6610:	e7af      	b.n	d6572 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6612:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d6614:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6616:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d661a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d661e:	4631      	mov	r1, r6
   d6620:	f106 0010 	add.w	r0, r6, #16
   d6624:	f7ff feb8 	bl	d6398 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6628:	b11e      	cbz	r6, d6632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d662a:	a90f      	add	r1, sp, #60	; 0x3c
   d662c:	4630      	mov	r0, r6
   d662e:	f000 fc25 	bl	d6e7c <_ZN6StringC1EOS_>
    ++size_;
   d6632:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6634:	3301      	adds	r3, #1
   d6636:	9309      	str	r3, [sp, #36]	; 0x24
   d6638:	e724      	b.n	d6484 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d663c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d663c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d663e:	4604      	mov	r4, r0
   d6640:	4b09      	ldr	r3, [pc, #36]	; (d6668 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6642:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6646:	4605      	mov	r5, r0
   d6648:	460e      	mov	r6, r1
        filter_(level, filters) {
   d664a:	a801      	add	r0, sp, #4
   d664c:	4611      	mov	r1, r2
   d664e:	f7fd ff34 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6652:	aa01      	add	r2, sp, #4
   d6654:	4631      	mov	r1, r6
   d6656:	4620      	mov	r0, r4
   d6658:	f7ff fee1 	bl	d641e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d665c:	a801      	add	r0, sp, #4
   d665e:	f7fd febd 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6662:	4628      	mov	r0, r5
   d6664:	b004      	add	sp, #16
   d6666:	bd70      	pop	{r4, r5, r6, pc}
   d6668:	000d7938 	.word	0x000d7938

000d666c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d666c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d666e:	460f      	mov	r7, r1
   d6670:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6672:	492b      	ldr	r1, [pc, #172]	; (d6720 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6674:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6676:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6678:	4616      	mov	r6, r2
   d667a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d667c:	f001 f884 	bl	d7788 <strcmp>
   d6680:	bb28      	cbnz	r0, d66ce <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d6682:	2c00      	cmp	r4, #0
   d6684:	d049      	beq.n	d671a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6686:	4629      	mov	r1, r5
   d6688:	a801      	add	r0, sp, #4
   d668a:	f7ff fddd 	bl	d6248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d668e:	4925      	ldr	r1, [pc, #148]	; (d6724 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6690:	2024      	movs	r0, #36	; 0x24
   d6692:	f000 fe95 	bl	d73c0 <_ZnwjRKSt9nothrow_t>
   d6696:	4605      	mov	r5, r0
   d6698:	b1b8      	cbz	r0, d66ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d669a:	a901      	add	r1, sp, #4
   d669c:	a804      	add	r0, sp, #16
   d669e:	f7ff fdd3 	bl	d6248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d66a2:	a904      	add	r1, sp, #16
   d66a4:	a807      	add	r0, sp, #28
   d66a6:	f7fd ff08 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d66aa:	aa07      	add	r2, sp, #28
   d66ac:	4631      	mov	r1, r6
   d66ae:	4628      	mov	r0, r5
   d66b0:	f7ff ffc4 	bl	d663c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d66b4:	a807      	add	r0, sp, #28
   d66b6:	f7fd fe91 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d66ba:	4b1b      	ldr	r3, [pc, #108]	; (d6728 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d66bc:	602b      	str	r3, [r5, #0]
   d66be:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d66c0:	a804      	add	r0, sp, #16
   d66c2:	f7fd fe8b 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d66c6:	4b19      	ldr	r3, [pc, #100]	; (d672c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d66c8:	602b      	str	r3, [r5, #0]
   d66ca:	a801      	add	r0, sp, #4
   d66cc:	e01f      	b.n	d670e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d66ce:	4918      	ldr	r1, [pc, #96]	; (d6730 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d66d0:	4638      	mov	r0, r7
   d66d2:	f001 f859 	bl	d7788 <strcmp>
   d66d6:	b9f0      	cbnz	r0, d6716 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d66d8:	b1fc      	cbz	r4, d671a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d66da:	4629      	mov	r1, r5
   d66dc:	a804      	add	r0, sp, #16
   d66de:	f7ff fdb3 	bl	d6248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d66e2:	4910      	ldr	r1, [pc, #64]	; (d6724 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d66e4:	2024      	movs	r0, #36	; 0x24
   d66e6:	f000 fe6b 	bl	d73c0 <_ZnwjRKSt9nothrow_t>
   d66ea:	4605      	mov	r5, r0
   d66ec:	b170      	cbz	r0, d670c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d66ee:	a904      	add	r1, sp, #16
   d66f0:	a807      	add	r0, sp, #28
   d66f2:	f7fd fee2 	bl	d44ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d66f6:	aa07      	add	r2, sp, #28
   d66f8:	4631      	mov	r1, r6
   d66fa:	4628      	mov	r0, r5
   d66fc:	f7ff ff9e 	bl	d663c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6700:	a807      	add	r0, sp, #28
   d6702:	f7fd fe6b 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6706:	4b08      	ldr	r3, [pc, #32]	; (d6728 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6708:	602b      	str	r3, [r5, #0]
   d670a:	622c      	str	r4, [r5, #32]
   d670c:	a804      	add	r0, sp, #16
   d670e:	f7fd fe65 	bl	d43dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6712:	4628      	mov	r0, r5
   d6714:	e002      	b.n	d671c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6716:	2000      	movs	r0, #0
   d6718:	e000      	b.n	d671c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d671a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d671c:	b00b      	add	sp, #44	; 0x2c
   d671e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6720:	000d7c86 	.word	0x000d7c86
   d6724:	000d7e70 	.word	0x000d7e70
   d6728:	000d7d08 	.word	0x000d7d08
   d672c:	000d7c18 	.word	0x000d7c18
   d6730:	000d7c8a 	.word	0x000d7c8a

000d6734 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6734:	4b01      	ldr	r3, [pc, #4]	; (d673c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6736:	4a02      	ldr	r2, [pc, #8]	; (d6740 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6738:	601a      	str	r2, [r3, #0]
   d673a:	4770      	bx	lr
   d673c:	2003e400 	.word	0x2003e400
   d6740:	000d79b7 	.word	0x000d79b7

000d6744 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6748:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d674a:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d674e:	4604      	mov	r4, r0
   d6750:	460e      	mov	r6, r1
   d6752:	4617      	mov	r7, r2
   d6754:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6756:	f000 fd37 	bl	d71c8 <_Z16_fetch_usbserialv>
   d675a:	4581      	cmp	r9, r0
   d675c:	d105      	bne.n	d676a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d675e:	485a      	ldr	r0, [pc, #360]	; (d68c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6760:	f000 fa73 	bl	d6c4a <_ZN5spark12NetworkClass9listeningEv>
   d6764:	2800      	cmp	r0, #0
   d6766:	f040 80ac 	bne.w	d68c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d676a:	792b      	ldrb	r3, [r5, #4]
   d676c:	071b      	lsls	r3, r3, #28
   d676e:	d505      	bpl.n	d677c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6770:	696b      	ldr	r3, [r5, #20]
   d6772:	4a56      	ldr	r2, [pc, #344]	; (d68cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6774:	6a20      	ldr	r0, [r4, #32]
   d6776:	2100      	movs	r1, #0
   d6778:	f000 fb31 	bl	d6dde <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d677c:	f1b8 0f00 	cmp.w	r8, #0
   d6780:	d00d      	beq.n	d679e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d6782:	215b      	movs	r1, #91	; 0x5b
   d6784:	4620      	mov	r0, r4
   d6786:	f7ff fa2e 	bl	d5be6 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d678a:	4641      	mov	r1, r8
   d678c:	4620      	mov	r0, r4
   d678e:	f7ff fa1c 	bl	d5bca <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6792:	6823      	ldr	r3, [r4, #0]
   d6794:	494e      	ldr	r1, [pc, #312]	; (d68d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6796:	68db      	ldr	r3, [r3, #12]
   d6798:	2202      	movs	r2, #2
   d679a:	4620      	mov	r0, r4
   d679c:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d679e:	792b      	ldrb	r3, [r5, #4]
   d67a0:	07d9      	lsls	r1, r3, #31
   d67a2:	d525      	bpl.n	d67f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d67a4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d67a8:	212f      	movs	r1, #47	; 0x2f
   d67aa:	4640      	mov	r0, r8
   d67ac:	f001 f813 	bl	d77d6 <strrchr>
    if (s1) {
   d67b0:	b108      	cbz	r0, d67b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d67b2:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d67b6:	4641      	mov	r1, r8
   d67b8:	4620      	mov	r0, r4
   d67ba:	f7ff fa06 	bl	d5bca <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d67be:	792b      	ldrb	r3, [r5, #4]
   d67c0:	079a      	lsls	r2, r3, #30
   d67c2:	d509      	bpl.n	d67d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d67c4:	213a      	movs	r1, #58	; 0x3a
   d67c6:	4620      	mov	r0, r4
   d67c8:	f7ff fa0d 	bl	d5be6 <_ZN5spark16StreamLogHandler5writeEc>
   d67cc:	68eb      	ldr	r3, [r5, #12]
   d67ce:	4a41      	ldr	r2, [pc, #260]	; (d68d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d67d0:	6a20      	ldr	r0, [r4, #32]
   d67d2:	2100      	movs	r1, #0
   d67d4:	f000 fb03 	bl	d6dde <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d67d8:	792b      	ldrb	r3, [r5, #4]
   d67da:	f013 0f04 	tst.w	r3, #4
   d67de:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d67e0:	bf18      	it	ne
   d67e2:	493d      	ldrne	r1, [pc, #244]	; (d68d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d67e4:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d67e6:	bf08      	it	eq
   d67e8:	493c      	ldreq	r1, [pc, #240]	; (d68dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d67ea:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d67ec:	4620      	mov	r0, r4
   d67ee:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d67f0:	792b      	ldrb	r3, [r5, #4]
   d67f2:	075b      	lsls	r3, r3, #29
   d67f4:	d518      	bpl.n	d6828 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d67f6:	6929      	ldr	r1, [r5, #16]
   d67f8:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d67fa:	4613      	mov	r3, r2
   d67fc:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6800:	b138      	cbz	r0, d6812 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6802:	2820      	cmp	r0, #32
   d6804:	d101      	bne.n	d680a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6806:	4619      	mov	r1, r3
   d6808:	e001      	b.n	d680e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d680a:	2828      	cmp	r0, #40	; 0x28
   d680c:	d001      	beq.n	d6812 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d680e:	461a      	mov	r2, r3
   d6810:	e7f3      	b.n	d67fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d6812:	6823      	ldr	r3, [r4, #0]
   d6814:	1a52      	subs	r2, r2, r1
   d6816:	68db      	ldr	r3, [r3, #12]
   d6818:	4620      	mov	r0, r4
   d681a:	4798      	blx	r3
        write("(): ", 4);
   d681c:	6823      	ldr	r3, [r4, #0]
   d681e:	4930      	ldr	r1, [pc, #192]	; (d68e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6820:	68db      	ldr	r3, [r3, #12]
   d6822:	2204      	movs	r2, #4
   d6824:	4620      	mov	r0, r4
   d6826:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6828:	2100      	movs	r1, #0
   d682a:	4638      	mov	r0, r7
   d682c:	f7fe f870 	bl	d4910 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d6830:	4601      	mov	r1, r0
   d6832:	4620      	mov	r0, r4
   d6834:	f7ff f9c9 	bl	d5bca <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6838:	6823      	ldr	r3, [r4, #0]
   d683a:	4928      	ldr	r1, [pc, #160]	; (d68dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d683c:	68db      	ldr	r3, [r3, #12]
   d683e:	2202      	movs	r2, #2
   d6840:	4620      	mov	r0, r4
   d6842:	4798      	blx	r3
    // Message
    if (msg) {
   d6844:	b11e      	cbz	r6, d684e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d6846:	4631      	mov	r1, r6
   d6848:	4620      	mov	r0, r4
   d684a:	f7ff f9be 	bl	d5bca <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d684e:	792b      	ldrb	r3, [r5, #4]
   d6850:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6854:	d02d      	beq.n	d68b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d6856:	6823      	ldr	r3, [r4, #0]
   d6858:	4922      	ldr	r1, [pc, #136]	; (d68e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d685a:	68db      	ldr	r3, [r3, #12]
   d685c:	4620      	mov	r0, r4
   d685e:	2202      	movs	r2, #2
   d6860:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d6862:	792b      	ldrb	r3, [r5, #4]
   d6864:	06d8      	lsls	r0, r3, #27
   d6866:	d50b      	bpl.n	d6880 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d6868:	6823      	ldr	r3, [r4, #0]
   d686a:	491f      	ldr	r1, [pc, #124]	; (d68e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d686c:	68db      	ldr	r3, [r3, #12]
   d686e:	2207      	movs	r2, #7
   d6870:	4620      	mov	r0, r4
   d6872:	4798      	blx	r3
   d6874:	69ab      	ldr	r3, [r5, #24]
   d6876:	4a1d      	ldr	r2, [pc, #116]	; (d68ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d6878:	6a20      	ldr	r0, [r4, #32]
   d687a:	2100      	movs	r1, #0
   d687c:	f000 faaf 	bl	d6dde <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d6880:	792b      	ldrb	r3, [r5, #4]
   d6882:	0699      	lsls	r1, r3, #26
   d6884:	d511      	bpl.n	d68aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d6886:	06da      	lsls	r2, r3, #27
   d6888:	d505      	bpl.n	d6896 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d688a:	6823      	ldr	r3, [r4, #0]
   d688c:	4912      	ldr	r1, [pc, #72]	; (d68d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d688e:	68db      	ldr	r3, [r3, #12]
   d6890:	2202      	movs	r2, #2
   d6892:	4620      	mov	r0, r4
   d6894:	4798      	blx	r3
            }
            write("details = ", 10);
   d6896:	6823      	ldr	r3, [r4, #0]
   d6898:	4915      	ldr	r1, [pc, #84]	; (d68f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d689a:	68db      	ldr	r3, [r3, #12]
   d689c:	4620      	mov	r0, r4
   d689e:	220a      	movs	r2, #10
   d68a0:	4798      	blx	r3
            write(attr.details);
   d68a2:	69e9      	ldr	r1, [r5, #28]
   d68a4:	4620      	mov	r0, r4
   d68a6:	f7ff f990 	bl	d5bca <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d68aa:	215d      	movs	r1, #93	; 0x5d
   d68ac:	4620      	mov	r0, r4
   d68ae:	f7ff f99a 	bl	d5be6 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d68b2:	6823      	ldr	r3, [r4, #0]
   d68b4:	490f      	ldr	r1, [pc, #60]	; (d68f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d68b6:	68db      	ldr	r3, [r3, #12]
   d68b8:	4620      	mov	r0, r4
   d68ba:	2202      	movs	r2, #2
}
   d68bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d68c0:	4718      	bx	r3
   d68c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68c6:	bf00      	nop
   d68c8:	2003e5d8 	.word	0x2003e5d8
   d68cc:	000d7c9b 	.word	0x000d7c9b
   d68d0:	000d7ca2 	.word	0x000d7ca2
   d68d4:	000d79a0 	.word	0x000d79a0
   d68d8:	000d7ca5 	.word	0x000d7ca5
   d68dc:	000d7caa 	.word	0x000d7caa
   d68e0:	000d7ca8 	.word	0x000d7ca8
   d68e4:	000d7cad 	.word	0x000d7cad
   d68e8:	000d7cb0 	.word	0x000d7cb0
   d68ec:	000d7cb8 	.word	0x000d7cb8
   d68f0:	000d7cbb 	.word	0x000d7cbb
   d68f4:	000d7cc6 	.word	0x000d7cc6

000d68f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d68f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68fc:	b085      	sub	sp, #20
   d68fe:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d6902:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6904:	4606      	mov	r6, r0
   d6906:	460f      	mov	r7, r1
   d6908:	4691      	mov	r9, r2
   d690a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d690c:	f000 fc5c 	bl	d71c8 <_Z16_fetch_usbserialv>
   d6910:	4580      	cmp	r8, r0
   d6912:	d105      	bne.n	d6920 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6914:	484a      	ldr	r0, [pc, #296]	; (d6a40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6916:	f000 f998 	bl	d6c4a <_ZN5spark12NetworkClass9listeningEv>
   d691a:	2800      	cmp	r0, #0
   d691c:	f040 808c 	bne.w	d6a38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d6920:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6922:	4a48      	ldr	r2, [pc, #288]	; (d6a44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6924:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6926:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d692a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d692c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d692e:	f88d 8008 	strb.w	r8, [sp, #8]
   d6932:	f7fe ffec 	bl	d590e <_ZN5spark10JSONWriter11beginObjectEv>
   d6936:	4641      	mov	r1, r8
   d6938:	4648      	mov	r0, r9
   d693a:	f7fd ffe9 	bl	d4910 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d693e:	4942      	ldr	r1, [pc, #264]	; (d6a48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6940:	4680      	mov	r8, r0
   d6942:	2201      	movs	r2, #1
   d6944:	a801      	add	r0, sp, #4
   d6946:	f7ff f867 	bl	d5a18 <_ZN5spark10JSONWriter4nameEPKcj>
   d694a:	4641      	mov	r1, r8
   d694c:	f7ff f92d 	bl	d5baa <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d6950:	b13f      	cbz	r7, d6962 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d6952:	493e      	ldr	r1, [pc, #248]	; (d6a4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d6954:	2201      	movs	r2, #1
   d6956:	a801      	add	r0, sp, #4
   d6958:	f7ff f85e 	bl	d5a18 <_ZN5spark10JSONWriter4nameEPKcj>
   d695c:	4639      	mov	r1, r7
   d695e:	f7ff f924 	bl	d5baa <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d6962:	b13d      	cbz	r5, d6974 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6964:	493a      	ldr	r1, [pc, #232]	; (d6a50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d6966:	2201      	movs	r2, #1
   d6968:	a801      	add	r0, sp, #4
   d696a:	f7ff f855 	bl	d5a18 <_ZN5spark10JSONWriter4nameEPKcj>
   d696e:	4629      	mov	r1, r5
   d6970:	f7ff f91b 	bl	d5baa <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d6974:	7923      	ldrb	r3, [r4, #4]
   d6976:	07df      	lsls	r7, r3, #31
   d6978:	d50e      	bpl.n	d6998 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d697a:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d697c:	212f      	movs	r1, #47	; 0x2f
   d697e:	4628      	mov	r0, r5
   d6980:	f000 ff29 	bl	d77d6 <strrchr>
    if (s1) {
   d6984:	b100      	cbz	r0, d6988 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d6986:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d6988:	4932      	ldr	r1, [pc, #200]	; (d6a54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d698a:	2201      	movs	r2, #1
   d698c:	a801      	add	r0, sp, #4
   d698e:	f7ff f843 	bl	d5a18 <_ZN5spark10JSONWriter4nameEPKcj>
   d6992:	4629      	mov	r1, r5
   d6994:	f7ff f909 	bl	d5baa <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d6998:	7923      	ldrb	r3, [r4, #4]
   d699a:	079d      	lsls	r5, r3, #30
   d699c:	d507      	bpl.n	d69ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d699e:	492e      	ldr	r1, [pc, #184]	; (d6a58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d69a0:	2202      	movs	r2, #2
   d69a2:	a801      	add	r0, sp, #4
   d69a4:	f7ff f838 	bl	d5a18 <_ZN5spark10JSONWriter4nameEPKcj>
   d69a8:	68e1      	ldr	r1, [r4, #12]
   d69aa:	f7fe ffbd 	bl	d5928 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d69ae:	7923      	ldrb	r3, [r4, #4]
   d69b0:	0758      	lsls	r0, r3, #29
   d69b2:	d516      	bpl.n	d69e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d69b4:	6925      	ldr	r5, [r4, #16]
   d69b6:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d69b8:	463b      	mov	r3, r7
   d69ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d69be:	b13a      	cbz	r2, d69d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d69c0:	2a20      	cmp	r2, #32
   d69c2:	d101      	bne.n	d69c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d69c4:	461d      	mov	r5, r3
   d69c6:	e001      	b.n	d69cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d69c8:	2a28      	cmp	r2, #40	; 0x28
   d69ca:	d001      	beq.n	d69d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d69cc:	461f      	mov	r7, r3
   d69ce:	e7f3      	b.n	d69b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d69d0:	2202      	movs	r2, #2
   d69d2:	4922      	ldr	r1, [pc, #136]	; (d6a5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d69d4:	a801      	add	r0, sp, #4
   d69d6:	f7ff f81f 	bl	d5a18 <_ZN5spark10JSONWriter4nameEPKcj>
   d69da:	1b7a      	subs	r2, r7, r5
   d69dc:	4629      	mov	r1, r5
   d69de:	f7ff f82a 	bl	d5a36 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d69e2:	7923      	ldrb	r3, [r4, #4]
   d69e4:	0719      	lsls	r1, r3, #28
   d69e6:	d507      	bpl.n	d69f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d69e8:	491d      	ldr	r1, [pc, #116]	; (d6a60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d69ea:	2201      	movs	r2, #1
   d69ec:	a801      	add	r0, sp, #4
   d69ee:	f7ff f813 	bl	d5a18 <_ZN5spark10JSONWriter4nameEPKcj>
   d69f2:	6961      	ldr	r1, [r4, #20]
   d69f4:	f7fe ffaa 	bl	d594c <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d69f8:	7923      	ldrb	r3, [r4, #4]
   d69fa:	06da      	lsls	r2, r3, #27
   d69fc:	d508      	bpl.n	d6a10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d69fe:	2204      	movs	r2, #4
   d6a00:	4918      	ldr	r1, [pc, #96]	; (d6a64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6a02:	eb0d 0002 	add.w	r0, sp, r2
   d6a06:	f7ff f807 	bl	d5a18 <_ZN5spark10JSONWriter4nameEPKcj>
   d6a0a:	69a1      	ldr	r1, [r4, #24]
   d6a0c:	f7fe ff8c 	bl	d5928 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d6a10:	7923      	ldrb	r3, [r4, #4]
   d6a12:	069b      	lsls	r3, r3, #26
   d6a14:	d507      	bpl.n	d6a26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d6a16:	4914      	ldr	r1, [pc, #80]	; (d6a68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6a18:	2206      	movs	r2, #6
   d6a1a:	a801      	add	r0, sp, #4
   d6a1c:	f7fe fffc 	bl	d5a18 <_ZN5spark10JSONWriter4nameEPKcj>
   d6a20:	69e1      	ldr	r1, [r4, #28]
   d6a22:	f7ff f8c2 	bl	d5baa <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d6a26:	a801      	add	r0, sp, #4
   d6a28:	f7fe ff5b 	bl	d58e2 <_ZN5spark10JSONWriter9endObjectEv>
   d6a2c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d6a2e:	490f      	ldr	r1, [pc, #60]	; (d6a6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6a30:	6803      	ldr	r3, [r0, #0]
   d6a32:	2202      	movs	r2, #2
   d6a34:	68db      	ldr	r3, [r3, #12]
   d6a36:	4798      	blx	r3
}
   d6a38:	b005      	add	sp, #20
   d6a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6a3e:	bf00      	nop
   d6a40:	2003e5d8 	.word	0x2003e5d8
   d6a44:	000d7c00 	.word	0x000d7c00
   d6a48:	000d7c32 	.word	0x000d7c32
   d6a4c:	000d7c45 	.word	0x000d7c45
   d6a50:	000d7cfa 	.word	0x000d7cfa
   d6a54:	000d7be6 	.word	0x000d7be6
   d6a58:	000d7cc9 	.word	0x000d7cc9
   d6a5c:	000d7ccc 	.word	0x000d7ccc
   d6a60:	000d7c5a 	.word	0x000d7c5a
   d6a64:	000d7ccf 	.word	0x000d7ccf
   d6a68:	000d7cd4 	.word	0x000d7cd4
   d6a6c:	000d7cc6 	.word	0x000d7cc6

000d6a70 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a70:	2200      	movs	r2, #0
   d6a72:	4611      	mov	r1, r2
   d6a74:	6840      	ldr	r0, [r0, #4]
   d6a76:	f7fd bfb7 	b.w	d49e8 <network_listening>

000d6a7a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a7a:	2200      	movs	r2, #0
   d6a7c:	4611      	mov	r1, r2
   d6a7e:	6840      	ldr	r0, [r0, #4]
   d6a80:	f7fd bfc2 	b.w	d4a08 <network_get_listen_timeout>

000d6a84 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a84:	2200      	movs	r2, #0
   d6a86:	6840      	ldr	r0, [r0, #4]
   d6a88:	f7fd bfb6 	b.w	d49f8 <network_set_listen_timeout>

000d6a8c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a8c:	2200      	movs	r2, #0
   d6a8e:	f081 0101 	eor.w	r1, r1, #1
   d6a92:	6840      	ldr	r0, [r0, #4]
   d6a94:	f7fd bfa0 	b.w	d49d8 <network_listen>

000d6a98 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6a98:	2300      	movs	r3, #0
   d6a9a:	461a      	mov	r2, r3
   d6a9c:	2101      	movs	r1, #1
   d6a9e:	6840      	ldr	r0, [r0, #4]
   d6aa0:	f7fd bf92 	b.w	d49c8 <network_off>

000d6aa4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6aa4:	2300      	movs	r3, #0
   d6aa6:	461a      	mov	r2, r3
   d6aa8:	4619      	mov	r1, r3
   d6aaa:	6840      	ldr	r0, [r0, #4]
   d6aac:	f7fd bf84 	b.w	d49b8 <network_on>

000d6ab0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6ab0:	2200      	movs	r2, #0
   d6ab2:	4611      	mov	r1, r2
   d6ab4:	6840      	ldr	r0, [r0, #4]
   d6ab6:	f7fd bf77 	b.w	d49a8 <network_ready>

000d6aba <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6aba:	2200      	movs	r2, #0
   d6abc:	4611      	mov	r1, r2
   d6abe:	6840      	ldr	r0, [r0, #4]
   d6ac0:	f7fd bf62 	b.w	d4988 <network_connecting>

000d6ac4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6ac4:	2200      	movs	r2, #0
   d6ac6:	2102      	movs	r1, #2
   d6ac8:	6840      	ldr	r0, [r0, #4]
   d6aca:	f7fd bf65 	b.w	d4998 <network_disconnect>

000d6ace <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ace:	2300      	movs	r3, #0
   d6ad0:	461a      	mov	r2, r3
   d6ad2:	6840      	ldr	r0, [r0, #4]
   d6ad4:	f7fd bf50 	b.w	d4978 <network_connect>

000d6ad8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6ad8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ada:	4605      	mov	r5, r0
   d6adc:	b188      	cbz	r0, d6b02 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ade:	6804      	ldr	r4, [r0, #0]
   d6ae0:	b14c      	cbz	r4, d6af6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6ae2:	68a3      	ldr	r3, [r4, #8]
   d6ae4:	b11b      	cbz	r3, d6aee <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6ae6:	2203      	movs	r2, #3
   d6ae8:	4621      	mov	r1, r4
   d6aea:	4620      	mov	r0, r4
   d6aec:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6aee:	2110      	movs	r1, #16
   d6af0:	4620      	mov	r0, r4
   d6af2:	f000 fc5a 	bl	d73aa <_ZdlPvj>
   d6af6:	4628      	mov	r0, r5
   d6af8:	2114      	movs	r1, #20
      }
   d6afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6afe:	f000 bc54 	b.w	d73aa <_ZdlPvj>
   d6b02:	bd38      	pop	{r3, r4, r5, pc}

000d6b04 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6b04:	b110      	cbz	r0, d6b0c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6b06:	6803      	ldr	r3, [r0, #0]
   d6b08:	685b      	ldr	r3, [r3, #4]
   d6b0a:	4718      	bx	r3
   d6b0c:	4770      	bx	lr

000d6b0e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6b0e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6b10:	6803      	ldr	r3, [r0, #0]
   d6b12:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6b14:	b1bb      	cbz	r3, d6b46 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6b16:	6858      	ldr	r0, [r3, #4]
   d6b18:	f7fd fdea 	bl	d46f0 <os_thread_is_current>
   d6b1c:	b978      	cbnz	r0, d6b3e <_ZN6ThreadD1Ev+0x30>
   d6b1e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6b20:	7c5a      	ldrb	r2, [r3, #17]
   d6b22:	b912      	cbnz	r2, d6b2a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6b24:	6858      	ldr	r0, [r3, #4]
   d6b26:	f7fd fdeb 	bl	d4700 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6b2a:	6823      	ldr	r3, [r4, #0]
   d6b2c:	6858      	ldr	r0, [r3, #4]
   d6b2e:	f7fd fdef 	bl	d4710 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b32:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6b34:	2300      	movs	r3, #0
   d6b36:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6b38:	b128      	cbz	r0, d6b46 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6b3a:	f7ff ffcd 	bl	d6ad8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b3e:	6820      	ldr	r0, [r4, #0]
   d6b40:	b108      	cbz	r0, d6b46 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6b42:	f7ff ffc9 	bl	d6ad8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6b46:	4620      	mov	r0, r4
   d6b48:	bd10      	pop	{r4, pc}

000d6b4a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6b4a:	b538      	push	{r3, r4, r5, lr}
   d6b4c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b4e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6b52:	b108      	cbz	r0, d6b58 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6b54:	f7fd faa3 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6b58:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6b5c:	b108      	cbz	r0, d6b62 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6b5e:	f7fd fde7 	bl	d4730 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b62:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6b66:	b135      	cbz	r5, d6b76 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b68:	4628      	mov	r0, r5
   d6b6a:	f7ff ffd0 	bl	d6b0e <_ZN6ThreadD1Ev>
   d6b6e:	2104      	movs	r1, #4
   d6b70:	4628      	mov	r0, r5
   d6b72:	f000 fc1a 	bl	d73aa <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b76:	6820      	ldr	r0, [r4, #0]
   d6b78:	b108      	cbz	r0, d6b7e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6b7a:	f7ff ffc3 	bl	d6b04 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6b7e:	4620      	mov	r0, r4
   d6b80:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6b84 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6b84:	b510      	push	{r4, lr}
   d6b86:	4b04      	ldr	r3, [pc, #16]	; (d6b98 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6b88:	4604      	mov	r4, r0
   d6b8a:	f840 3b08 	str.w	r3, [r0], #8
   d6b8e:	f7ff ffdc 	bl	d6b4a <_ZN5spark11MeshPublishD1Ev>
   d6b92:	4620      	mov	r0, r4
   d6b94:	bd10      	pop	{r4, pc}
   d6b96:	bf00      	nop
   d6b98:	000d7d50 	.word	0x000d7d50

000d6b9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6b9c:	b538      	push	{r3, r4, r5, lr}
   d6b9e:	4c0e      	ldr	r4, [pc, #56]	; (d6bd8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6ba0:	4b0e      	ldr	r3, [pc, #56]	; (d6bdc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6ba2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6ba4:	2500      	movs	r5, #0
   d6ba6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6ba8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6bac:	6063      	str	r3, [r4, #4]
   d6bae:	60a5      	str	r5, [r4, #8]
   d6bb0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6bb4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6bb8:	f7fd fdb2 	bl	d4720 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6bbc:	4b08      	ldr	r3, [pc, #32]	; (d6be0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6bbe:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6bc2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6bc6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6bc8:	4620      	mov	r0, r4
   d6bca:	4a06      	ldr	r2, [pc, #24]	; (d6be4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6bcc:	4906      	ldr	r1, [pc, #24]	; (d6be8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6bd2:	f000 bbe5 	b.w	d73a0 <__aeabi_atexit>
   d6bd6:	bf00      	nop
   d6bd8:	2003e404 	.word	0x2003e404
   d6bdc:	000d7d84 	.word	0x000d7d84
   d6be0:	000d7d50 	.word	0x000d7d50
   d6be4:	2003e2f4 	.word	0x2003e2f4
   d6be8:	000d6b85 	.word	0x000d6b85

000d6bec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6bec:	2300      	movs	r3, #0
   d6bee:	461a      	mov	r2, r3
   d6bf0:	6840      	ldr	r0, [r0, #4]
   d6bf2:	f7fd bec1 	b.w	d4978 <network_connect>

000d6bf6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6bf6:	2200      	movs	r2, #0
   d6bf8:	2102      	movs	r1, #2
   d6bfa:	6840      	ldr	r0, [r0, #4]
   d6bfc:	f7fd becc 	b.w	d4998 <network_disconnect>

000d6c00 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6c00:	2200      	movs	r2, #0
   d6c02:	4611      	mov	r1, r2
   d6c04:	6840      	ldr	r0, [r0, #4]
   d6c06:	f7fd bebf 	b.w	d4988 <network_connecting>

000d6c0a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6c0a:	2200      	movs	r2, #0
   d6c0c:	4611      	mov	r1, r2
   d6c0e:	6840      	ldr	r0, [r0, #4]
   d6c10:	f7fd beca 	b.w	d49a8 <network_ready>

000d6c14 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6c14:	2300      	movs	r3, #0
   d6c16:	461a      	mov	r2, r3
   d6c18:	4619      	mov	r1, r3
   d6c1a:	6840      	ldr	r0, [r0, #4]
   d6c1c:	f7fd becc 	b.w	d49b8 <network_on>

000d6c20 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6c20:	2300      	movs	r3, #0
   d6c22:	461a      	mov	r2, r3
   d6c24:	4619      	mov	r1, r3
   d6c26:	6840      	ldr	r0, [r0, #4]
   d6c28:	f7fd bece 	b.w	d49c8 <network_off>

000d6c2c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6c2c:	2200      	movs	r2, #0
   d6c2e:	f081 0101 	eor.w	r1, r1, #1
   d6c32:	6840      	ldr	r0, [r0, #4]
   d6c34:	f7fd bed0 	b.w	d49d8 <network_listen>

000d6c38 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6c38:	2200      	movs	r2, #0
   d6c3a:	6840      	ldr	r0, [r0, #4]
   d6c3c:	f7fd bedc 	b.w	d49f8 <network_set_listen_timeout>

000d6c40 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6c40:	2200      	movs	r2, #0
   d6c42:	4611      	mov	r1, r2
   d6c44:	6840      	ldr	r0, [r0, #4]
   d6c46:	f7fd bedf 	b.w	d4a08 <network_get_listen_timeout>

000d6c4a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6c4a:	2200      	movs	r2, #0
   d6c4c:	4611      	mov	r1, r2
   d6c4e:	6840      	ldr	r0, [r0, #4]
   d6c50:	f7fd beca 	b.w	d49e8 <network_listening>

000d6c54 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6c58:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6c5a:	b095      	sub	sp, #84	; 0x54
   d6c5c:	4616      	mov	r6, r2
   d6c5e:	460d      	mov	r5, r1
   d6c60:	4607      	mov	r7, r0
    IPAddress addr;
   d6c62:	f7fe fd4d 	bl	d5700 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6c66:	4621      	mov	r1, r4
   d6c68:	2220      	movs	r2, #32
   d6c6a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6c6c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6c6e:	f000 fd42 	bl	d76f6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6c72:	2340      	movs	r3, #64	; 0x40
   d6c74:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6c76:	4621      	mov	r1, r4
   d6c78:	466b      	mov	r3, sp
   d6c7a:	aa0c      	add	r2, sp, #48	; 0x30
   d6c7c:	4630      	mov	r0, r6
   d6c7e:	f7fd fd9f 	bl	d47c0 <netdb_getaddrinfo>
    if (!r) {
   d6c82:	4604      	mov	r4, r0
   d6c84:	2800      	cmp	r0, #0
   d6c86:	d144      	bne.n	d6d12 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c88:	4602      	mov	r2, r0
   d6c8a:	2101      	movs	r1, #1
   d6c8c:	6868      	ldr	r0, [r5, #4]
   d6c8e:	f7fd fe8b 	bl	d49a8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c92:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c94:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c96:	4622      	mov	r2, r4
   d6c98:	6868      	ldr	r0, [r5, #4]
   d6c9a:	f7fd fe85 	bl	d49a8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c9e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6ca0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6ca2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6ca4:	2e00      	cmp	r6, #0
   d6ca6:	d034      	beq.n	d6d12 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6ca8:	2900      	cmp	r1, #0
   d6caa:	d132      	bne.n	d6d12 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6cac:	6873      	ldr	r3, [r6, #4]
   d6cae:	2b02      	cmp	r3, #2
   d6cb0:	d002      	beq.n	d6cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6cb2:	2b0a      	cmp	r3, #10
   d6cb4:	d009      	beq.n	d6cca <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6cb6:	e02a      	b.n	d6d0e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6cb8:	f1b8 0f00 	cmp.w	r8, #0
   d6cbc:	d027      	beq.n	d6d0e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6cbe:	6971      	ldr	r1, [r6, #20]
   d6cc0:	4638      	mov	r0, r7
   d6cc2:	3104      	adds	r1, #4
   d6cc4:	f7fe fd49 	bl	d575a <_ZN9IPAddressaSEPKh>
   d6cc8:	e020      	b.n	d6d0c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6cca:	f1b9 0f00 	cmp.w	r9, #0
   d6cce:	d01e      	beq.n	d6d0e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6cd0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6cd2:	2211      	movs	r2, #17
   d6cd4:	a801      	add	r0, sp, #4
   d6cd6:	f000 fd0e 	bl	d76f6 <memset>
                    a.v = 6;
   d6cda:	2306      	movs	r3, #6
   d6cdc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ce0:	ad01      	add	r5, sp, #4
   d6ce2:	f104 0308 	add.w	r3, r4, #8
   d6ce6:	3418      	adds	r4, #24
   d6ce8:	6818      	ldr	r0, [r3, #0]
   d6cea:	6859      	ldr	r1, [r3, #4]
   d6cec:	462a      	mov	r2, r5
   d6cee:	c203      	stmia	r2!, {r0, r1}
   d6cf0:	3308      	adds	r3, #8
   d6cf2:	42a3      	cmp	r3, r4
   d6cf4:	4615      	mov	r5, r2
   d6cf6:	d1f7      	bne.n	d6ce8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6cf8:	a901      	add	r1, sp, #4
   d6cfa:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6cfc:	ad07      	add	r5, sp, #28
   d6cfe:	f7fe fd0d 	bl	d571c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d04:	1d3c      	adds	r4, r7, #4
   d6d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d08:	682b      	ldr	r3, [r5, #0]
   d6d0a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6d0c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d0e:	69f6      	ldr	r6, [r6, #28]
   d6d10:	e7c8      	b.n	d6ca4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6d12:	9800      	ldr	r0, [sp, #0]
   d6d14:	f7fd fd4c 	bl	d47b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6d18:	4638      	mov	r0, r7
   d6d1a:	b015      	add	sp, #84	; 0x54
   d6d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6d20 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6d20:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6d22:	4a03      	ldr	r2, [pc, #12]	; (d6d30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6d24:	601a      	str	r2, [r3, #0]
   d6d26:	2200      	movs	r2, #0
   d6d28:	605a      	str	r2, [r3, #4]
   d6d2a:	4770      	bx	lr
   d6d2c:	2003e5d8 	.word	0x2003e5d8
   d6d30:	000d7d84 	.word	0x000d7d84

000d6d34 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d36:	4606      	mov	r6, r0
   d6d38:	460d      	mov	r5, r1
   d6d3a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6d3c:	2400      	movs	r4, #0
  while (size--) {
   d6d3e:	42bd      	cmp	r5, r7
   d6d40:	d00c      	beq.n	d6d5c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6d42:	6833      	ldr	r3, [r6, #0]
   d6d44:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6d48:	689b      	ldr	r3, [r3, #8]
   d6d4a:	4630      	mov	r0, r6
   d6d4c:	4798      	blx	r3
     if (chunk>=0)
   d6d4e:	2800      	cmp	r0, #0
   d6d50:	db01      	blt.n	d6d56 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6d52:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6d54:	e7f3      	b.n	d6d3e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6d56:	2c00      	cmp	r4, #0
   d6d58:	bf08      	it	eq
   d6d5a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6d5c:	4620      	mov	r0, r4
   d6d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d60 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6d60:	b570      	push	{r4, r5, r6, lr}
   d6d62:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6d64:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6d66:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6d68:	b149      	cbz	r1, d6d7e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6d6a:	f000 fd17 	bl	d779c <strlen>
   d6d6e:	682b      	ldr	r3, [r5, #0]
   d6d70:	4602      	mov	r2, r0
   d6d72:	4621      	mov	r1, r4
   d6d74:	4628      	mov	r0, r5
   d6d76:	68db      	ldr	r3, [r3, #12]
    }
   d6d78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6d7c:	4718      	bx	r3
    }
   d6d7e:	bd70      	pop	{r4, r5, r6, pc}

000d6d80 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6d80:	6803      	ldr	r3, [r0, #0]
   d6d82:	689b      	ldr	r3, [r3, #8]
   d6d84:	4718      	bx	r3

000d6d86 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6d86:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6d88:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6d8a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6d8c:	f7ff fff8 	bl	d6d80 <_ZN5Print5printEc>
  n += print('\n');
   d6d90:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6d92:	4604      	mov	r4, r0
  n += print('\n');
   d6d94:	4628      	mov	r0, r5
   d6d96:	f7ff fff3 	bl	d6d80 <_ZN5Print5printEc>
  return n;
}
   d6d9a:	4420      	add	r0, r4
   d6d9c:	bd38      	pop	{r3, r4, r5, pc}

000d6d9e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6d9e:	b530      	push	{r4, r5, lr}
   d6da0:	b08b      	sub	sp, #44	; 0x2c
   d6da2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6da4:	2100      	movs	r1, #0
   d6da6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6daa:	2a01      	cmp	r2, #1
   d6dac:	bf98      	it	ls
   d6dae:	220a      	movls	r2, #10
   d6db0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6db4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6db8:	fb05 3312 	mls	r3, r5, r2, r3
   d6dbc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6dc0:	2b09      	cmp	r3, #9
   d6dc2:	bf94      	ite	ls
   d6dc4:	3330      	addls	r3, #48	; 0x30
   d6dc6:	3337      	addhi	r3, #55	; 0x37
   d6dc8:	b2db      	uxtb	r3, r3
   d6dca:	4621      	mov	r1, r4
   d6dcc:	f804 3901 	strb.w	r3, [r4], #-1
   d6dd0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6dd2:	2d00      	cmp	r5, #0
   d6dd4:	d1ee      	bne.n	d6db4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6dd6:	f7ff ffc3 	bl	d6d60 <_ZN5Print5writeEPKc>
}
   d6dda:	b00b      	add	sp, #44	; 0x2c
   d6ddc:	bd30      	pop	{r4, r5, pc}

000d6dde <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6dde:	b40c      	push	{r2, r3}
   d6de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6de4:	b087      	sub	sp, #28
   d6de6:	af00      	add	r7, sp, #0
   d6de8:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6dec:	4605      	mov	r5, r0
   d6dee:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6df2:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6df4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6df6:	4623      	mov	r3, r4
   d6df8:	464a      	mov	r2, r9
   d6dfa:	2114      	movs	r1, #20
   d6dfc:	1d38      	adds	r0, r7, #4
   d6dfe:	f7fd fe2b 	bl	d4a58 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6e02:	2813      	cmp	r0, #19
   d6e04:	d805      	bhi.n	d6e12 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6e06:	1d39      	adds	r1, r7, #4
   d6e08:	4628      	mov	r0, r5
   d6e0a:	f7ff ffa9 	bl	d6d60 <_ZN5Print5writeEPKc>
   d6e0e:	4604      	mov	r4, r0
   d6e10:	e013      	b.n	d6e3a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6e12:	f100 0308 	add.w	r3, r0, #8
   d6e16:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6e1a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6e1c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6e20:	1c41      	adds	r1, r0, #1
   d6e22:	4623      	mov	r3, r4
   d6e24:	464a      	mov	r2, r9
   d6e26:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6e28:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6e2a:	f7fd fe15 	bl	d4a58 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6e2e:	4669      	mov	r1, sp
   d6e30:	4628      	mov	r0, r5
   d6e32:	f7ff ff95 	bl	d6d60 <_ZN5Print5writeEPKc>
   d6e36:	4604      	mov	r4, r0
   d6e38:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6e3a:	b11e      	cbz	r6, d6e44 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6e3c:	4628      	mov	r0, r5
   d6e3e:	f7ff ffa2 	bl	d6d86 <_ZN5Print7printlnEv>
   d6e42:	4404      	add	r4, r0
    return n;
}
   d6e44:	4620      	mov	r0, r4
   d6e46:	371c      	adds	r7, #28
   d6e48:	46bd      	mov	sp, r7
   d6e4a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e4e:	b002      	add	sp, #8
   d6e50:	4770      	bx	lr

000d6e52 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6e52:	b510      	push	{r4, lr}
   d6e54:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e56:	f7fe fbd1 	bl	d55fc <_ZNSt14_Function_baseD1Ev>
   d6e5a:	4620      	mov	r0, r4
   d6e5c:	bd10      	pop	{r4, pc}
	...

000d6e60 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e60:	4803      	ldr	r0, [pc, #12]	; (d6e70 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6e62:	4a04      	ldr	r2, [pc, #16]	; (d6e74 <_GLOBAL__sub_I_RGB+0x14>)
   d6e64:	4904      	ldr	r1, [pc, #16]	; (d6e78 <_GLOBAL__sub_I_RGB+0x18>)
   d6e66:	2300      	movs	r3, #0
   d6e68:	6083      	str	r3, [r0, #8]
   d6e6a:	f000 ba99 	b.w	d73a0 <__aeabi_atexit>
   d6e6e:	bf00      	nop
   d6e70:	2003e5e0 	.word	0x2003e5e0
   d6e74:	2003e2f4 	.word	0x2003e2f4
   d6e78:	000d6e53 	.word	0x000d6e53

000d6e7c <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6e7c:	2300      	movs	r3, #0
   d6e7e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6e80:	6043      	str	r3, [r0, #4]
	len = 0;
   d6e82:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6e84:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6e86:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d6e88:	680c      	ldr	r4, [r1, #0]
   d6e8a:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d6e8c:	684c      	ldr	r4, [r1, #4]
   d6e8e:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6e90:	688c      	ldr	r4, [r1, #8]
   d6e92:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6e94:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6e96:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d6e98:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d6e9a:	bd10      	pop	{r4, pc}

000d6e9c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6e9c:	b510      	push	{r4, lr}
   d6e9e:	4604      	mov	r4, r0
{
	free(buffer);
   d6ea0:	6800      	ldr	r0, [r0, #0]
   d6ea2:	f7fd fdc1 	bl	d4a28 <free>
}
   d6ea6:	4620      	mov	r0, r4
   d6ea8:	bd10      	pop	{r4, pc}

000d6eaa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6eaa:	b510      	push	{r4, lr}
   d6eac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6eae:	6800      	ldr	r0, [r0, #0]
   d6eb0:	b108      	cbz	r0, d6eb6 <_ZN6String10invalidateEv+0xc>
   d6eb2:	f7fd fdb9 	bl	d4a28 <free>
	buffer = NULL;
   d6eb6:	2300      	movs	r3, #0
   d6eb8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6eba:	60a3      	str	r3, [r4, #8]
   d6ebc:	6063      	str	r3, [r4, #4]
   d6ebe:	bd10      	pop	{r4, pc}

000d6ec0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6ec0:	b538      	push	{r3, r4, r5, lr}
   d6ec2:	4604      	mov	r4, r0
   d6ec4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6ec6:	6800      	ldr	r0, [r0, #0]
   d6ec8:	3101      	adds	r1, #1
   d6eca:	f7fd fdb5 	bl	d4a38 <realloc>
	if (newbuffer) {
   d6ece:	b110      	cbz	r0, d6ed6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6ed0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6ed4:	2001      	movs	r0, #1
	}
	return 0;
}
   d6ed6:	bd38      	pop	{r3, r4, r5, pc}

000d6ed8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6ed8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6eda:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6edc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6ede:	b113      	cbz	r3, d6ee6 <_ZN6String7reserveEj+0xe>
   d6ee0:	6843      	ldr	r3, [r0, #4]
   d6ee2:	428b      	cmp	r3, r1
   d6ee4:	d207      	bcs.n	d6ef6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	f7ff ffea 	bl	d6ec0 <_ZN6String12changeBufferEj>
   d6eec:	b120      	cbz	r0, d6ef8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6eee:	68a3      	ldr	r3, [r4, #8]
   d6ef0:	b90b      	cbnz	r3, d6ef6 <_ZN6String7reserveEj+0x1e>
   d6ef2:	6822      	ldr	r2, [r4, #0]
   d6ef4:	7013      	strb	r3, [r2, #0]
   d6ef6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6ef8:	bd10      	pop	{r4, pc}

000d6efa <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6efa:	b570      	push	{r4, r5, r6, lr}
   d6efc:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6efe:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6f00:	4604      	mov	r4, r0
   d6f02:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6f04:	f7ff ffe8 	bl	d6ed8 <_ZN6String7reserveEj>
   d6f08:	b918      	cbnz	r0, d6f12 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6f0a:	4620      	mov	r0, r4
   d6f0c:	f7ff ffcd 	bl	d6eaa <_ZN6String10invalidateEv>
		return *this;
   d6f10:	e009      	b.n	d6f26 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6f12:	462a      	mov	r2, r5
   d6f14:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6f16:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6f18:	6820      	ldr	r0, [r4, #0]
   d6f1a:	f000 fbc6 	bl	d76aa <memcpy>
	buffer[len] = 0;
   d6f1e:	6822      	ldr	r2, [r4, #0]
   d6f20:	68a3      	ldr	r3, [r4, #8]
   d6f22:	2100      	movs	r1, #0
   d6f24:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6f26:	4620      	mov	r0, r4
   d6f28:	bd70      	pop	{r4, r5, r6, pc}

000d6f2a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6f2a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f2c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6f2e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f30:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f32:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f34:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f36:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6f38:	460d      	mov	r5, r1
   d6f3a:	b139      	cbz	r1, d6f4c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6f3c:	4608      	mov	r0, r1
   d6f3e:	f000 fc2d 	bl	d779c <strlen>
   d6f42:	4629      	mov	r1, r5
   d6f44:	4602      	mov	r2, r0
   d6f46:	4620      	mov	r0, r4
   d6f48:	f7ff ffd7 	bl	d6efa <_ZN6String4copyEPKcj>
}
   d6f4c:	4620      	mov	r0, r4
   d6f4e:	bd38      	pop	{r3, r4, r5, pc}

000d6f50 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6f50:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6f52:	b510      	push	{r4, lr}
   d6f54:	460b      	mov	r3, r1
   d6f56:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6f58:	d007      	beq.n	d6f6a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6f5a:	6809      	ldr	r1, [r1, #0]
   d6f5c:	b119      	cbz	r1, d6f66 <_ZN6StringaSERKS_+0x16>
   d6f5e:	689a      	ldr	r2, [r3, #8]
   d6f60:	f7ff ffcb 	bl	d6efa <_ZN6String4copyEPKcj>
   d6f64:	e001      	b.n	d6f6a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6f66:	f7ff ffa0 	bl	d6eaa <_ZN6String10invalidateEv>

	return *this;
}
   d6f6a:	4620      	mov	r0, r4
   d6f6c:	bd10      	pop	{r4, pc}

000d6f6e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f6e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f70:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f72:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f74:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f76:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f78:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f7a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6f7c:	f7ff ffe8 	bl	d6f50 <_ZN6StringaSERKS_>
}
   d6f80:	4620      	mov	r0, r4
   d6f82:	bd10      	pop	{r4, pc}

000d6f84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6f84:	b510      	push	{r4, lr}
   d6f86:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6f88:	6800      	ldr	r0, [r0, #0]
   d6f8a:	b118      	cbz	r0, d6f94 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6f8c:	f7fd fd4c 	bl	d4a28 <free>
            wakeupSource_ = nullptr;
   d6f90:	2300      	movs	r3, #0
   d6f92:	6023      	str	r3, [r4, #0]
   d6f94:	bd10      	pop	{r4, pc}

000d6f96 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6f96:	b510      	push	{r4, lr}
   d6f98:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6f9a:	f7ff fff3 	bl	d6f84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6f9e:	4620      	mov	r0, r4
   d6fa0:	bd10      	pop	{r4, pc}
	...

000d6fa4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6fa4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6fa6:	4c09      	ldr	r4, [pc, #36]	; (d6fcc <_GLOBAL__sub_I_System+0x28>)
   d6fa8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6faa:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6fae:	6020      	str	r0, [r4, #0]
   d6fb0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6fb2:	71a0      	strb	r0, [r4, #6]
   d6fb4:	8120      	strh	r0, [r4, #8]
   d6fb6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6fb8:	f7fd fcba 	bl	d4930 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6fbc:	4620      	mov	r0, r4
   d6fbe:	4a04      	ldr	r2, [pc, #16]	; (d6fd0 <_GLOBAL__sub_I_System+0x2c>)
   d6fc0:	4904      	ldr	r1, [pc, #16]	; (d6fd4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6fc6:	f000 b9eb 	b.w	d73a0 <__aeabi_atexit>
   d6fca:	bf00      	nop
   d6fcc:	2003e5f0 	.word	0x2003e5f0
   d6fd0:	2003e2f4 	.word	0x2003e2f4
   d6fd4:	000d6f97 	.word	0x000d6f97

000d6fd8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6fd8:	4b02      	ldr	r3, [pc, #8]	; (d6fe4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6fda:	681a      	ldr	r2, [r3, #0]
   d6fdc:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6fde:	601a      	str	r2, [r3, #0]
   d6fe0:	4770      	bx	lr
   d6fe2:	bf00      	nop
   d6fe4:	2003e288 	.word	0x2003e288
   d6fe8:	2003e5fc 	.word	0x2003e5fc

000d6fec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6fec:	4770      	bx	lr

000d6fee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6fee:	7441      	strb	r1, [r0, #17]
   d6ff0:	4770      	bx	lr

000d6ff2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6ff2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6ff4:	7c00      	ldrb	r0, [r0, #16]
   d6ff6:	f7fd fc23 	bl	d4840 <HAL_USART_Available_Data_For_Write>
}
   d6ffa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ffe:	bd08      	pop	{r3, pc}

000d7000 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7000:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7002:	7c00      	ldrb	r0, [r0, #16]
   d7004:	f7fd fbfc 	bl	d4800 <HAL_USART_Available_Data>
}
   d7008:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d700c:	bd08      	pop	{r3, pc}

000d700e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d700e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7010:	7c00      	ldrb	r0, [r0, #16]
   d7012:	f7fd fc05 	bl	d4820 <HAL_USART_Peek_Data>
}
   d7016:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d701a:	bf28      	it	cs
   d701c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7020:	bd08      	pop	{r3, pc}

000d7022 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7022:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7024:	7c00      	ldrb	r0, [r0, #16]
   d7026:	f7fd fbf3 	bl	d4810 <HAL_USART_Read_Data>
}
   d702a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d702e:	bf28      	it	cs
   d7030:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7034:	bd08      	pop	{r3, pc}

000d7036 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7036:	7c00      	ldrb	r0, [r0, #16]
   d7038:	f7fd bbfa 	b.w	d4830 <HAL_USART_Flush_Data>

000d703c <_ZN11USARTSerialD0Ev>:
   d703c:	b510      	push	{r4, lr}
   d703e:	2114      	movs	r1, #20
   d7040:	4604      	mov	r4, r0
   d7042:	f000 f9b2 	bl	d73aa <_ZdlPvj>
   d7046:	4620      	mov	r0, r4
   d7048:	bd10      	pop	{r4, pc}

000d704a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d704a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d704c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d704e:	4604      	mov	r4, r0
   d7050:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7052:	b925      	cbnz	r5, d705e <_ZN11USARTSerial5writeEh+0x14>
   d7054:	7c00      	ldrb	r0, [r0, #16]
   d7056:	f7fd fbf3 	bl	d4840 <HAL_USART_Available_Data_For_Write>
   d705a:	2800      	cmp	r0, #0
   d705c:	dd05      	ble.n	d706a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d705e:	4631      	mov	r1, r6
   d7060:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7066:	f7fd bbc3 	b.w	d47f0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d706a:	4628      	mov	r0, r5
   d706c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7070 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7070:	b510      	push	{r4, lr}
   d7072:	4604      	mov	r4, r0
   d7074:	4608      	mov	r0, r1
   d7076:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7078:	2200      	movs	r2, #0
   d707a:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d707c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7080:	60a2      	str	r2, [r4, #8]
   d7082:	4a05      	ldr	r2, [pc, #20]	; (d7098 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7084:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7086:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7088:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d708a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d708c:	461a      	mov	r2, r3
   d708e:	f7fd fb9f 	bl	d47d0 <HAL_USART_Init>
}
   d7092:	4620      	mov	r0, r4
   d7094:	bd10      	pop	{r4, pc}
   d7096:	bf00      	nop
   d7098:	000d7de4 	.word	0x000d7de4

000d709c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d709c:	2300      	movs	r3, #0
   d709e:	7c00      	ldrb	r0, [r0, #16]
   d70a0:	f7fd bbd6 	b.w	d4850 <HAL_USART_BeginConfig>

000d70a4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d70a4:	2200      	movs	r2, #0
   d70a6:	f7ff bff9 	b.w	d709c <_ZN11USARTSerial5beginEmm>

000d70aa <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d70aa:	7c00      	ldrb	r0, [r0, #16]
   d70ac:	f7fd bb98 	b.w	d47e0 <HAL_USART_End>

000d70b0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d70b0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d70b2:	4d0c      	ldr	r5, [pc, #48]	; (d70e4 <_Z22__fetch_global_Serial1v+0x34>)
   d70b4:	6829      	ldr	r1, [r5, #0]
   d70b6:	f011 0401 	ands.w	r4, r1, #1
   d70ba:	d111      	bne.n	d70e0 <_Z22__fetch_global_Serial1v+0x30>
   d70bc:	4628      	mov	r0, r5
   d70be:	f7fc fffb 	bl	d40b8 <__cxa_guard_acquire>
   d70c2:	b168      	cbz	r0, d70e0 <_Z22__fetch_global_Serial1v+0x30>
   d70c4:	4a08      	ldr	r2, [pc, #32]	; (d70e8 <_Z22__fetch_global_Serial1v+0x38>)
   d70c6:	4b09      	ldr	r3, [pc, #36]	; (d70ec <_Z22__fetch_global_Serial1v+0x3c>)
   d70c8:	4809      	ldr	r0, [pc, #36]	; (d70f0 <_Z22__fetch_global_Serial1v+0x40>)
   d70ca:	4621      	mov	r1, r4
   d70cc:	f7ff ffd0 	bl	d7070 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d70d0:	4628      	mov	r0, r5
   d70d2:	f7fc fff6 	bl	d40c2 <__cxa_guard_release>
   d70d6:	4a07      	ldr	r2, [pc, #28]	; (d70f4 <_Z22__fetch_global_Serial1v+0x44>)
   d70d8:	4907      	ldr	r1, [pc, #28]	; (d70f8 <_Z22__fetch_global_Serial1v+0x48>)
   d70da:	4805      	ldr	r0, [pc, #20]	; (d70f0 <_Z22__fetch_global_Serial1v+0x40>)
   d70dc:	f000 f960 	bl	d73a0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d70e0:	4803      	ldr	r0, [pc, #12]	; (d70f0 <_Z22__fetch_global_Serial1v+0x40>)
   d70e2:	bd38      	pop	{r3, r4, r5, pc}
   d70e4:	2003e698 	.word	0x2003e698
   d70e8:	2003e69c 	.word	0x2003e69c
   d70ec:	2003e614 	.word	0x2003e614
   d70f0:	2003e600 	.word	0x2003e600
   d70f4:	2003e2f4 	.word	0x2003e2f4
   d70f8:	000d6fed 	.word	0x000d6fed

000d70fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d70fc:	7441      	strb	r1, [r0, #17]
   d70fe:	4770      	bx	lr

000d7100 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7100:	4770      	bx	lr

000d7102 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7102:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7104:	2100      	movs	r1, #0
   d7106:	7c00      	ldrb	r0, [r0, #16]
   d7108:	f7fd fbd2 	bl	d48b0 <HAL_USB_USART_Receive_Data>
}
   d710c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7110:	bf28      	it	cs
   d7112:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7116:	bd08      	pop	{r3, pc}

000d7118 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7118:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d711a:	2101      	movs	r1, #1
   d711c:	7c00      	ldrb	r0, [r0, #16]
   d711e:	f7fd fbc7 	bl	d48b0 <HAL_USB_USART_Receive_Data>
}
   d7122:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7126:	bf28      	it	cs
   d7128:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d712c:	bd08      	pop	{r3, pc}

000d712e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d712e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7130:	7c00      	ldrb	r0, [r0, #16]
   d7132:	f7fd fbb5 	bl	d48a0 <HAL_USB_USART_Available_Data_For_Write>
}
   d7136:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d713a:	bd08      	pop	{r3, pc}

000d713c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d713c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d713e:	7c00      	ldrb	r0, [r0, #16]
   d7140:	f7fd fba6 	bl	d4890 <HAL_USB_USART_Available_Data>
}
   d7144:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7148:	bd08      	pop	{r3, pc}

000d714a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d714a:	7c00      	ldrb	r0, [r0, #16]
   d714c:	f7fd bbc0 	b.w	d48d0 <HAL_USB_USART_Flush_Data>

000d7150 <_ZN9USBSerialD0Ev>:
   d7150:	b510      	push	{r4, lr}
   d7152:	2114      	movs	r1, #20
   d7154:	4604      	mov	r4, r0
   d7156:	f000 f928 	bl	d73aa <_ZdlPvj>
   d715a:	4620      	mov	r0, r4
   d715c:	bd10      	pop	{r4, pc}

000d715e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d715e:	b538      	push	{r3, r4, r5, lr}
   d7160:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7162:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7164:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7166:	f7fd fb9b 	bl	d48a0 <HAL_USB_USART_Available_Data_For_Write>
   d716a:	2800      	cmp	r0, #0
   d716c:	dc01      	bgt.n	d7172 <_ZN9USBSerial5writeEh+0x14>
   d716e:	7c60      	ldrb	r0, [r4, #17]
   d7170:	b128      	cbz	r0, d717e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7172:	4629      	mov	r1, r5
   d7174:	7c20      	ldrb	r0, [r4, #16]
   d7176:	f7fd fba3 	bl	d48c0 <HAL_USB_USART_Send_Data>
   d717a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d717e:	bd38      	pop	{r3, r4, r5, pc}

000d7180 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7180:	b510      	push	{r4, lr}
   d7182:	4604      	mov	r4, r0
   d7184:	2300      	movs	r3, #0
   d7186:	6063      	str	r3, [r4, #4]
   d7188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d718c:	60a3      	str	r3, [r4, #8]
   d718e:	4b05      	ldr	r3, [pc, #20]	; (d71a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7190:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7192:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7194:	4608      	mov	r0, r1
{
  _serial = serial;
   d7196:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7198:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d719a:	4611      	mov	r1, r2
   d719c:	f7fd fb60 	bl	d4860 <HAL_USB_USART_Init>
}
   d71a0:	4620      	mov	r0, r4
   d71a2:	bd10      	pop	{r4, pc}
   d71a4:	000d7e14 	.word	0x000d7e14

000d71a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d71a8:	2200      	movs	r2, #0
   d71aa:	7c00      	ldrb	r0, [r0, #16]
   d71ac:	f7fd bb60 	b.w	d4870 <HAL_USB_USART_Begin>

000d71b0 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d71b0:	7c00      	ldrb	r0, [r0, #16]
   d71b2:	f7fd bb65 	b.w	d4880 <HAL_USB_USART_End>

000d71b6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d71b6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d71b8:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d71ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d71bc:	2100      	movs	r1, #0
   d71be:	f000 fa9a 	bl	d76f6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d71c2:	4620      	mov	r0, r4
   d71c4:	bd10      	pop	{r4, pc}
	...

000d71c8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d71c8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d71ca:	4d0e      	ldr	r5, [pc, #56]	; (d7204 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d71cc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d71ce:	a801      	add	r0, sp, #4
   d71d0:	f7ff fff1 	bl	d71b6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d71d4:	6829      	ldr	r1, [r5, #0]
   d71d6:	f011 0401 	ands.w	r4, r1, #1
   d71da:	d110      	bne.n	d71fe <_Z16_fetch_usbserialv+0x36>
   d71dc:	4628      	mov	r0, r5
   d71de:	f7fc ff6b 	bl	d40b8 <__cxa_guard_acquire>
   d71e2:	b160      	cbz	r0, d71fe <_Z16_fetch_usbserialv+0x36>
   d71e4:	aa01      	add	r2, sp, #4
   d71e6:	4621      	mov	r1, r4
   d71e8:	4807      	ldr	r0, [pc, #28]	; (d7208 <_Z16_fetch_usbserialv+0x40>)
   d71ea:	f7ff ffc9 	bl	d7180 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d71ee:	4628      	mov	r0, r5
   d71f0:	f7fc ff67 	bl	d40c2 <__cxa_guard_release>
   d71f4:	4a05      	ldr	r2, [pc, #20]	; (d720c <_Z16_fetch_usbserialv+0x44>)
   d71f6:	4906      	ldr	r1, [pc, #24]	; (d7210 <_Z16_fetch_usbserialv+0x48>)
   d71f8:	4803      	ldr	r0, [pc, #12]	; (d7208 <_Z16_fetch_usbserialv+0x40>)
   d71fa:	f000 f8d1 	bl	d73a0 <__aeabi_atexit>
	return _usbserial;
}
   d71fe:	4802      	ldr	r0, [pc, #8]	; (d7208 <_Z16_fetch_usbserialv+0x40>)
   d7200:	b007      	add	sp, #28
   d7202:	bd30      	pop	{r4, r5, pc}
   d7204:	2003e720 	.word	0x2003e720
   d7208:	2003e724 	.word	0x2003e724
   d720c:	2003e2f4 	.word	0x2003e2f4
   d7210:	000d7101 	.word	0x000d7101

000d7214 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7214:	2200      	movs	r2, #0
   d7216:	4611      	mov	r1, r2
   d7218:	6840      	ldr	r0, [r0, #4]
   d721a:	f7fd bbc5 	b.w	d49a8 <network_ready>

000d721e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d721e:	2200      	movs	r2, #0
   d7220:	4611      	mov	r1, r2
   d7222:	6840      	ldr	r0, [r0, #4]
   d7224:	f7fd bbe0 	b.w	d49e8 <network_listening>

000d7228 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7228:	2200      	movs	r2, #0
   d722a:	4611      	mov	r1, r2
   d722c:	6840      	ldr	r0, [r0, #4]
   d722e:	f7fd bbeb 	b.w	d4a08 <network_get_listen_timeout>

000d7232 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7232:	2200      	movs	r2, #0
   d7234:	6840      	ldr	r0, [r0, #4]
   d7236:	f7fd bbdf 	b.w	d49f8 <network_set_listen_timeout>

000d723a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d723a:	2200      	movs	r2, #0
   d723c:	f081 0101 	eor.w	r1, r1, #1
   d7240:	6840      	ldr	r0, [r0, #4]
   d7242:	f7fd bbc9 	b.w	d49d8 <network_listen>

000d7246 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7246:	2300      	movs	r3, #0
   d7248:	461a      	mov	r2, r3
   d724a:	4619      	mov	r1, r3
   d724c:	6840      	ldr	r0, [r0, #4]
   d724e:	f7fd bbbb 	b.w	d49c8 <network_off>

000d7252 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7252:	2300      	movs	r3, #0
   d7254:	461a      	mov	r2, r3
   d7256:	4619      	mov	r1, r3
   d7258:	6840      	ldr	r0, [r0, #4]
   d725a:	f7fd bbad 	b.w	d49b8 <network_on>

000d725e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d725e:	2200      	movs	r2, #0
   d7260:	4611      	mov	r1, r2
   d7262:	6840      	ldr	r0, [r0, #4]
   d7264:	f7fd bb90 	b.w	d4988 <network_connecting>

000d7268 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7268:	2200      	movs	r2, #0
   d726a:	2102      	movs	r1, #2
   d726c:	6840      	ldr	r0, [r0, #4]
   d726e:	f7fd bb93 	b.w	d4998 <network_disconnect>

000d7272 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7272:	2300      	movs	r3, #0
   d7274:	461a      	mov	r2, r3
   d7276:	6840      	ldr	r0, [r0, #4]
   d7278:	f7fd bb7e 	b.w	d4978 <network_connect>

000d727c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d727c:	4b02      	ldr	r3, [pc, #8]	; (d7288 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d727e:	2204      	movs	r2, #4
   d7280:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7282:	4a02      	ldr	r2, [pc, #8]	; (d728c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7284:	601a      	str	r2, [r3, #0]
   d7286:	4770      	bx	lr
   d7288:	2003e738 	.word	0x2003e738
   d728c:	000d7e44 	.word	0x000d7e44

000d7290 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7290:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7292:	4b0c      	ldr	r3, [pc, #48]	; (d72c4 <serialEventRun+0x34>)
   d7294:	b133      	cbz	r3, d72a4 <serialEventRun+0x14>
   d7296:	f7ff ff97 	bl	d71c8 <_Z16_fetch_usbserialv>
   d729a:	6803      	ldr	r3, [r0, #0]
   d729c:	691b      	ldr	r3, [r3, #16]
   d729e:	4798      	blx	r3
   d72a0:	2800      	cmp	r0, #0
   d72a2:	dc09      	bgt.n	d72b8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d72a4:	4b08      	ldr	r3, [pc, #32]	; (d72c8 <serialEventRun+0x38>)
   d72a6:	b163      	cbz	r3, d72c2 <serialEventRun+0x32>
   d72a8:	f7ff ff02 	bl	d70b0 <_Z22__fetch_global_Serial1v>
   d72ac:	6803      	ldr	r3, [r0, #0]
   d72ae:	691b      	ldr	r3, [r3, #16]
   d72b0:	4798      	blx	r3
   d72b2:	2800      	cmp	r0, #0
   d72b4:	dc03      	bgt.n	d72be <serialEventRun+0x2e>
   d72b6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d72b8:	f3af 8000 	nop.w
   d72bc:	e7f2      	b.n	d72a4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d72be:	f3af 8000 	nop.w
   d72c2:	bd08      	pop	{r3, pc}
	...

000d72cc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d72cc:	b508      	push	{r3, lr}
	serialEventRun();
   d72ce:	f7ff ffdf 	bl	d7290 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d72d2:	f7fd fa55 	bl	d4780 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d72d6:	4b01      	ldr	r3, [pc, #4]	; (d72dc <_post_loop+0x10>)
   d72d8:	6018      	str	r0, [r3, #0]
   d72da:	bd08      	pop	{r3, pc}
   d72dc:	2003e748 	.word	0x2003e748

000d72e0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d72e0:	4802      	ldr	r0, [pc, #8]	; (d72ec <_Z33system_initialize_user_backup_ramv+0xc>)
   d72e2:	4a03      	ldr	r2, [pc, #12]	; (d72f0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d72e4:	4903      	ldr	r1, [pc, #12]	; (d72f4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d72e6:	1a12      	subs	r2, r2, r0
   d72e8:	f000 b9df 	b.w	d76aa <memcpy>
   d72ec:	2003f400 	.word	0x2003f400
   d72f0:	2003f404 	.word	0x2003f404
   d72f4:	000d8010 	.word	0x000d8010

000d72f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d72f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d72fa:	2300      	movs	r3, #0
   d72fc:	9300      	str	r3, [sp, #0]
   d72fe:	461a      	mov	r2, r3
   d7300:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7304:	f7fd fb26 	bl	d4954 <system_ctrl_set_result>
}
   d7308:	b003      	add	sp, #12
   d730a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7310 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7310:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7312:	8843      	ldrh	r3, [r0, #2]
   d7314:	2b0a      	cmp	r3, #10
   d7316:	d008      	beq.n	d732a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7318:	2b50      	cmp	r3, #80	; 0x50
   d731a:	d109      	bne.n	d7330 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d731c:	4b09      	ldr	r3, [pc, #36]	; (d7344 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d731e:	681b      	ldr	r3, [r3, #0]
   d7320:	b13b      	cbz	r3, d7332 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7322:	b003      	add	sp, #12
   d7324:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7328:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d732a:	f7ff ffe5 	bl	d72f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d732e:	e006      	b.n	d733e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7330:	2300      	movs	r3, #0
   d7332:	9300      	str	r3, [sp, #0]
   d7334:	461a      	mov	r2, r3
   d7336:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d733a:	f7fd fb0b 	bl	d4954 <system_ctrl_set_result>
        break;
    }
}
   d733e:	b003      	add	sp, #12
   d7340:	f85d fb04 	ldr.w	pc, [sp], #4
   d7344:	2003e740 	.word	0x2003e740

000d7348 <module_user_init_hook>:

void module_user_init_hook()
{
   d7348:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d734a:	4c10      	ldr	r4, [pc, #64]	; (d738c <module_user_init_hook+0x44>)
   d734c:	4d10      	ldr	r5, [pc, #64]	; (d7390 <module_user_init_hook+0x48>)
   d734e:	6823      	ldr	r3, [r4, #0]
   d7350:	42ab      	cmp	r3, r5
   d7352:	4b10      	ldr	r3, [pc, #64]	; (d7394 <module_user_init_hook+0x4c>)
   d7354:	bf0c      	ite	eq
   d7356:	2201      	moveq	r2, #1
   d7358:	2200      	movne	r2, #0
   d735a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d735c:	d002      	beq.n	d7364 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d735e:	f7ff ffbf 	bl	d72e0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7362:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7364:	f7fd f9fc 	bl	d4760 <HAL_RNG_GetRandomNumber>
   d7368:	4604      	mov	r4, r0
    srand(seed);
   d736a:	f000 f9cd 	bl	d7708 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d736e:	4b0a      	ldr	r3, [pc, #40]	; (d7398 <module_user_init_hook+0x50>)
   d7370:	b113      	cbz	r3, d7378 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7372:	4620      	mov	r0, r4
   d7374:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7378:	2100      	movs	r1, #0
   d737a:	4807      	ldr	r0, [pc, #28]	; (d7398 <module_user_init_hook+0x50>)
   d737c:	f7fd faf4 	bl	d4968 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7380:	2100      	movs	r1, #0
   d7382:	4806      	ldr	r0, [pc, #24]	; (d739c <module_user_init_hook+0x54>)
}
   d7384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7388:	f7fd bada 	b.w	d4940 <system_ctrl_set_app_request_handler>
   d738c:	2003f400 	.word	0x2003f400
   d7390:	9a271c1e 	.word	0x9a271c1e
   d7394:	2003e744 	.word	0x2003e744
   d7398:	00000000 	.word	0x00000000
   d739c:	000d7311 	.word	0x000d7311

000d73a0 <__aeabi_atexit>:
   d73a0:	460b      	mov	r3, r1
   d73a2:	4601      	mov	r1, r0
   d73a4:	4618      	mov	r0, r3
   d73a6:	f000 b963 	b.w	d7670 <__cxa_atexit>

000d73aa <_ZdlPvj>:
   d73aa:	f7fc be76 	b.w	d409a <_ZdlPv>
	...

000d73b0 <_ZSt15get_new_handlerv>:
   d73b0:	4b02      	ldr	r3, [pc, #8]	; (d73bc <_ZSt15get_new_handlerv+0xc>)
   d73b2:	6818      	ldr	r0, [r3, #0]
   d73b4:	f3bf 8f5f 	dmb	sy
   d73b8:	4770      	bx	lr
   d73ba:	bf00      	nop
   d73bc:	2003e74c 	.word	0x2003e74c

000d73c0 <_ZnwjRKSt9nothrow_t>:
   d73c0:	b510      	push	{r4, lr}
   d73c2:	2800      	cmp	r0, #0
   d73c4:	bf14      	ite	ne
   d73c6:	4604      	movne	r4, r0
   d73c8:	2401      	moveq	r4, #1
   d73ca:	4620      	mov	r0, r4
   d73cc:	f7fd fb24 	bl	d4a18 <malloc>
   d73d0:	b920      	cbnz	r0, d73dc <_ZnwjRKSt9nothrow_t+0x1c>
   d73d2:	f7ff ffed 	bl	d73b0 <_ZSt15get_new_handlerv>
   d73d6:	b108      	cbz	r0, d73dc <_ZnwjRKSt9nothrow_t+0x1c>
   d73d8:	4780      	blx	r0
   d73da:	e7f6      	b.n	d73ca <_ZnwjRKSt9nothrow_t+0xa>
   d73dc:	bd10      	pop	{r4, pc}
	...

000d73e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d73e0:	4b24      	ldr	r3, [pc, #144]	; (d7474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d73e2:	681a      	ldr	r2, [r3, #0]
   d73e4:	07d0      	lsls	r0, r2, #31
   d73e6:	bf5c      	itt	pl
   d73e8:	2201      	movpl	r2, #1
   d73ea:	601a      	strpl	r2, [r3, #0]
   d73ec:	4b22      	ldr	r3, [pc, #136]	; (d7478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d73ee:	681a      	ldr	r2, [r3, #0]
   d73f0:	07d1      	lsls	r1, r2, #31
   d73f2:	bf5c      	itt	pl
   d73f4:	2201      	movpl	r2, #1
   d73f6:	601a      	strpl	r2, [r3, #0]
   d73f8:	4b20      	ldr	r3, [pc, #128]	; (d747c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d73fa:	681a      	ldr	r2, [r3, #0]
   d73fc:	07d2      	lsls	r2, r2, #31
   d73fe:	bf5c      	itt	pl
   d7400:	2201      	movpl	r2, #1
   d7402:	601a      	strpl	r2, [r3, #0]
   d7404:	4b1e      	ldr	r3, [pc, #120]	; (d7480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7406:	681a      	ldr	r2, [r3, #0]
   d7408:	07d0      	lsls	r0, r2, #31
   d740a:	bf5c      	itt	pl
   d740c:	2201      	movpl	r2, #1
   d740e:	601a      	strpl	r2, [r3, #0]
   d7410:	4b1c      	ldr	r3, [pc, #112]	; (d7484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7412:	681a      	ldr	r2, [r3, #0]
   d7414:	07d1      	lsls	r1, r2, #31
   d7416:	bf5c      	itt	pl
   d7418:	2201      	movpl	r2, #1
   d741a:	601a      	strpl	r2, [r3, #0]
   d741c:	4b1a      	ldr	r3, [pc, #104]	; (d7488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d741e:	681a      	ldr	r2, [r3, #0]
   d7420:	07d2      	lsls	r2, r2, #31
   d7422:	bf5c      	itt	pl
   d7424:	2201      	movpl	r2, #1
   d7426:	601a      	strpl	r2, [r3, #0]
   d7428:	4b18      	ldr	r3, [pc, #96]	; (d748c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d742a:	681a      	ldr	r2, [r3, #0]
   d742c:	07d0      	lsls	r0, r2, #31
   d742e:	bf5c      	itt	pl
   d7430:	2201      	movpl	r2, #1
   d7432:	601a      	strpl	r2, [r3, #0]
   d7434:	4b16      	ldr	r3, [pc, #88]	; (d7490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7436:	681a      	ldr	r2, [r3, #0]
   d7438:	07d1      	lsls	r1, r2, #31
   d743a:	bf5c      	itt	pl
   d743c:	2201      	movpl	r2, #1
   d743e:	601a      	strpl	r2, [r3, #0]
   d7440:	4b14      	ldr	r3, [pc, #80]	; (d7494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7442:	681a      	ldr	r2, [r3, #0]
   d7444:	07d2      	lsls	r2, r2, #31
   d7446:	bf5c      	itt	pl
   d7448:	2201      	movpl	r2, #1
   d744a:	601a      	strpl	r2, [r3, #0]
   d744c:	4b12      	ldr	r3, [pc, #72]	; (d7498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d744e:	681a      	ldr	r2, [r3, #0]
   d7450:	07d0      	lsls	r0, r2, #31
   d7452:	bf5c      	itt	pl
   d7454:	2201      	movpl	r2, #1
   d7456:	601a      	strpl	r2, [r3, #0]
   d7458:	4b10      	ldr	r3, [pc, #64]	; (d749c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d745a:	681a      	ldr	r2, [r3, #0]
   d745c:	07d1      	lsls	r1, r2, #31
   d745e:	bf5c      	itt	pl
   d7460:	2201      	movpl	r2, #1
   d7462:	601a      	strpl	r2, [r3, #0]
   d7464:	4b0e      	ldr	r3, [pc, #56]	; (d74a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7466:	681a      	ldr	r2, [r3, #0]
   d7468:	07d2      	lsls	r2, r2, #31
   d746a:	bf5c      	itt	pl
   d746c:	2201      	movpl	r2, #1
   d746e:	601a      	strpl	r2, [r3, #0]
   d7470:	4770      	bx	lr
   d7472:	bf00      	nop
   d7474:	2003e77c 	.word	0x2003e77c
   d7478:	2003e778 	.word	0x2003e778
   d747c:	2003e774 	.word	0x2003e774
   d7480:	2003e770 	.word	0x2003e770
   d7484:	2003e76c 	.word	0x2003e76c
   d7488:	2003e768 	.word	0x2003e768
   d748c:	2003e764 	.word	0x2003e764
   d7490:	2003e760 	.word	0x2003e760
   d7494:	2003e75c 	.word	0x2003e75c
   d7498:	2003e758 	.word	0x2003e758
   d749c:	2003e754 	.word	0x2003e754
   d74a0:	2003e750 	.word	0x2003e750

000d74a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d74a4:	4b18      	ldr	r3, [pc, #96]	; (d7508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d74a6:	681a      	ldr	r2, [r3, #0]
   d74a8:	07d1      	lsls	r1, r2, #31
   d74aa:	bf5c      	itt	pl
   d74ac:	2201      	movpl	r2, #1
   d74ae:	601a      	strpl	r2, [r3, #0]
   d74b0:	4b16      	ldr	r3, [pc, #88]	; (d750c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d74b2:	681a      	ldr	r2, [r3, #0]
   d74b4:	07d2      	lsls	r2, r2, #31
   d74b6:	bf5c      	itt	pl
   d74b8:	2201      	movpl	r2, #1
   d74ba:	601a      	strpl	r2, [r3, #0]
   d74bc:	4b14      	ldr	r3, [pc, #80]	; (d7510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d74be:	681a      	ldr	r2, [r3, #0]
   d74c0:	07d0      	lsls	r0, r2, #31
   d74c2:	bf5c      	itt	pl
   d74c4:	2201      	movpl	r2, #1
   d74c6:	601a      	strpl	r2, [r3, #0]
   d74c8:	4b12      	ldr	r3, [pc, #72]	; (d7514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d74ca:	681a      	ldr	r2, [r3, #0]
   d74cc:	07d1      	lsls	r1, r2, #31
   d74ce:	bf5c      	itt	pl
   d74d0:	2201      	movpl	r2, #1
   d74d2:	601a      	strpl	r2, [r3, #0]
   d74d4:	4b10      	ldr	r3, [pc, #64]	; (d7518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d74d6:	681a      	ldr	r2, [r3, #0]
   d74d8:	07d2      	lsls	r2, r2, #31
   d74da:	bf5c      	itt	pl
   d74dc:	2201      	movpl	r2, #1
   d74de:	601a      	strpl	r2, [r3, #0]
   d74e0:	4b0e      	ldr	r3, [pc, #56]	; (d751c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d74e2:	681a      	ldr	r2, [r3, #0]
   d74e4:	07d0      	lsls	r0, r2, #31
   d74e6:	bf5c      	itt	pl
   d74e8:	2201      	movpl	r2, #1
   d74ea:	601a      	strpl	r2, [r3, #0]
   d74ec:	4b0c      	ldr	r3, [pc, #48]	; (d7520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d74ee:	681a      	ldr	r2, [r3, #0]
   d74f0:	07d1      	lsls	r1, r2, #31
   d74f2:	bf5c      	itt	pl
   d74f4:	2201      	movpl	r2, #1
   d74f6:	601a      	strpl	r2, [r3, #0]
   d74f8:	4b0a      	ldr	r3, [pc, #40]	; (d7524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d74fa:	681a      	ldr	r2, [r3, #0]
   d74fc:	07d2      	lsls	r2, r2, #31
   d74fe:	bf5c      	itt	pl
   d7500:	2201      	movpl	r2, #1
   d7502:	601a      	strpl	r2, [r3, #0]
   d7504:	4770      	bx	lr
   d7506:	bf00      	nop
   d7508:	2003e79c 	.word	0x2003e79c
   d750c:	2003e798 	.word	0x2003e798
   d7510:	2003e794 	.word	0x2003e794
   d7514:	2003e790 	.word	0x2003e790
   d7518:	2003e78c 	.word	0x2003e78c
   d751c:	2003e788 	.word	0x2003e788
   d7520:	2003e784 	.word	0x2003e784
   d7524:	2003e780 	.word	0x2003e780

000d7528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7528:	4b18      	ldr	r3, [pc, #96]	; (d758c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d752a:	681a      	ldr	r2, [r3, #0]
   d752c:	07d1      	lsls	r1, r2, #31
   d752e:	bf5c      	itt	pl
   d7530:	2201      	movpl	r2, #1
   d7532:	601a      	strpl	r2, [r3, #0]
   d7534:	4b16      	ldr	r3, [pc, #88]	; (d7590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7536:	681a      	ldr	r2, [r3, #0]
   d7538:	07d2      	lsls	r2, r2, #31
   d753a:	bf5c      	itt	pl
   d753c:	2201      	movpl	r2, #1
   d753e:	601a      	strpl	r2, [r3, #0]
   d7540:	4b14      	ldr	r3, [pc, #80]	; (d7594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7542:	681a      	ldr	r2, [r3, #0]
   d7544:	07d0      	lsls	r0, r2, #31
   d7546:	bf5c      	itt	pl
   d7548:	2201      	movpl	r2, #1
   d754a:	601a      	strpl	r2, [r3, #0]
   d754c:	4b12      	ldr	r3, [pc, #72]	; (d7598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d754e:	681a      	ldr	r2, [r3, #0]
   d7550:	07d1      	lsls	r1, r2, #31
   d7552:	bf5c      	itt	pl
   d7554:	2201      	movpl	r2, #1
   d7556:	601a      	strpl	r2, [r3, #0]
   d7558:	4b10      	ldr	r3, [pc, #64]	; (d759c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d755a:	681a      	ldr	r2, [r3, #0]
   d755c:	07d2      	lsls	r2, r2, #31
   d755e:	bf5c      	itt	pl
   d7560:	2201      	movpl	r2, #1
   d7562:	601a      	strpl	r2, [r3, #0]
   d7564:	4b0e      	ldr	r3, [pc, #56]	; (d75a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7566:	681a      	ldr	r2, [r3, #0]
   d7568:	07d0      	lsls	r0, r2, #31
   d756a:	bf5c      	itt	pl
   d756c:	2201      	movpl	r2, #1
   d756e:	601a      	strpl	r2, [r3, #0]
   d7570:	4b0c      	ldr	r3, [pc, #48]	; (d75a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7572:	681a      	ldr	r2, [r3, #0]
   d7574:	07d1      	lsls	r1, r2, #31
   d7576:	bf5c      	itt	pl
   d7578:	2201      	movpl	r2, #1
   d757a:	601a      	strpl	r2, [r3, #0]
   d757c:	4b0a      	ldr	r3, [pc, #40]	; (d75a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d757e:	681a      	ldr	r2, [r3, #0]
   d7580:	07d2      	lsls	r2, r2, #31
   d7582:	bf5c      	itt	pl
   d7584:	2201      	movpl	r2, #1
   d7586:	601a      	strpl	r2, [r3, #0]
   d7588:	4770      	bx	lr
   d758a:	bf00      	nop
   d758c:	2003e7bc 	.word	0x2003e7bc
   d7590:	2003e7b8 	.word	0x2003e7b8
   d7594:	2003e7b4 	.word	0x2003e7b4
   d7598:	2003e7b0 	.word	0x2003e7b0
   d759c:	2003e7ac 	.word	0x2003e7ac
   d75a0:	2003e7a8 	.word	0x2003e7a8
   d75a4:	2003e7a4 	.word	0x2003e7a4
   d75a8:	2003e7a0 	.word	0x2003e7a0

000d75ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d75ac:	4b24      	ldr	r3, [pc, #144]	; (d7640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d75ae:	681a      	ldr	r2, [r3, #0]
   d75b0:	07d0      	lsls	r0, r2, #31
   d75b2:	bf5c      	itt	pl
   d75b4:	2201      	movpl	r2, #1
   d75b6:	601a      	strpl	r2, [r3, #0]
   d75b8:	4b22      	ldr	r3, [pc, #136]	; (d7644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d75ba:	681a      	ldr	r2, [r3, #0]
   d75bc:	07d1      	lsls	r1, r2, #31
   d75be:	bf5c      	itt	pl
   d75c0:	2201      	movpl	r2, #1
   d75c2:	601a      	strpl	r2, [r3, #0]
   d75c4:	4b20      	ldr	r3, [pc, #128]	; (d7648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d75c6:	681a      	ldr	r2, [r3, #0]
   d75c8:	07d2      	lsls	r2, r2, #31
   d75ca:	bf5c      	itt	pl
   d75cc:	2201      	movpl	r2, #1
   d75ce:	601a      	strpl	r2, [r3, #0]
   d75d0:	4b1e      	ldr	r3, [pc, #120]	; (d764c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d75d2:	681a      	ldr	r2, [r3, #0]
   d75d4:	07d0      	lsls	r0, r2, #31
   d75d6:	bf5c      	itt	pl
   d75d8:	2201      	movpl	r2, #1
   d75da:	601a      	strpl	r2, [r3, #0]
   d75dc:	4b1c      	ldr	r3, [pc, #112]	; (d7650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d75de:	681a      	ldr	r2, [r3, #0]
   d75e0:	07d1      	lsls	r1, r2, #31
   d75e2:	bf5c      	itt	pl
   d75e4:	2201      	movpl	r2, #1
   d75e6:	601a      	strpl	r2, [r3, #0]
   d75e8:	4b1a      	ldr	r3, [pc, #104]	; (d7654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d75ea:	681a      	ldr	r2, [r3, #0]
   d75ec:	07d2      	lsls	r2, r2, #31
   d75ee:	bf5c      	itt	pl
   d75f0:	2201      	movpl	r2, #1
   d75f2:	601a      	strpl	r2, [r3, #0]
   d75f4:	4b18      	ldr	r3, [pc, #96]	; (d7658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d75f6:	681a      	ldr	r2, [r3, #0]
   d75f8:	07d0      	lsls	r0, r2, #31
   d75fa:	bf5c      	itt	pl
   d75fc:	2201      	movpl	r2, #1
   d75fe:	601a      	strpl	r2, [r3, #0]
   d7600:	4b16      	ldr	r3, [pc, #88]	; (d765c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7602:	681a      	ldr	r2, [r3, #0]
   d7604:	07d1      	lsls	r1, r2, #31
   d7606:	bf5c      	itt	pl
   d7608:	2201      	movpl	r2, #1
   d760a:	601a      	strpl	r2, [r3, #0]
   d760c:	4b14      	ldr	r3, [pc, #80]	; (d7660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d760e:	681a      	ldr	r2, [r3, #0]
   d7610:	07d2      	lsls	r2, r2, #31
   d7612:	bf5c      	itt	pl
   d7614:	2201      	movpl	r2, #1
   d7616:	601a      	strpl	r2, [r3, #0]
   d7618:	4b12      	ldr	r3, [pc, #72]	; (d7664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d761a:	681a      	ldr	r2, [r3, #0]
   d761c:	07d0      	lsls	r0, r2, #31
   d761e:	bf5c      	itt	pl
   d7620:	2201      	movpl	r2, #1
   d7622:	601a      	strpl	r2, [r3, #0]
   d7624:	4b10      	ldr	r3, [pc, #64]	; (d7668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7626:	681a      	ldr	r2, [r3, #0]
   d7628:	07d1      	lsls	r1, r2, #31
   d762a:	bf5c      	itt	pl
   d762c:	2201      	movpl	r2, #1
   d762e:	601a      	strpl	r2, [r3, #0]
   d7630:	4b0e      	ldr	r3, [pc, #56]	; (d766c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7632:	681a      	ldr	r2, [r3, #0]
   d7634:	07d2      	lsls	r2, r2, #31
   d7636:	bf5c      	itt	pl
   d7638:	2201      	movpl	r2, #1
   d763a:	601a      	strpl	r2, [r3, #0]
   d763c:	4770      	bx	lr
   d763e:	bf00      	nop
   d7640:	2003e7ec 	.word	0x2003e7ec
   d7644:	2003e7e8 	.word	0x2003e7e8
   d7648:	2003e7e4 	.word	0x2003e7e4
   d764c:	2003e7e0 	.word	0x2003e7e0
   d7650:	2003e7dc 	.word	0x2003e7dc
   d7654:	2003e7d8 	.word	0x2003e7d8
   d7658:	2003e7d4 	.word	0x2003e7d4
   d765c:	2003e7d0 	.word	0x2003e7d0
   d7660:	2003e7cc 	.word	0x2003e7cc
   d7664:	2003e7c8 	.word	0x2003e7c8
   d7668:	2003e7c4 	.word	0x2003e7c4
   d766c:	2003e7c0 	.word	0x2003e7c0

000d7670 <__cxa_atexit>:
   d7670:	b510      	push	{r4, lr}
   d7672:	4c05      	ldr	r4, [pc, #20]	; (d7688 <__cxa_atexit+0x18>)
   d7674:	4613      	mov	r3, r2
   d7676:	b12c      	cbz	r4, d7684 <__cxa_atexit+0x14>
   d7678:	460a      	mov	r2, r1
   d767a:	4601      	mov	r1, r0
   d767c:	2002      	movs	r0, #2
   d767e:	f3af 8000 	nop.w
   d7682:	bd10      	pop	{r4, pc}
   d7684:	4620      	mov	r0, r4
   d7686:	bd10      	pop	{r4, pc}
   d7688:	00000000 	.word	0x00000000

000d768c <memcmp>:
   d768c:	b510      	push	{r4, lr}
   d768e:	3901      	subs	r1, #1
   d7690:	4402      	add	r2, r0
   d7692:	4290      	cmp	r0, r2
   d7694:	d007      	beq.n	d76a6 <memcmp+0x1a>
   d7696:	f810 3b01 	ldrb.w	r3, [r0], #1
   d769a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d769e:	42a3      	cmp	r3, r4
   d76a0:	d0f7      	beq.n	d7692 <memcmp+0x6>
   d76a2:	1b18      	subs	r0, r3, r4
   d76a4:	bd10      	pop	{r4, pc}
   d76a6:	2000      	movs	r0, #0
   d76a8:	bd10      	pop	{r4, pc}

000d76aa <memcpy>:
   d76aa:	b510      	push	{r4, lr}
   d76ac:	1e43      	subs	r3, r0, #1
   d76ae:	440a      	add	r2, r1
   d76b0:	4291      	cmp	r1, r2
   d76b2:	d004      	beq.n	d76be <memcpy+0x14>
   d76b4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d76b8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d76bc:	e7f8      	b.n	d76b0 <memcpy+0x6>
   d76be:	bd10      	pop	{r4, pc}

000d76c0 <memmove>:
   d76c0:	4288      	cmp	r0, r1
   d76c2:	b510      	push	{r4, lr}
   d76c4:	eb01 0302 	add.w	r3, r1, r2
   d76c8:	d801      	bhi.n	d76ce <memmove+0xe>
   d76ca:	1e42      	subs	r2, r0, #1
   d76cc:	e00b      	b.n	d76e6 <memmove+0x26>
   d76ce:	4298      	cmp	r0, r3
   d76d0:	d2fb      	bcs.n	d76ca <memmove+0xa>
   d76d2:	1881      	adds	r1, r0, r2
   d76d4:	1ad2      	subs	r2, r2, r3
   d76d6:	42d3      	cmn	r3, r2
   d76d8:	d004      	beq.n	d76e4 <memmove+0x24>
   d76da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d76de:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d76e2:	e7f8      	b.n	d76d6 <memmove+0x16>
   d76e4:	bd10      	pop	{r4, pc}
   d76e6:	4299      	cmp	r1, r3
   d76e8:	d004      	beq.n	d76f4 <memmove+0x34>
   d76ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   d76ee:	f802 4f01 	strb.w	r4, [r2, #1]!
   d76f2:	e7f8      	b.n	d76e6 <memmove+0x26>
   d76f4:	bd10      	pop	{r4, pc}

000d76f6 <memset>:
   d76f6:	4402      	add	r2, r0
   d76f8:	4603      	mov	r3, r0
   d76fa:	4293      	cmp	r3, r2
   d76fc:	d002      	beq.n	d7704 <memset+0xe>
   d76fe:	f803 1b01 	strb.w	r1, [r3], #1
   d7702:	e7fa      	b.n	d76fa <memset+0x4>
   d7704:	4770      	bx	lr
	...

000d7708 <srand>:
   d7708:	b538      	push	{r3, r4, r5, lr}
   d770a:	4b12      	ldr	r3, [pc, #72]	; (d7754 <srand+0x4c>)
   d770c:	681c      	ldr	r4, [r3, #0]
   d770e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7710:	4605      	mov	r5, r0
   d7712:	b9d3      	cbnz	r3, d774a <srand+0x42>
   d7714:	2018      	movs	r0, #24
   d7716:	f7fd f97f 	bl	d4a18 <malloc>
   d771a:	f243 330e 	movw	r3, #13070	; 0x330e
   d771e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7720:	8003      	strh	r3, [r0, #0]
   d7722:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7726:	8043      	strh	r3, [r0, #2]
   d7728:	f241 2334 	movw	r3, #4660	; 0x1234
   d772c:	8083      	strh	r3, [r0, #4]
   d772e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7732:	80c3      	strh	r3, [r0, #6]
   d7734:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7738:	8103      	strh	r3, [r0, #8]
   d773a:	2305      	movs	r3, #5
   d773c:	8143      	strh	r3, [r0, #10]
   d773e:	230b      	movs	r3, #11
   d7740:	8183      	strh	r3, [r0, #12]
   d7742:	2201      	movs	r2, #1
   d7744:	2300      	movs	r3, #0
   d7746:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d774a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d774c:	2200      	movs	r2, #0
   d774e:	611d      	str	r5, [r3, #16]
   d7750:	615a      	str	r2, [r3, #20]
   d7752:	bd38      	pop	{r3, r4, r5, pc}
   d7754:	2003e2f0 	.word	0x2003e2f0

000d7758 <strchr>:
   d7758:	b2c9      	uxtb	r1, r1
   d775a:	4603      	mov	r3, r0
   d775c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7760:	b11a      	cbz	r2, d776a <strchr+0x12>
   d7762:	4291      	cmp	r1, r2
   d7764:	d1f9      	bne.n	d775a <strchr+0x2>
   d7766:	4618      	mov	r0, r3
   d7768:	4770      	bx	lr
   d776a:	2900      	cmp	r1, #0
   d776c:	bf0c      	ite	eq
   d776e:	4618      	moveq	r0, r3
   d7770:	2000      	movne	r0, #0
   d7772:	4770      	bx	lr

000d7774 <strchrnul>:
   d7774:	b510      	push	{r4, lr}
   d7776:	4604      	mov	r4, r0
   d7778:	f7ff ffee 	bl	d7758 <strchr>
   d777c:	b918      	cbnz	r0, d7786 <strchrnul+0x12>
   d777e:	4620      	mov	r0, r4
   d7780:	f000 f80c 	bl	d779c <strlen>
   d7784:	4420      	add	r0, r4
   d7786:	bd10      	pop	{r4, pc}

000d7788 <strcmp>:
   d7788:	f810 2b01 	ldrb.w	r2, [r0], #1
   d778c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7790:	2a01      	cmp	r2, #1
   d7792:	bf28      	it	cs
   d7794:	429a      	cmpcs	r2, r3
   d7796:	d0f7      	beq.n	d7788 <strcmp>
   d7798:	1ad0      	subs	r0, r2, r3
   d779a:	4770      	bx	lr

000d779c <strlen>:
   d779c:	4603      	mov	r3, r0
   d779e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d77a2:	2a00      	cmp	r2, #0
   d77a4:	d1fb      	bne.n	d779e <strlen+0x2>
   d77a6:	1a18      	subs	r0, r3, r0
   d77a8:	3801      	subs	r0, #1
   d77aa:	4770      	bx	lr

000d77ac <strncmp>:
   d77ac:	b530      	push	{r4, r5, lr}
   d77ae:	b182      	cbz	r2, d77d2 <strncmp+0x26>
   d77b0:	1e45      	subs	r5, r0, #1
   d77b2:	3901      	subs	r1, #1
   d77b4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d77b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d77bc:	42a3      	cmp	r3, r4
   d77be:	d106      	bne.n	d77ce <strncmp+0x22>
   d77c0:	43ec      	mvns	r4, r5
   d77c2:	4414      	add	r4, r2
   d77c4:	42e0      	cmn	r0, r4
   d77c6:	d001      	beq.n	d77cc <strncmp+0x20>
   d77c8:	2b00      	cmp	r3, #0
   d77ca:	d1f3      	bne.n	d77b4 <strncmp+0x8>
   d77cc:	461c      	mov	r4, r3
   d77ce:	1b18      	subs	r0, r3, r4
   d77d0:	bd30      	pop	{r4, r5, pc}
   d77d2:	4610      	mov	r0, r2
   d77d4:	bd30      	pop	{r4, r5, pc}

000d77d6 <strrchr>:
   d77d6:	b538      	push	{r3, r4, r5, lr}
   d77d8:	4603      	mov	r3, r0
   d77da:	460d      	mov	r5, r1
   d77dc:	b141      	cbz	r1, d77f0 <strrchr+0x1a>
   d77de:	2400      	movs	r4, #0
   d77e0:	4629      	mov	r1, r5
   d77e2:	4618      	mov	r0, r3
   d77e4:	f7ff ffb8 	bl	d7758 <strchr>
   d77e8:	b130      	cbz	r0, d77f8 <strrchr+0x22>
   d77ea:	1c43      	adds	r3, r0, #1
   d77ec:	4604      	mov	r4, r0
   d77ee:	e7f7      	b.n	d77e0 <strrchr+0xa>
   d77f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d77f4:	f7ff bfb0 	b.w	d7758 <strchr>
   d77f8:	4620      	mov	r0, r4
   d77fa:	bd38      	pop	{r3, r4, r5, pc}

000d77fc <_strtol_r>:
   d77fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7800:	4680      	mov	r8, r0
   d7802:	4840      	ldr	r0, [pc, #256]	; (d7904 <_strtol_r+0x108>)
   d7804:	f8d0 9000 	ldr.w	r9, [r0]
   d7808:	460f      	mov	r7, r1
   d780a:	463d      	mov	r5, r7
   d780c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7810:	eb09 0004 	add.w	r0, r9, r4
   d7814:	7840      	ldrb	r0, [r0, #1]
   d7816:	f000 0008 	and.w	r0, r0, #8
   d781a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d781e:	b108      	cbz	r0, d7824 <_strtol_r+0x28>
   d7820:	462f      	mov	r7, r5
   d7822:	e7f2      	b.n	d780a <_strtol_r+0xe>
   d7824:	2c2d      	cmp	r4, #45	; 0x2d
   d7826:	d103      	bne.n	d7830 <_strtol_r+0x34>
   d7828:	1cbd      	adds	r5, r7, #2
   d782a:	787c      	ldrb	r4, [r7, #1]
   d782c:	2601      	movs	r6, #1
   d782e:	e003      	b.n	d7838 <_strtol_r+0x3c>
   d7830:	2c2b      	cmp	r4, #43	; 0x2b
   d7832:	bf04      	itt	eq
   d7834:	787c      	ldrbeq	r4, [r7, #1]
   d7836:	1cbd      	addeq	r5, r7, #2
   d7838:	b113      	cbz	r3, d7840 <_strtol_r+0x44>
   d783a:	2b10      	cmp	r3, #16
   d783c:	d10a      	bne.n	d7854 <_strtol_r+0x58>
   d783e:	e05b      	b.n	d78f8 <_strtol_r+0xfc>
   d7840:	2c30      	cmp	r4, #48	; 0x30
   d7842:	d157      	bne.n	d78f4 <_strtol_r+0xf8>
   d7844:	7828      	ldrb	r0, [r5, #0]
   d7846:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d784a:	2858      	cmp	r0, #88	; 0x58
   d784c:	d14d      	bne.n	d78ea <_strtol_r+0xee>
   d784e:	786c      	ldrb	r4, [r5, #1]
   d7850:	2310      	movs	r3, #16
   d7852:	3502      	adds	r5, #2
   d7854:	2e00      	cmp	r6, #0
   d7856:	bf14      	ite	ne
   d7858:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d785c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7860:	2700      	movs	r7, #0
   d7862:	fbbc faf3 	udiv	sl, ip, r3
   d7866:	4638      	mov	r0, r7
   d7868:	fb03 cc1a 	mls	ip, r3, sl, ip
   d786c:	eb09 0e04 	add.w	lr, r9, r4
   d7870:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7874:	f01e 0f04 	tst.w	lr, #4
   d7878:	d001      	beq.n	d787e <_strtol_r+0x82>
   d787a:	3c30      	subs	r4, #48	; 0x30
   d787c:	e00b      	b.n	d7896 <_strtol_r+0x9a>
   d787e:	f01e 0e03 	ands.w	lr, lr, #3
   d7882:	d01b      	beq.n	d78bc <_strtol_r+0xc0>
   d7884:	f1be 0f01 	cmp.w	lr, #1
   d7888:	bf0c      	ite	eq
   d788a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d788e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7892:	ebce 0404 	rsb	r4, lr, r4
   d7896:	42a3      	cmp	r3, r4
   d7898:	dd10      	ble.n	d78bc <_strtol_r+0xc0>
   d789a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d789e:	d00a      	beq.n	d78b6 <_strtol_r+0xba>
   d78a0:	4550      	cmp	r0, sl
   d78a2:	d806      	bhi.n	d78b2 <_strtol_r+0xb6>
   d78a4:	d101      	bne.n	d78aa <_strtol_r+0xae>
   d78a6:	4564      	cmp	r4, ip
   d78a8:	dc03      	bgt.n	d78b2 <_strtol_r+0xb6>
   d78aa:	fb03 4000 	mla	r0, r3, r0, r4
   d78ae:	2701      	movs	r7, #1
   d78b0:	e001      	b.n	d78b6 <_strtol_r+0xba>
   d78b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d78b6:	f815 4b01 	ldrb.w	r4, [r5], #1
   d78ba:	e7d7      	b.n	d786c <_strtol_r+0x70>
   d78bc:	1c7b      	adds	r3, r7, #1
   d78be:	d10c      	bne.n	d78da <_strtol_r+0xde>
   d78c0:	2e00      	cmp	r6, #0
   d78c2:	f04f 0322 	mov.w	r3, #34	; 0x22
   d78c6:	bf14      	ite	ne
   d78c8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d78cc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d78d0:	f8c8 3000 	str.w	r3, [r8]
   d78d4:	b92a      	cbnz	r2, d78e2 <_strtol_r+0xe6>
   d78d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d78da:	b106      	cbz	r6, d78de <_strtol_r+0xe2>
   d78dc:	4240      	negs	r0, r0
   d78de:	b172      	cbz	r2, d78fe <_strtol_r+0x102>
   d78e0:	b107      	cbz	r7, d78e4 <_strtol_r+0xe8>
   d78e2:	1e69      	subs	r1, r5, #1
   d78e4:	6011      	str	r1, [r2, #0]
   d78e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d78ea:	2430      	movs	r4, #48	; 0x30
   d78ec:	2b00      	cmp	r3, #0
   d78ee:	d1b1      	bne.n	d7854 <_strtol_r+0x58>
   d78f0:	2308      	movs	r3, #8
   d78f2:	e7af      	b.n	d7854 <_strtol_r+0x58>
   d78f4:	230a      	movs	r3, #10
   d78f6:	e7ad      	b.n	d7854 <_strtol_r+0x58>
   d78f8:	2c30      	cmp	r4, #48	; 0x30
   d78fa:	d0a3      	beq.n	d7844 <_strtol_r+0x48>
   d78fc:	e7aa      	b.n	d7854 <_strtol_r+0x58>
   d78fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7902:	bf00      	nop
   d7904:	2003e28c 	.word	0x2003e28c

000d7908 <strtol>:
   d7908:	4613      	mov	r3, r2
   d790a:	460a      	mov	r2, r1
   d790c:	4601      	mov	r1, r0
   d790e:	4802      	ldr	r0, [pc, #8]	; (d7918 <strtol+0x10>)
   d7910:	6800      	ldr	r0, [r0, #0]
   d7912:	f7ff bf73 	b.w	d77fc <_strtol_r>
   d7916:	bf00      	nop
   d7918:	2003e2f0 	.word	0x2003e2f0

000d791c <dynalib_user>:
   d791c:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d792c:	00000000                                ....

000d7930 <_ZTVN5spark10LogHandlerE>:
	...
   d7940:	000d40a5 000d40cd                       .@...@..

000d7948 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7950:	000d4105 000d4139 000d6745 000d40cf     .A..9A..Eg...@..
   d7960:	78323025 53535200 25203a49 414d2064     %02x.RSSI: %d MA
   d7970:	25203a43 3a583230 58323025 3230253a     C: %02X:%02X:%02
   d7980:	30253a58 253a5832 3a583230 58323025     X:%02X:%02X:%02X
   d7990:	61736900 72657664 69736974 203a676e     .isadvertising: 
   d79a0:	61006425 72657664 65736974 7a697320     %d.advertise siz
   d79b0:	25203a65 61002064 00007070              e: %d .app..

000d79bc <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d79c4:	000d4a69 000d4a6f 000d515b 000d4a7d     iJ..oJ..[Q..}J..
   d79d4:	000d4a6b 69726977 622e676e 5300656c     kJ..wiring.ble.S
   d79e4:	74726174 73696420 65766f63 676e6972     tart discovering
   d79f4:	72657320 65636976 53002e73 74726174      services..Start
   d7a04:	73696420 65766f63 676e6972 61686320      discovering cha
   d7a14:	74636172 73697265 73636974 6550002e     racteristics..Pe
   d7a24:	64207265 63697665 73692065 73696d20     er device is mis
   d7a34:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   d7a44:	65707061 7020646e 20726565 746e6543     append peer Cent
   d7a54:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   d7a64:	65746365 79622064 6e654320 6c617274     ected by Central
   d7a74:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   d7a84:	65746365 79622064 6d657220 2065746f     ected by remote 
   d7a94:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   d7aa4:	6e206464 70207765 20726565 69766564     dd new peer devi
   d7ab4:	002e6563 2077654e 69726570 72656870     ce..New peripher
   d7ac4:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   d7ad4:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   d7ae4:	69642064 766f6373 64657265 61686320     d discovered cha
   d7af4:	74636172 73697265 2e636974 69614600     racteristic..Fai
   d7b04:	2064656c 61206f74 6e657070 69642064     led to append di
   d7b14:	766f6373 64657265 72657320 65636976     scovered service
   d7b24:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d7b34:	6c20646e 6c61636f 61686320 74636172     nd local charact
   d7b44:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   d7b54:	20646574 72616863 65746361 74736972     ted characterist
   d7b64:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   d7b74:	002e6465                                ed..

000d7b78 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d7b78:	5f9b34fb 80000080 00001000 00000000     .4._............

000d7b88 <_ZTVN5spark13EthernetClassE>:
	...
   d7b90:	000d566d 000d5663 000d5659 000d564f     mV..cV..YV..OV..
   d7ba0:	000d5643 000d5637 000d562b 000d5623     CV..7V..+V..#V..
   d7bb0:	000d5619 000d560f 000d6c55              .V...V..Ul..

000d7bbc <_ZTV9IPAddress>:
	...
   d7bc4:	000d569d 000d568d 000d568f 00302e30     .V...V...V..0.0.
   d7bd4:	736c6166 72740065 25006575 2e250075     false.true.%u.%.
   d7be4:	00666c2a 6e006725 006c6c75 34302575     *lf.%g.null.u%04
   d7bf4:	00000078                                x...

000d7bf8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7c00:	000d5b21 000d5b47 000d5afb 000d579f     ![..G[...Z...W..

000d7c10 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7c18:	000d5f9d 000d5fb1 000d68f9 000d5b03     ._..._...h...[..
   d7c28:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d7c38:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d7c48:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d7c58:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d7c68:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d7c78:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d7c88:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d7c98:	25007265 75303130 205d0020 00202c00     er.%010u .] ., .
   d7ca8:	203a2928 005b2000 65646f63 00203d20     (): . [.code = .
   d7cb8:	64006925 69617465 3d20736c 0a0d0020     %i.details = ...
   d7cc8:	006e6c00 63006e66 0065646f 61746564     .ln.fn.code.deta
   d7cd8:	6e006c69 00656e6f 63617274 6e690065     il.none.trace.in
   d7ce8:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
   d7cf8:	0063696e 006c6c61                       nic.all.

000d7d00 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7d08:	000d5f71 000d5f89 000d6745 000d40cf     q_..._..Eg...@..

000d7d18 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7d20:	000d5b1f 000d5b55 000d666d 000d5b05     .[..U[..mf...[..

000d7d30 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7d38:	000d5b1d 000d5b63 000d5eb5 000d5b71     .[..c[...^..q[..

000d7d48 <_ZTVN5spark9MeshClassE>:
	...
   d7d50:	000d6acf 000d6ac5 000d6abb 000d6ab1     .j...j...j...j..
   d7d60:	000d6aa5 000d6a99 000d6a8d 000d6a85     .j...j...j...j..
   d7d70:	000d6a7b 000d6a71 000d6c55              {j..qj..Ul..

000d7d7c <_ZTVN5spark12NetworkClassE>:
	...
   d7d84:	000d6bed 000d6bf7 000d6c01 000d6c0b     .k...k...l...l..
   d7d94:	000d6c15 000d6c21 000d6c2d 000d6c39     .l..!l..-l..9l..
   d7da4:	000d6c41 000d6c4b 000d6c55 2b25005a     Al..Kl..Ul..Z.%+
   d7db4:	3a643330 75323025 2d592500 252d6d25     03d:%02u.%Y-%m-%
   d7dc4:	48255464 3a4d253a 7a255325 63736100     dT%H:%M:%S%z.asc
   d7dd4:	656d6974 00000000                       time....

000d7ddc <_ZTV11USARTSerial>:
	...
   d7de4:	000d6fed 000d703d 000d704b 000d6d35     .o..=p..Kp..5m..
   d7df4:	000d7001 000d7023 000d700f 000d7037     .p..#p...p..7p..
   d7e04:	000d6fef 000d6ff3                       .o...o..

000d7e0c <_ZTV9USBSerial>:
	...
   d7e14:	000d7101 000d7151 000d715f 000d6d35     .q..Qq.._q..5m..
   d7e24:	000d713d 000d7103 000d7119 000d714b     =q...q...q..Kq..
   d7e34:	000d712f 000d70fd                       /q...p..

000d7e3c <_ZTVN5spark9WiFiClassE>:
	...
   d7e44:	000d7273 000d7269 000d725f 000d7215     sr..ir.._r...r..
   d7e54:	000d7253 000d7247 000d723b 000d7233     Sr..Gr..;r..3r..
   d7e64:	000d7229 000d721f 000d6c55              )r...r..Ul..

000d7e70 <_ZSt7nothrow>:
	...

000d7e71 <_ctype_>:
   d7e71:	20202000 20202020 28282020 20282828     .         ((((( 
   d7e81:	20202020 20202020 20202020 20202020                     
   d7e91:	10108820 10101010 10101010 10101010      ...............
   d7ea1:	04040410 04040404 10040404 10101010     ................
   d7eb1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7ec1:	01010101 01010101 01010101 10101010     ................
   d7ed1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7ee1:	02020202 02020202 02020202 10101010     ................
   d7ef1:	00000020 00000000 00000000 00000000      ...............
	...

000d7f74 <__sf_fake_stdin>:
	...

000d7f94 <__sf_fake_stdout>:
	...

000d7fb4 <__sf_fake_stderr>:
	...
   d7fd4:	00000043                                         C.

000d7fd6 <link_const_variable_data_end>:
	...

000d7fd8 <link_constructors_location>:
   d7fd8:	000d44ed 	.word	0x000d44ed
   d7fdc:	000d55d5 	.word	0x000d55d5
   d7fe0:	000d5679 	.word	0x000d5679
   d7fe4:	000d6735 	.word	0x000d6735
   d7fe8:	000d6b9d 	.word	0x000d6b9d
   d7fec:	000d6d21 	.word	0x000d6d21
   d7ff0:	000d6e61 	.word	0x000d6e61
   d7ff4:	000d6fa5 	.word	0x000d6fa5
   d7ff8:	000d6fd9 	.word	0x000d6fd9
   d7ffc:	000d727d 	.word	0x000d727d
   d8000:	000d73e1 	.word	0x000d73e1
   d8004:	000d74a5 	.word	0x000d74a5
   d8008:	000d7529 	.word	0x000d7529
   d800c:	000d75ad 	.word	0x000d75ad
