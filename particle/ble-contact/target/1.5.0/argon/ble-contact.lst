
/Users/nams/Documents/projects/covid/adafruit/ble_adv_covid/particle/ble-contact/target/1.5.0/argon/ble-contact.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004034  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8050  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e27c  000d8054  0001e27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000500  2003e2f0  2003e2f0  0002e2f0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d80c8  000d80c8  000280c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d80f0  000d80f0  000280f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cec8c  00000000  00000000  000280f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000eaa2  00000000  00000000  000f6d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f38e  00000000  00000000  00105822  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002660  00000000  00000000  00124bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000049f8  00000000  00000000  00127210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030399  00000000  00000000  0012bc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00020d39  00000000  00000000  0015bfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106a31  00000000  00000000  0017ccda  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d204  00000000  00000000  0028370c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fb4c 	bl	d76ca <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fb6c 	bl	d7716 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e27c 	.word	0x2003e27c
   d4048:	000d8054 	.word	0x000d8054
   d404c:	2003e2f0 	.word	0x2003e2f0
   d4050:	2003e2f0 	.word	0x2003e2f0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 f985 	bl	d7368 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d804c 	.word	0x000d804c
   d4080:	000d8014 	.word	0x000d8014

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b988 	b.w	d4398 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f999 	bl	d43c0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 b92b 	b.w	d72ec <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bcdb 	b.w	d4a50 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bce1 	b.w	d4a60 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bcdf 	b.w	d4a60 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fc34 	bl	d4918 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d47a9 	.word	0x000d47a9

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <sd_ble_gap_privacy_set>:
 *                                  Otherwise, the p_device_irk pointer in privacy parameter is an invalid pointer.
 * @retval ::NRF_ERROR_INVALID_PARAM Out of range parameters are provided.
 * @retval ::NRF_ERROR_INVALID_STATE Privacy settings cannot be changed while advertising, scanning
 *                                   or creating a connection.
 */
SVCALL(SD_BLE_GAP_PRIVACY_SET, uint32_t, sd_ble_gap_privacy_set(ble_gap_privacy_params_t const *p_privacy_params));
   d40c8:	df70      	svc	112	; 0x70
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_Z14sprintf_bufferPhh.part.1>:
    { "app", LOG_LEVEL_TRACE }, // enable all app messages
});

static char m_tx_buffer[64];

void sprintf_buffer(uint8_t *data, uint8_t length) {
   d40d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d40da:	3901      	subs	r1, #1
  uint8_t size = 0;
  if (length>0) {
    for (uint8_t i=0; i<length; i++) {
      //if (i>0) size+=sprintf(m_tx_buffer+size, "-");
      size+= sprintf(m_tx_buffer+size, "%02x", data[i]);
   d40dc:	4f07      	ldr	r7, [pc, #28]	; (d40fc <_Z14sprintf_bufferPhh.part.1+0x24>)
   d40de:	1e45      	subs	r5, r0, #1
   d40e0:	1846      	adds	r6, r0, r1
    { "app", LOG_LEVEL_TRACE }, // enable all app messages
});

static char m_tx_buffer[64];

void sprintf_buffer(uint8_t *data, uint8_t length) {
   d40e2:	2400      	movs	r4, #0
  uint8_t size = 0;
  if (length>0) {
    for (uint8_t i=0; i<length; i++) {
   d40e4:	42b5      	cmp	r5, r6
   d40e6:	d008      	beq.n	d40fa <_Z14sprintf_bufferPhh.part.1+0x22>
      //if (i>0) size+=sprintf(m_tx_buffer+size, "-");
      size+= sprintf(m_tx_buffer+size, "%02x", data[i]);
   d40e8:	1938      	adds	r0, r7, r4
   d40ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d40ee:	4904      	ldr	r1, [pc, #16]	; (d4100 <_Z14sprintf_bufferPhh.part.1+0x28>)
   d40f0:	f000 fcc6 	bl	d4a80 <sprintf>
   d40f4:	4420      	add	r0, r4
   d40f6:	b2c4      	uxtb	r4, r0
   d40f8:	e7f4      	b.n	d40e4 <_Z14sprintf_bufferPhh.part.1+0xc>
   d40fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d40fc:	2003e340 	.word	0x2003e340
   d4100:	000d7980 	.word	0x000d7980

000d4104 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4104:	4b0a      	ldr	r3, [pc, #40]	; (d4130 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4106:	b510      	push	{r4, lr}
   d4108:	4604      	mov	r4, r0
   d410a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d410c:	f001 fe40 	bl	d5d90 <_ZN5spark10LogManager8instanceEv>
   d4110:	4621      	mov	r1, r4
   d4112:	f002 f82d 	bl	d6170 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4116:	f003 f867 	bl	d71e8 <_Z16_fetch_usbserialv>
   d411a:	f003 f859 	bl	d71d0 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d411e:	4620      	mov	r0, r4
   d4120:	4b04      	ldr	r3, [pc, #16]	; (d4134 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4122:	f840 3b04 	str.w	r3, [r0], #4
   d4126:	f001 ff29 	bl	d5f7c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d412a:	4620      	mov	r0, r4
   d412c:	bd10      	pop	{r4, pc}
   d412e:	bf00      	nop
   d4130:	000d7970 	.word	0x000d7970
   d4134:	000d7958 	.word	0x000d7958

000d4138 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4138:	b510      	push	{r4, lr}
   d413a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d413c:	f7ff ffe2 	bl	d4104 <_ZN5spark16SerialLogHandlerD1Ev>
   d4140:	4620      	mov	r0, r4
   d4142:	2124      	movs	r1, #36	; 0x24
   d4144:	f003 f941 	bl	d73ca <_ZdlPvj>
   d4148:	4620      	mov	r0, r4
   d414a:	bd10      	pop	{r4, pc}

000d414c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d414c:	b510      	push	{r4, lr}
   d414e:	b08a      	sub	sp, #40	; 0x28
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4150:	e88d 000c 	stmia.w	sp, {r2, r3}
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4154:	460c      	mov	r4, r1
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4156:	2120      	movs	r1, #32
   d4158:	9102      	str	r1, [sp, #8]
    attr.flags = 0;
   d415a:	2100      	movs	r1, #0
   d415c:	9103      	str	r1, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d415e:	460b      	mov	r3, r1
   d4160:	aa02      	add	r2, sp, #8
   d4162:	6801      	ldr	r1, [r0, #0]
   d4164:	4620      	mov	r0, r4
   d4166:	f000 fbe7 	bl	d4938 <log_message_v>
}
   d416a:	b00a      	add	sp, #40	; 0x28
   d416c:	bd10      	pop	{r4, pc}

000d416e <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d416e:	b40e      	push	{r1, r2, r3}
   d4170:	b503      	push	{r0, r1, lr}
   d4172:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
   d4174:	2101      	movs	r1, #1
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4176:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d417a:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   d417c:	f7ff ffe6 	bl	d414c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d4180:	b002      	add	sp, #8
   d4182:	f85d eb04 	ldr.w	lr, [sp], #4
   d4186:	b003      	add	sp, #12
   d4188:	4770      	bx	lr
	...

000d418c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv>:
    }
  }
}

void scanResultCallback(const BleScanResult *scanResult, void *context) {
   d418c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4190:	b09d      	sub	sp, #116	; 0x74
   d4192:	4606      	mov	r6, r0
  BleUuid uuids[4];
   d4194:	a808      	add	r0, sp, #32
   d4196:	f000 fce1 	bl	d4b5c <_ZN8particle7BleUuidC1Ev>
   d419a:	a80d      	add	r0, sp, #52	; 0x34
   d419c:	f000 fcde 	bl	d4b5c <_ZN8particle7BleUuidC1Ev>
   d41a0:	a812      	add	r0, sp, #72	; 0x48
   d41a2:	f000 fcdb 	bl	d4b5c <_ZN8particle7BleUuidC1Ev>
   d41a6:	a817      	add	r0, sp, #92	; 0x5c
   d41a8:	f000 fcd8 	bl	d4b5c <_ZN8particle7BleUuidC1Ev>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
   d41ac:	a908      	add	r1, sp, #32
   d41ae:	2204      	movs	r2, #4
   d41b0:	f106 0008 	add.w	r0, r6, #8
   d41b4:	f000 fe1c 	bl	d4df0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
   d41b8:	4607      	mov	r7, r0
  // Print out mac info
  BleAddress addr = scanResult->address;
   d41ba:	e896 0003 	ldmia.w	r6, {r0, r1}
   d41be:	ac06      	add	r4, sp, #24
   d41c0:	e884 0003 	stmia.w	r4, {r0, r1}
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d41c4:	2500      	movs	r5, #0
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
   d41c6:	f04f 0814 	mov.w	r8, #20
   d41ca:	f64f 596f 	movw	r9, #64879	; 0xfd6f
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
  // Print out mac info
  BleAddress addr = scanResult->address;
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d41ce:	42bd      	cmp	r5, r7
   d41d0:	da3a      	bge.n	d4248 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xbc>
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
   d41d2:	ab08      	add	r3, sp, #32
   d41d4:	fb08 3005 	mla	r0, r8, r5, r3
   d41d8:	f000 fcfd 	bl	d4bd6 <_ZNK8particle7BleUuid7shortedEv>
   d41dc:	4548      	cmp	r0, r9
   d41de:	d131      	bne.n	d4244 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xb8>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41e0:	f000 faea 	bl	d47b8 <HAL_Timer_Get_Milli_Seconds>
        lastSeen = millis();
   d41e4:	4b1a      	ldr	r3, [pc, #104]	; (d4250 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xc4>)
        lastRSSI = scanResult->rssi;
   d41e6:	f996 5050 	ldrsb.w	r5, [r6, #80]	; 0x50
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
        lastSeen = millis();
   d41ea:	6018      	str	r0, [r3, #0]
        lastRSSI = scanResult->rssi;
   d41ec:	4b19      	ldr	r3, [pc, #100]	; (d4254 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xc8>)
   d41ee:	4607      	mov	r7, r0
        // Log.trace("UUID: %x", uuids[i].shorted());
        Log.trace("RSSI: %d Time: %ld MAC: %02X:%02X:%02X:%02X:%02X:%02X", 
                  lastRSSI, lastSeen, addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
   d41f0:	2105      	movs	r1, #5
   d41f2:	4620      	mov	r0, r4

  for(int i = 0; i < uuidsAvail; i++){
    // Print out the UUID we're looking for
    if( uuids[i].shorted() == CONTACT_UUID ) {
        lastSeen = millis();
        lastRSSI = scanResult->rssi;
   d41f4:	701d      	strb	r5, [r3, #0]
        // Log.trace("UUID: %x", uuids[i].shorted());
        Log.trace("RSSI: %d Time: %ld MAC: %02X:%02X:%02X:%02X:%02X:%02X", 
                  lastRSSI, lastSeen, addr[5], addr[4], addr[3], addr[2], addr[1], addr[0]);
   d41f6:	f000 fc9e 	bl	d4b36 <_ZNK8particle10BleAddressixEh>
   d41fa:	2104      	movs	r1, #4
   d41fc:	4606      	mov	r6, r0
   d41fe:	4620      	mov	r0, r4
   d4200:	f000 fc99 	bl	d4b36 <_ZNK8particle10BleAddressixEh>
   d4204:	2103      	movs	r1, #3
   d4206:	4680      	mov	r8, r0
   d4208:	4620      	mov	r0, r4
   d420a:	f000 fc94 	bl	d4b36 <_ZNK8particle10BleAddressixEh>
   d420e:	2102      	movs	r1, #2
   d4210:	4681      	mov	r9, r0
   d4212:	4620      	mov	r0, r4
   d4214:	f000 fc8f 	bl	d4b36 <_ZNK8particle10BleAddressixEh>
   d4218:	2101      	movs	r1, #1
   d421a:	4682      	mov	sl, r0
   d421c:	4620      	mov	r0, r4
   d421e:	f000 fc8a 	bl	d4b36 <_ZNK8particle10BleAddressixEh>
   d4222:	2100      	movs	r1, #0
   d4224:	4683      	mov	fp, r0
   d4226:	4620      	mov	r0, r4
   d4228:	f000 fc85 	bl	d4b36 <_ZNK8particle10BleAddressixEh>
   d422c:	f8cd b010 	str.w	fp, [sp, #16]
   d4230:	9005      	str	r0, [sp, #20]
   d4232:	e88d 0740 	stmia.w	sp, {r6, r8, r9, sl}
   d4236:	463b      	mov	r3, r7
   d4238:	462a      	mov	r2, r5
   d423a:	4907      	ldr	r1, [pc, #28]	; (d4258 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xcc>)
   d423c:	4807      	ldr	r0, [pc, #28]	; (d425c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xd0>)
   d423e:	f7ff ff96 	bl	d416e <_ZNK5spark6Logger5traceEPKcz>
   d4242:	e001      	b.n	d4248 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xbc>
  int uuidsAvail = scanResult->advertisingData.serviceUUID(uuids,sizeof(uuids)/sizeof(BleUuid));
  // Print out mac info
  BleAddress addr = scanResult->address;
  // Log.trace("Num of UUIDs: %d", uuidsAvail);

  for(int i = 0; i < uuidsAvail; i++){
   d4244:	3501      	adds	r5, #1
   d4246:	e7c2      	b.n	d41ce <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x42>
        // BLE.stopScanning();

        return;
    }
  }
}
   d4248:	b01d      	add	sp, #116	; 0x74
   d424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d424e:	bf00      	nop
   d4250:	2003e33c 	.word	0x2003e33c
   d4254:	2003e3a4 	.word	0x2003e3a4
   d4258:	000d7985 	.word	0x000d7985
   d425c:	2003e400 	.word	0x2003e400

000d4260 <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d4260:	b40e      	push	{r1, r2, r3}
   d4262:	b503      	push	{r0, r1, lr}
   d4264:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_ERROR, fmt, args);
   d4266:	2132      	movs	r1, #50	; 0x32
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
   d4268:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d426c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   d426e:	f7ff ff6d 	bl	d414c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d4272:	b002      	add	sp, #8
   d4274:	f85d eb04 	ldr.w	lr, [sp], #4
   d4278:	b003      	add	sp, #12
   d427a:	4770      	bx	lr

000d427c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d427c:	b40e      	push	{r1, r2, r3}
   d427e:	b503      	push	{r0, r1, lr}
   d4280:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4282:	211e      	movs	r1, #30
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4284:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d4288:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_INFO, fmt, args);
   d428a:	f7ff ff5f 	bl	d414c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d428e:	b002      	add	sp, #8
   d4290:	f85d eb04 	ldr.w	lr, [sp], #4
   d4294:	b003      	add	sp, #12
   d4296:	4770      	bx	lr

000d4298 <_Z15gap_params_initv>:

void gap_params_init() {
   d4298:	b507      	push	{r0, r1, r2, lr}
    unsigned int err_code;
    ble_gap_privacy_params_t prvt_conf;
    memset(&prvt_conf, 0, sizeof(prvt_conf));
   d429a:	2300      	movs	r3, #0
   d429c:	9300      	str	r3, [sp, #0]
   d429e:	9301      	str	r3, [sp, #4]
    prvt_conf.privacy_mode = BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY;
   d42a0:	2301      	movs	r3, #1
   d42a2:	f88d 3000 	strb.w	r3, [sp]
    prvt_conf.private_addr_type = BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE ;
    prvt_conf.private_addr_cycle_s = 0;
    err_code = sd_ble_gap_privacy_set(&prvt_conf);
   d42a6:	4668      	mov	r0, sp
void gap_params_init() {
    unsigned int err_code;
    ble_gap_privacy_params_t prvt_conf;
    memset(&prvt_conf, 0, sizeof(prvt_conf));
    prvt_conf.privacy_mode = BLE_GAP_PRIVACY_MODE_DEVICE_PRIVACY;
    prvt_conf.private_addr_type = BLE_GAP_ADDR_TYPE_RANDOM_PRIVATE_NON_RESOLVABLE ;
   d42a8:	2303      	movs	r3, #3
   d42aa:	f88d 3001 	strb.w	r3, [sp, #1]
    prvt_conf.private_addr_cycle_s = 0;
    err_code = sd_ble_gap_privacy_set(&prvt_conf);
   d42ae:	f7ff ff0b 	bl	d40c8 <sd_ble_gap_privacy_set>
    if (err_code !=0) {
   d42b2:	4602      	mov	r2, r0
   d42b4:	b118      	cbz	r0, d42be <_Z15gap_params_initv+0x26>
      Log.error("Problem with gap_params_init: %d", err_code);
   d42b6:	4903      	ldr	r1, [pc, #12]	; (d42c4 <_Z15gap_params_initv+0x2c>)
   d42b8:	4803      	ldr	r0, [pc, #12]	; (d42c8 <_Z15gap_params_initv+0x30>)
   d42ba:	f7ff ffd1 	bl	d4260 <_ZNK5spark6Logger5errorEPKcz>
    }
}
   d42be:	b003      	add	sp, #12
   d42c0:	f85d fb04 	ldr.w	pc, [sp], #4
   d42c4:	000d79bb 	.word	0x000d79bb
   d42c8:	2003e400 	.word	0x2003e400

000d42cc <_Z8calc_RPIPh>:
    advData.set(m_enc_advdata, adv_len);
    sprintf_buffer(m_enc_advdata, adv_len);
    Log.info(m_tx_buffer);
}

void calc_RPI(uint8_t *data) {
   d42cc:	f100 0210 	add.w	r2, r0, #16
   d42d0:	4603      	mov	r3, r0
    static uint8_t count=0;
    for(uint8_t i=0; i<16; i++) {
      data[i] = i;
   d42d2:	1a19      	subs	r1, r3, r0
   d42d4:	f803 1b01 	strb.w	r1, [r3], #1
    Log.info(m_tx_buffer);
}

void calc_RPI(uint8_t *data) {
    static uint8_t count=0;
    for(uint8_t i=0; i<16; i++) {
   d42d8:	4293      	cmp	r3, r2
   d42da:	d1fa      	bne.n	d42d2 <_Z8calc_RPIPh+0x6>
      data[i] = i;
    }  
    data[15]=count++;
   d42dc:	4a02      	ldr	r2, [pc, #8]	; (d42e8 <_Z8calc_RPIPh+0x1c>)
   d42de:	7813      	ldrb	r3, [r2, #0]
   d42e0:	73c3      	strb	r3, [r0, #15]
   d42e2:	1c59      	adds	r1, r3, #1
   d42e4:	7011      	strb	r1, [r2, #0]
   d42e6:	4770      	bx	lr
   d42e8:	2003e338 	.word	0x2003e338

000d42ec <_Z16advertising_initv>:

NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);
*/

void advertising_init(void)
{
   d42ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    m_adv_params.p_peer_addr     = NULL;    // Undirected advertisement.
    m_adv_params.filter_policy   = BLE_GAP_ADV_FP_ANY;
    m_adv_params.interval        = NON_CONNECTABLE_ADV_INTERVAL;
    m_adv_params.duration        = 0;       // Never time out.
    */
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
   d42ee:	f000 fe07 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42f2:	2103      	movs	r1, #3
   d42f4:	f000 fe61 	bl	d4fba <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>
    BleAddress defaultAddr = BLE.address();
   d42f8:	f000 fe02 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42fc:	4601      	mov	r1, r0
   d42fe:	4668      	mov	r0, sp
   d4300:	f000 fe1c 	bl	d4f3c <_ZNK8particle14BleLocalDevice7addressEv>
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
   d4304:	f000 fdfc 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4308:	4601      	mov	r1, r0
   d430a:	a802      	add	r0, sp, #8
   d430c:	f000 fe16 	bl	d4f3c <_ZNK8particle14BleLocalDevice7addressEv>
   d4310:	2103      	movs	r1, #3
   d4312:	a802      	add	r0, sp, #8
   d4314:	f000 fc0c 	bl	d4b30 <_ZN8particle10BleAddress4typeENS_14BleAddressTypeE>
    BLE.setAdvertisingTimeout(2000);
   d4318:	f000 fdf2 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d431c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
   d4320:	4c19      	ldr	r4, [pc, #100]	; (d4388 <_Z16advertising_initv+0x9c>)
    m_adv_params.duration        = 0;       // Never time out.
    */
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
    BleAddress defaultAddr = BLE.address();
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    BLE.setAdvertisingTimeout(2000);
   d4322:	f000 fe2a 	bl	d4f7a <_ZNK8particle14BleLocalDevice21setAdvertisingTimeoutEt>
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
   d4326:	f000 fdeb 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d432a:	a902      	add	r1, sp, #8
   d432c:	f000 fe15 	bl	d4f5a <_ZNK8particle14BleLocalDevice7txPowerEPa>
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
   d4330:	2302      	movs	r3, #2
   d4332:	7023      	strb	r3, [r4, #0]
    m_enc_advdata[1] = 0xA;
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
   d4334:	70e3      	strb	r3, [r4, #3]
    m_enc_advdata[4] = 0x01;
   d4336:	2301      	movs	r3, #1
   d4338:	7123      	strb	r3, [r4, #4]
    m_enc_advdata[5] = 0x06;
   d433a:	2306      	movs	r3, #6
   d433c:	7163      	strb	r3, [r4, #5]
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    BLE.setAdvertisingTimeout(2000);
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
    m_enc_advdata[1] = 0xA;
   d433e:	220a      	movs	r2, #10
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
   d4340:	2303      	movs	r3, #3
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
   d4342:	2113      	movs	r1, #19
    BLE.setAdvertisingType(BleAdvertisingEventType::NON_CONNECTABLE_NON_SCANABLE_UNDIRECTED);
    BleAddress defaultAddr = BLE.address();
    BLE.address().type(BleAddressType::RANDOM_PRIVATE_NON_RESOLVABLE);
    BLE.setAdvertisingTimeout(2000);
    int8_t txPower;
    txPower = BLE.txPower(&txPower);
   d4344:	f88d 0008 	strb.w	r0, [sp, #8]
    m_enc_advdata[0] = 0x2;  // Set TX_POWER
    m_enc_advdata[1] = 0xA;
   d4348:	7062      	strb	r2, [r4, #1]
    m_enc_advdata[2] = txPower; 
   d434a:	70a0      	strb	r0, [r4, #2]
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
   d434c:	226f      	movs	r2, #111	; 0x6f
    m_enc_advdata[1] = 0xA;
    m_enc_advdata[2] = txPower; 
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
   d434e:	71a3      	strb	r3, [r4, #6]
    m_enc_advdata[7] = 0x03;
   d4350:	71e3      	strb	r3, [r4, #7]
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
   d4352:	72a1      	strb	r1, [r4, #10]
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
   d4354:	23fd      	movs	r3, #253	; 0xfd
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
   d4356:	2116      	movs	r1, #22
    m_enc_advdata[12] = 0x6F;
    m_enc_advdata[13] = 0xFD;
    // setup RPI
    calc_RPI(m_enc_advdata+14);
   d4358:	f104 000e 	add.w	r0, r4, #14
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
    m_enc_advdata[9] = 0xFD;
   d435c:	7263      	strb	r3, [r4, #9]
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
    m_enc_advdata[12] = 0x6F;
    m_enc_advdata[13] = 0xFD;
   d435e:	7363      	strb	r3, [r4, #13]
    m_enc_advdata[3] = 0x02;  // SET Flags
    m_enc_advdata[4] = 0x01;
    m_enc_advdata[5] = 0x06;
    m_enc_advdata[6] = 0x03;  // Set contact UUID
    m_enc_advdata[7] = 0x03;
    m_enc_advdata[8] = 0x6F;
   d4360:	7222      	strb	r2, [r4, #8]
    m_enc_advdata[9] = 0xFD;
    m_enc_advdata[10] = 0x13;
    m_enc_advdata[11] = 0x16;
   d4362:	72e1      	strb	r1, [r4, #11]
    m_enc_advdata[12] = 0x6F;
   d4364:	7322      	strb	r2, [r4, #12]
    m_enc_advdata[13] = 0xFD;
    // setup RPI
    calc_RPI(m_enc_advdata+14);
   d4366:	f7ff ffb1 	bl	d42cc <_Z8calc_RPIPh>
    size_t adv_len = 14+16;
    advData.set(m_enc_advdata, adv_len);
   d436a:	221e      	movs	r2, #30
   d436c:	4621      	mov	r1, r4
   d436e:	4807      	ldr	r0, [pc, #28]	; (d438c <_Z16advertising_initv+0xa0>)
   d4370:	f000 fc5c 	bl	d4c2c <_ZN8particle18BleAdvertisingData3setEPKhj>
   d4374:	4620      	mov	r0, r4
   d4376:	211e      	movs	r1, #30
   d4378:	f7ff feae 	bl	d40d8 <_Z14sprintf_bufferPhh.part.1>
    sprintf_buffer(m_enc_advdata, adv_len);
    Log.info(m_tx_buffer);
   d437c:	4904      	ldr	r1, [pc, #16]	; (d4390 <_Z16advertising_initv+0xa4>)
   d437e:	4805      	ldr	r0, [pc, #20]	; (d4394 <_Z16advertising_initv+0xa8>)
   d4380:	f7ff ff7c 	bl	d427c <_ZNK5spark6Logger4infoEPKcz>
}
   d4384:	b004      	add	sp, #16
   d4386:	bd10      	pop	{r4, pc}
   d4388:	2003e2f4 	.word	0x2003e2f4
   d438c:	2003e380 	.word	0x2003e380
   d4390:	2003e340 	.word	0x2003e340
   d4394:	2003e400 	.word	0x2003e400

000d4398 <setup>:
    data[15]=count++;
}


// setup() runs once, when the device is first turned on.
void setup() {
   d4398:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  BLE.setScanTimeout(100);
   d439a:	f000 fdb1 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d439e:	2164      	movs	r1, #100	; 0x64
   d43a0:	f000 fe72 	bl	d5088 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
  gap_params_init();
   d43a4:	f7ff ff78 	bl	d4298 <_Z15gap_params_initv>
  advertising_init();
   d43a8:	f7ff ffa0 	bl	d42ec <_Z16advertising_initv>
  BLE.advertise(&advData);
   d43ac:	f000 fda8 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43b0:	2200      	movs	r2, #0
   d43b2:	4902      	ldr	r1, [pc, #8]	; (d43bc <setup+0x24>)
}
   d43b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {
  // Put initialization like pinMode and begin functions here.
  BLE.setScanTimeout(100);
  gap_params_init();
  advertising_init();
  BLE.advertise(&advData);
   d43b8:	f000 be46 	b.w	d5048 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
   d43bc:	2003e380 	.word	0x2003e380

000d43c0 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d43c0:	b510      	push	{r4, lr}
   d43c2:	b08a      	sub	sp, #40	; 0x28
   d43c4:	f000 f9f8 	bl	d47b8 <HAL_Timer_Get_Milli_Seconds>
  // The core of your code will likely live here.
  // Scan for devices
  if( (millis() > lastSeen + RE_CHECK_MS) ){
   d43c8:	4b11      	ldr	r3, [pc, #68]	; (d4410 <loop+0x50>)
   d43ca:	681b      	ldr	r3, [r3, #0]
   d43cc:	3364      	adds	r3, #100	; 0x64
   d43ce:	4283      	cmp	r3, r0
   d43d0:	d205      	bcs.n	d43de <loop+0x1e>
      BLE.scan(scanResultCallback, NULL);
   d43d2:	f000 fd95 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43d6:	2200      	movs	r2, #0
   d43d8:	490e      	ldr	r1, [pc, #56]	; (d4414 <loop+0x54>)
   d43da:	f000 fe73 	bl	d50c4 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>
  }
  //Log.info("isadvertising: %d", BLE.advertising());
  if (not BLE.advertising()) {
   d43de:	f000 fd8f 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43e2:	f000 fe4e 	bl	d5082 <_ZNK8particle14BleLocalDevice11advertisingEv>
   d43e6:	4604      	mov	r4, r0
   d43e8:	b968      	cbnz	r0, d4406 <loop+0x46>
      Log.info("Check if MAC changed.");
   d43ea:	490b      	ldr	r1, [pc, #44]	; (d4418 <loop+0x58>)
   d43ec:	480b      	ldr	r0, [pc, #44]	; (d441c <loop+0x5c>)
   d43ee:	f7ff ff45 	bl	d427c <_ZNK5spark6Logger4infoEPKcz>
      gap_params_init();
   d43f2:	f7ff ff51 	bl	d4298 <_Z15gap_params_initv>
      advertising_init();
   d43f6:	f7ff ff79 	bl	d42ec <_Z16advertising_initv>
      BLE.advertise(&advData);
   d43fa:	f000 fd81 	bl	d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43fe:	4622      	mov	r2, r4
   d4400:	4907      	ldr	r1, [pc, #28]	; (d4420 <loop+0x60>)
   d4402:	f000 fe21 	bl	d5048 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  }
  BleAdvertisingData tempdata;
   d4406:	a801      	add	r0, sp, #4
   d4408:	f000 fc7f 	bl	d4d0a <_ZN8particle18BleAdvertisingDataC1Ev>
  //Log.info("advertise size: %d ", BLE.getAdvertisingData(&tempdata));
}
   d440c:	b00a      	add	sp, #40	; 0x28
   d440e:	bd10      	pop	{r4, pc}
   d4410:	2003e33c 	.word	0x2003e33c
   d4414:	000d418d 	.word	0x000d418d
   d4418:	000d79dc 	.word	0x000d79dc
   d441c:	2003e400 	.word	0x2003e400
   d4420:	2003e380 	.word	0x2003e380

000d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4424:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4426:	6804      	ldr	r4, [r0, #0]
   d4428:	6843      	ldr	r3, [r0, #4]
   d442a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d442c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d442e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4432:	42a6      	cmp	r6, r4
   d4434:	d004      	beq.n	d4440 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4436:	4620      	mov	r0, r4
   d4438:	f002 fd40 	bl	d6ebc <_ZN6StringD1Ev>
   d443c:	3414      	adds	r4, #20
   d443e:	e7f8      	b.n	d4432 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4440:	6828      	ldr	r0, [r5, #0]
   d4442:	f000 fb0d 	bl	d4a60 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4446:	4628      	mov	r0, r5
   d4448:	bd70      	pop	{r4, r5, r6, pc}

000d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d444a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        T* d = nullptr;
        if (n > 0) {
   d444e:	1e0f      	subs	r7, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d4450:	4606      	mov	r6, r0
        T* d = nullptr;
        if (n > 0) {
   d4452:	dd38      	ble.n	d44c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x7c>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4454:	2514      	movs	r5, #20
   d4456:	fb05 f007 	mul.w	r0, r5, r7
   d445a:	f000 faf9 	bl	d4a50 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d445e:	4680      	mov	r8, r0
   d4460:	2800      	cmp	r0, #0
   d4462:	d03b      	beq.n	d44dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x92>
                return false;
            }
            move(d, data_, data_ + size_);
   d4464:	6834      	ldr	r4, [r6, #0]
   d4466:	6873      	ldr	r3, [r6, #4]
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4468:	4284      	cmp	r4, r0
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
                return false;
            }
            move(d, data_, data_ + size_);
   d446a:	fb05 4503 	mla	r5, r5, r3, r4
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d446e:	d215      	bcs.n	d449c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x52>
   d4470:	4285      	cmp	r5, r0
   d4472:	d914      	bls.n	d449e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x54>
            // Move elements in reverse order
            --p;
            --end;
   d4474:	3d14      	subs	r5, #20
            dest += end - p - 1;
   d4476:	f1a4 0914 	sub.w	r9, r4, #20
   d447a:	1b2c      	subs	r4, r5, r4
   d447c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d447e:	45a9      	cmp	r9, r5
   d4480:	d023      	beq.n	d44ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*end));
   d4482:	b12c      	cbz	r4, d4490 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x46>
   d4484:	4629      	mov	r1, r5
   d4486:	4620      	mov	r0, r4
   d4488:	f002 fd08 	bl	d6e9c <_ZN6StringC1EOS_>
   d448c:	7c2b      	ldrb	r3, [r5, #16]
   d448e:	7423      	strb	r3, [r4, #16]
   d4490:	4628      	mov	r0, r5
   d4492:	f002 fd13 	bl	d6ebc <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4496:	3d14      	subs	r5, #20
   d4498:	3c14      	subs	r4, #20
   d449a:	e7f0      	b.n	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x34>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d449c:	d015      	beq.n	d44ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d449e:	46c1      	mov	r9, r8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d44a0:	42a5      	cmp	r5, r4
   d44a2:	d012      	beq.n	d44ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x80>
                new(dest) T(std::move(*p));
   d44a4:	f1b9 0f00 	cmp.w	r9, #0
   d44a8:	d006      	beq.n	d44b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x6e>
   d44aa:	4621      	mov	r1, r4
   d44ac:	4648      	mov	r0, r9
   d44ae:	f002 fcf5 	bl	d6e9c <_ZN6StringC1EOS_>
   d44b2:	7c23      	ldrb	r3, [r4, #16]
   d44b4:	f889 3010 	strb.w	r3, [r9, #16]
   d44b8:	4620      	mov	r0, r4
   d44ba:	f002 fcff 	bl	d6ebc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d44be:	3414      	adds	r4, #20
   d44c0:	f109 0914 	add.w	r9, r9, #20
   d44c4:	e7ec      	b.n	d44a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x56>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d44c6:	f04f 0800 	mov.w	r8, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d44ca:	6830      	ldr	r0, [r6, #0]
   d44cc:	f000 fac8 	bl	d4a60 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d44d0:	f8c6 8000 	str.w	r8, [r6]
        capacity_ = n;
   d44d4:	60b7      	str	r7, [r6, #8]
        return true;
   d44d6:	2001      	movs	r0, #1
   d44d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
   d44dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_>:
    static void copy(T* dest, const T* p, const T* end) {
        ::memcpy(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void copy(T* dest, const T* p, const T* end) {
   d44e0:	b570      	push	{r4, r5, r6, lr}
   d44e2:	4604      	mov	r4, r0
   d44e4:	460d      	mov	r5, r1
   d44e6:	4616      	mov	r6, r2
        for (; p != end; ++p, ++dest) {
   d44e8:	42b5      	cmp	r5, r6
   d44ea:	d009      	beq.n	d4500 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_+0x20>
            new(dest) T(*p);
   d44ec:	b12c      	cbz	r4, d44fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_+0x1a>
   d44ee:	4629      	mov	r1, r5
   d44f0:	4620      	mov	r0, r4
   d44f2:	f002 fd4c 	bl	d6f8e <_ZN6StringC1ERKS_>
   d44f6:	7c2b      	ldrb	r3, [r5, #16]
   d44f8:	7423      	strb	r3, [r4, #16]
        ::memcpy(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void copy(T* dest, const T* p, const T* end) {
        for (; p != end; ++p, ++dest) {
   d44fa:	3514      	adds	r5, #20
   d44fc:	3414      	adds	r4, #20
   d44fe:	e7f3      	b.n	d44e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_+0x8>
   d4500:	bd70      	pop	{r4, r5, r6, pc}

000d4502 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4502:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4504:	2300      	movs	r3, #0
   d4506:	6003      	str	r3, [r0, #0]
   d4508:	6043      	str	r3, [r0, #4]
   d450a:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d450c:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d450e:	6849      	ldr	r1, [r1, #4]
   d4510:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4512:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4514:	dd0c      	ble.n	d4530 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2e>
   d4516:	f7ff ff98 	bl	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d451a:	b148      	cbz	r0, d4530 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x2e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d451c:	e895 000a 	ldmia.w	r5, {r1, r3}
   d4520:	2214      	movs	r2, #20
   d4522:	fb02 1203 	mla	r2, r2, r3, r1
   d4526:	6820      	ldr	r0, [r4, #0]
   d4528:	f7ff ffda 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_>
        size_ = vector.size_;
   d452c:	686b      	ldr	r3, [r5, #4]
   d452e:	6063      	str	r3, [r4, #4]
    }
}
   d4530:	4620      	mov	r0, r4
   d4532:	bd38      	pop	{r3, r4, r5, pc}

000d4534 <_GLOBAL__sub_I_advData>:
   d4534:	b530      	push	{r4, r5, lr}
   d4536:	b093      	sub	sp, #76	; 0x4c

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4538:	f000 f946 	bl	d47c8 <HAL_Pin_Map>
 * Date:  April 20, 2020
 */
#include "Particle.h"
#include "config.h"

BleAdvertisingData advData;
   d453c:	4830      	ldr	r0, [pc, #192]	; (d4600 <_GLOBAL__sub_I_advData+0xcc>)
   d453e:	f000 fbe4 	bl	d4d0a <_ZN8particle18BleAdvertisingDataC1Ev>
// Stores the most recent data related to the device we're looking for
int8_t lastRSSI;
system_tick_t lastSeen = 0;

// The payload going to the cloud
String status;
   d4542:	4930      	ldr	r1, [pc, #192]	; (d4604 <_GLOBAL__sub_I_advData+0xd0>)
   d4544:	4830      	ldr	r0, [pc, #192]	; (d4608 <_GLOBAL__sub_I_advData+0xd4>)
   d4546:	f002 fd00 	bl	d6f4a <_ZN6StringC1EPK19__FlashStringHelper>
   d454a:	4a30      	ldr	r2, [pc, #192]	; (d460c <_GLOBAL__sub_I_advData+0xd8>)
   d454c:	4930      	ldr	r1, [pc, #192]	; (d4610 <_GLOBAL__sub_I_advData+0xdc>)
   d454e:	482e      	ldr	r0, [pc, #184]	; (d4608 <_GLOBAL__sub_I_advData+0xd4>)
   d4550:	f002 ff36 	bl	d73c0 <__aeabi_atexit>
        level_(level) {
}

inline spark::LogCategoryFilter::LogCategoryFilter(const char *category, LogLevel level) :
        cat_(category),
        level_(level) {
   d4554:	2401      	movs	r4, #1
   d4556:	492f      	ldr	r1, [pc, #188]	; (d4614 <_GLOBAL__sub_I_advData+0xe0>)
   d4558:	a80d      	add	r0, sp, #52	; 0x34
   d455a:	f002 fcf6 	bl	d6f4a <_ZN6StringC1EPK19__FlashStringHelper>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d455e:	2300      	movs	r3, #0
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(std::initializer_list<T> values) : Vector() {
    const size_t n = values.size();
    if (n > 0 && realloc(n)) {
   d4560:	4621      	mov	r1, r4
   d4562:	a801      	add	r0, sp, #4
   d4564:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	9302      	str	r3, [sp, #8]
   d456c:	9303      	str	r3, [sp, #12]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(std::initializer_list<T> values) : Vector() {
    const size_t n = values.size();
    if (n > 0 && realloc(n)) {
   d456e:	f7ff ff6c 	bl	d444a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d4572:	2800      	cmp	r0, #0
   d4574:	d13c      	bne.n	d45f0 <_GLOBAL__sub_I_advData+0xbc>
        Serial.begin();
        LogManager::instance()->addHandler(this);
    }

    explicit SerialLogHandler(int baud, LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4576:	f002 fe37 	bl	d71e8 <_Z16_fetch_usbserialv>
   d457a:	a901      	add	r1, sp, #4
   d457c:	4605      	mov	r5, r0
   d457e:	a804      	add	r0, sp, #16
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4580:	4c25      	ldr	r4, [pc, #148]	; (d4618 <_GLOBAL__sub_I_advData+0xe4>)
   d4582:	f7ff ffbe 	bl	d4502 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4586:	a904      	add	r1, sp, #16
   d4588:	a807      	add	r0, sp, #28
   d458a:	f7ff ffba 	bl	d4502 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d458e:	4b23      	ldr	r3, [pc, #140]	; (d461c <_GLOBAL__sub_I_advData+0xe8>)
   d4590:	6023      	str	r3, [r4, #0]
   d4592:	a907      	add	r1, sp, #28
   d4594:	a80a      	add	r0, sp, #40	; 0x28
   d4596:	f7ff ffb4 	bl	d4502 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d459a:	aa0a      	add	r2, sp, #40	; 0x28
   d459c:	2132      	movs	r1, #50	; 0x32
   d459e:	1d20      	adds	r0, r4, #4
   d45a0:	f001 ff4d 	bl	d643e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d45a4:	a80a      	add	r0, sp, #40	; 0x28
   d45a6:	f7ff ff3d 	bl	d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d45aa:	a807      	add	r0, sp, #28
   d45ac:	f7ff ff3a 	bl	d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d45b0:	4b1b      	ldr	r3, [pc, #108]	; (d4620 <_GLOBAL__sub_I_advData+0xec>)
   d45b2:	6023      	str	r3, [r4, #0]
   d45b4:	6225      	str	r5, [r4, #32]
   d45b6:	a804      	add	r0, sp, #16
   d45b8:	f7ff ff34 	bl	d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d45bc:	4b19      	ldr	r3, [pc, #100]	; (d4624 <_GLOBAL__sub_I_advData+0xf0>)
   d45be:	6023      	str	r3, [r4, #0]
        Serial.begin(baud);
   d45c0:	f002 fe12 	bl	d71e8 <_Z16_fetch_usbserialv>
   d45c4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d45c8:	f002 fdfe 	bl	d71c8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d45cc:	f001 fbe0 	bl	d5d90 <_ZN5spark10LogManager8instanceEv>
   d45d0:	4621      	mov	r1, r4
   d45d2:	f001 fec7 	bl	d6364 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

// For logging
SerialLogHandler logHandler(115200, LOG_LEVEL_ERROR, {
    { "app", LOG_LEVEL_TRACE }, // enable all app messages
});
   d45d6:	a801      	add	r0, sp, #4
   d45d8:	f7ff ff24 	bl	d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d45dc:	a80d      	add	r0, sp, #52	; 0x34
   d45de:	f002 fc6d 	bl	d6ebc <_ZN6StringD1Ev>

// The payload going to the cloud
String status;

// For logging
SerialLogHandler logHandler(115200, LOG_LEVEL_ERROR, {
   d45e2:	4a0a      	ldr	r2, [pc, #40]	; (d460c <_GLOBAL__sub_I_advData+0xd8>)
   d45e4:	4910      	ldr	r1, [pc, #64]	; (d4628 <_GLOBAL__sub_I_advData+0xf4>)
   d45e6:	4620      	mov	r0, r4
   d45e8:	f002 feea 	bl	d73c0 <__aeabi_atexit>
      advertising_init();
      BLE.advertise(&advData);
  }
  BleAdvertisingData tempdata;
  //Log.info("advertise size: %d ", BLE.getAdvertisingData(&tempdata));
}
   d45ec:	b013      	add	sp, #76	; 0x4c
   d45ee:	bd30      	pop	{r4, r5, pc}
        copy(data_, values.begin(), values.end());
   d45f0:	aa12      	add	r2, sp, #72	; 0x48
   d45f2:	a90d      	add	r1, sp, #52	; 0x34
   d45f4:	9801      	ldr	r0, [sp, #4]
   d45f6:	f7ff ff73 	bl	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4copyIS1_Li0EEEvPS1_PKS1_S7_>
        size_ = n;
   d45fa:	9402      	str	r4, [sp, #8]
   d45fc:	e7bb      	b.n	d4576 <_GLOBAL__sub_I_advData+0x42>
   d45fe:	bf00      	nop
   d4600:	2003e380 	.word	0x2003e380
   d4604:	000d7d04 	.word	0x000d7d04
   d4608:	2003e3a8 	.word	0x2003e3a8
   d460c:	2003e2f0 	.word	0x2003e2f0
   d4610:	000d6ebd 	.word	0x000d6ebd
   d4614:	000d79f2 	.word	0x000d79f2
   d4618:	2003e314 	.word	0x2003e314
   d461c:	000d7958 	.word	0x000d7958
   d4620:	000d7d44 	.word	0x000d7d44
   d4624:	000d7970 	.word	0x000d7970
   d4628:	000d4105 	.word	0x000d4105

000d462c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <hal_ble_stack_init+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	689b      	ldr	r3, [r3, #8]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030278 	.word	0x00030278

000d463c <hal_ble_gap_get_device_address>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <hal_ble_gap_get_device_address+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	69db      	ldr	r3, [r3, #28]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	00030278 	.word	0x00030278

000d464c <hal_ble_gap_get_tx_power>:
DYNALIB_FN(12, hal_ble, hal_ble_gap_set_ppcp, int(const hal_ble_conn_params_t*, void*))
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <hal_ble_gap_get_tx_power+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030278 	.word	0x00030278

000d465c <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <hal_ble_gap_set_advertising_parameters+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030278 	.word	0x00030278

000d466c <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <hal_ble_gap_get_advertising_parameters+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030278 	.word	0x00030278

000d467c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <hal_ble_gap_set_advertising_data+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030278 	.word	0x00030278

000d468c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <hal_ble_gap_set_scan_response_data+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030278 	.word	0x00030278

000d469c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <hal_ble_gap_start_advertising+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030278 	.word	0x00030278

000d46ac <hal_ble_gap_is_advertising>:
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <hal_ble_gap_is_advertising+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030278 	.word	0x00030278

000d46bc <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <hal_ble_gap_set_scan_parameters+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030278 	.word	0x00030278

000d46cc <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <hal_ble_gap_get_scan_parameters+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030278 	.word	0x00030278

000d46dc <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <hal_ble_gap_start_scan+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030278 	.word	0x00030278

000d46ec <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b03      	ldr	r3, [pc, #12]	; (d46fc <hal_ble_gap_stop_scan+0x10>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d46f6:	9301      	str	r3, [sp, #4]
   d46f8:	bd08      	pop	{r3, pc}
   d46fa:	0000      	.short	0x0000
   d46fc:	00030278 	.word	0x00030278

000d4700 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b03      	ldr	r3, [pc, #12]	; (d4710 <hal_ble_gap_disconnect+0x10>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d470a:	9301      	str	r3, [sp, #4]
   d470c:	bd08      	pop	{r3, pc}
   d470e:	0000      	.short	0x0000
   d4710:	00030278 	.word	0x00030278

000d4714 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b03      	ldr	r3, [pc, #12]	; (d4724 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d471e:	9301      	str	r3, [sp, #4]
   d4720:	bd08      	pop	{r3, pc}
   d4722:	0000      	.short	0x0000
   d4724:	00030278 	.word	0x00030278

000d4728 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <os_thread_is_current+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	689b      	ldr	r3, [r3, #8]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	00030248 	.word	0x00030248

000d4738 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <os_thread_join+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	691b      	ldr	r3, [r3, #16]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	00030248 	.word	0x00030248

000d4748 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <os_thread_cleanup+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	695b      	ldr	r3, [r3, #20]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	00030248 	.word	0x00030248

000d4758 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <os_mutex_recursive_create+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	00030248 	.word	0x00030248

000d4768 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <os_mutex_recursive_destroy+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	00030248 	.word	0x00030248

000d4778 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <os_mutex_recursive_lock+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	00030248 	.word	0x00030248

000d4788 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <os_mutex_recursive_unlock+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	00030248 	.word	0x00030248

000d4798 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <HAL_RNG_GetRandomNumber+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	685b      	ldr	r3, [r3, #4]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030218 	.word	0x00030218

000d47a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <HAL_Delay_Microseconds+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	68db      	ldr	r3, [r3, #12]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030218 	.word	0x00030218

000d47b8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	695b      	ldr	r3, [r3, #20]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030218 	.word	0x00030218

000d47c8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <HAL_Pin_Map+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	681b      	ldr	r3, [r3, #0]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	0003022c 	.word	0x0003022c

000d47d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <inet_inet_ntop+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	695b      	ldr	r3, [r3, #20]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030264 	.word	0x00030264

000d47e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <netdb_freeaddrinfo+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	689b      	ldr	r3, [r3, #8]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030268 	.word	0x00030268

000d47f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <netdb_getaddrinfo+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	68db      	ldr	r3, [r3, #12]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030268 	.word	0x00030268

000d4808 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <HAL_USART_Init+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	681b      	ldr	r3, [r3, #0]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	0003023c 	.word	0x0003023c

000d4818 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_USART_End+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	689b      	ldr	r3, [r3, #8]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	0003023c 	.word	0x0003023c

000d4828 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_USART_Write_Data+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	68db      	ldr	r3, [r3, #12]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	0003023c 	.word	0x0003023c

000d4838 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_USART_Available_Data+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	691b      	ldr	r3, [r3, #16]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	0003023c 	.word	0x0003023c

000d4848 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_USART_Read_Data+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	695b      	ldr	r3, [r3, #20]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003023c 	.word	0x0003023c

000d4858 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_USART_Peek_Data+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	699b      	ldr	r3, [r3, #24]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003023c 	.word	0x0003023c

000d4868 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_USART_Flush_Data+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	69db      	ldr	r3, [r3, #28]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003023c 	.word	0x0003023c

000d4878 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_USART_Available_Data_For_Write+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003023c 	.word	0x0003023c

000d4888 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_USART_BeginConfig+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003023c 	.word	0x0003023c

000d4898 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_USB_USART_Init+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	681b      	ldr	r3, [r3, #0]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003024c 	.word	0x0003024c

000d48a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_USB_USART_Begin+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	685b      	ldr	r3, [r3, #4]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003024c 	.word	0x0003024c

000d48b8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_USB_USART_End+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	689b      	ldr	r3, [r3, #8]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	0003024c 	.word	0x0003024c

000d48c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_USB_USART_Available_Data+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	691b      	ldr	r3, [r3, #16]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	0003024c 	.word	0x0003024c

000d48d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	695b      	ldr	r3, [r3, #20]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	0003024c 	.word	0x0003024c

000d48e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_USB_USART_Receive_Data+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	699b      	ldr	r3, [r3, #24]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	0003024c 	.word	0x0003024c

000d48f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_USB_USART_Send_Data+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	69db      	ldr	r3, [r3, #28]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	0003024c 	.word	0x0003024c

000d4908 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <HAL_USB_USART_Flush_Data+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6a1b      	ldr	r3, [r3, #32]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	0003024c 	.word	0x0003024c

000d4918 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <panic_+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030260 	.word	0x00030260

000d4928 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <log_message+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030260 	.word	0x00030260

000d4938 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <log_message_v+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030260 	.word	0x00030260

000d4948 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <log_level_name+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030260 	.word	0x00030260

000d4958 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <log_set_callbacks+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030260 	.word	0x00030260

000d4968 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <set_system_mode+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	685b      	ldr	r3, [r3, #4]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030220 	.word	0x00030220

000d4978 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b03      	ldr	r3, [pc, #12]	; (d4988 <system_ctrl_set_app_request_handler+0x10>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4982:	9301      	str	r3, [sp, #4]
   d4984:	bd08      	pop	{r3, pc}
   d4986:	0000      	.short	0x0000
   d4988:	00030220 	.word	0x00030220

000d498c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b03      	ldr	r3, [pc, #12]	; (d499c <system_ctrl_set_result+0x10>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4996:	9301      	str	r3, [sp, #4]
   d4998:	bd08      	pop	{r3, pc}
   d499a:	0000      	.short	0x0000
   d499c:	00030220 	.word	0x00030220

000d49a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <spark_set_random_seed_from_cloud_handler+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030244 	.word	0x00030244

000d49b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <network_connect+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	685b      	ldr	r3, [r3, #4]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030240 	.word	0x00030240

000d49c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <network_connecting+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	689b      	ldr	r3, [r3, #8]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030240 	.word	0x00030240

000d49d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <network_disconnect+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	68db      	ldr	r3, [r3, #12]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030240 	.word	0x00030240

000d49e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <network_ready+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	691b      	ldr	r3, [r3, #16]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030240 	.word	0x00030240

000d49f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <network_on+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	695b      	ldr	r3, [r3, #20]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030240 	.word	0x00030240

000d4a00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <network_off+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	699b      	ldr	r3, [r3, #24]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030240 	.word	0x00030240

000d4a10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <network_listen+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	69db      	ldr	r3, [r3, #28]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030240 	.word	0x00030240

000d4a20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <network_listening+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6a1b      	ldr	r3, [r3, #32]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030240 	.word	0x00030240

000d4a30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <network_set_listen_timeout+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030240 	.word	0x00030240

000d4a40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_get_listen_timeout+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <malloc+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	681b      	ldr	r3, [r3, #0]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	0003021c 	.word	0x0003021c

000d4a60 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <free+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	685b      	ldr	r3, [r3, #4]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	0003021c 	.word	0x0003021c

000d4a70 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <realloc+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	689b      	ldr	r3, [r3, #8]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	0003021c 	.word	0x0003021c

000d4a80 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <sprintf+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	68db      	ldr	r3, [r3, #12]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003021c 	.word	0x0003021c

000d4a90 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <vsnprintf+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003021c 	.word	0x0003021c

000d4aa0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4aa0:	4770      	bx	lr

000d4aa2 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4aa2:	2000      	movs	r0, #0
   d4aa4:	4770      	bx	lr

000d4aa6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4aa6:	b510      	push	{r4, lr}
   d4aa8:	2114      	movs	r1, #20
   d4aaa:	4604      	mov	r4, r0
   d4aac:	f002 fc8d 	bl	d73ca <_ZdlPvj>
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	bd10      	pop	{r4, pc}

000d4ab4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4ab4:	f7ff baf1 	b.w	d409a <_ZdlPv>

000d4ab8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4ab8:	b510      	push	{r4, lr}
   d4aba:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4abc:	6800      	ldr	r0, [r0, #0]
   d4abe:	b108      	cbz	r0, d4ac4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4ac0:	f7ff fe52 	bl	d4768 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	bd10      	pop	{r4, pc}

000d4ac8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4ac8:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4aca:	200a      	movs	r0, #10
   d4acc:	4a02      	ldr	r2, [pc, #8]	; (d4ad8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d4ace:	2100      	movs	r1, #0
   d4ad0:	f7ff ff22 	bl	d4918 <panic_>
    }
}
   d4ad4:	bd08      	pop	{r3, pc}
   d4ad6:	bf00      	nop
   d4ad8:	000d47a9 	.word	0x000d47a9

000d4adc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4adc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4ade:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4ae0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4ae2:	689b      	ldr	r3, [r3, #8]
   d4ae4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ae6:	68a3      	ldr	r3, [r4, #8]
   d4ae8:	3b01      	subs	r3, #1
   d4aea:	60a3      	str	r3, [r4, #8]
   d4aec:	b92b      	cbnz	r3, d4afa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4aee:	6823      	ldr	r3, [r4, #0]
   d4af0:	4620      	mov	r0, r4
   d4af2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4af8:	4718      	bx	r3
   d4afa:	bd10      	pop	{r4, pc}

000d4afc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4afc:	b510      	push	{r4, lr}
            locked_(false) {
   d4afe:	2300      	movs	r3, #0
   d4b00:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4b02:	4b04      	ldr	r3, [pc, #16]	; (d4b14 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4b04:	4604      	mov	r4, r0
   d4b06:	6818      	ldr	r0, [r3, #0]
   d4b08:	f7ff fe36 	bl	d4778 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4b0c:	2301      	movs	r3, #1
   d4b0e:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4b10:	4620      	mov	r0, r4
   d4b12:	bd10      	pop	{r4, pc}
   d4b14:	2003e3c0 	.word	0x2003e3c0

000d4b18 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4b18:	b510      	push	{r4, lr}
        if (locked_) {
   d4b1a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4b1c:	4604      	mov	r4, r0
        if (locked_) {
   d4b1e:	b11b      	cbz	r3, d4b28 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4b20:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4b22:	6818      	ldr	r0, [r3, #0]
   d4b24:	f7ff fe30 	bl	d4788 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4b28:	4620      	mov	r0, r4
   d4b2a:	bd10      	pop	{r4, pc}
   d4b2c:	2003e3c0 	.word	0x2003e3c0

000d4b30 <_ZN8particle10BleAddress4typeENS_14BleAddressTypeE>:
BleAddress::BleAddress(const String& address, BleAddressType type) {
    set(address, type);
}

int BleAddress::type(BleAddressType type) {
    address_.addr_type = static_cast<ble_sig_addr_type_t>(type);
   d4b30:	7181      	strb	r1, [r0, #6]
    return SYSTEM_ERROR_NONE;
}
   d4b32:	2000      	movs	r0, #0
   d4b34:	4770      	bx	lr

000d4b36 <_ZNK8particle10BleAddressixEh>:
    buf[len++] = '\0';
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
   d4b36:	2905      	cmp	r1, #5
        return 0;
    }
    return address_.addr[i];
   d4b38:	bf94      	ite	ls
   d4b3a:	5c40      	ldrbls	r0, [r0, r1]
    return len;
}

uint8_t BleAddress::operator[](uint8_t i) const {
    if (i >= BLE_SIG_ADDR_LEN) {
        return 0;
   d4b3c:	2000      	movhi	r0, #0
    }
    return address_.addr[i];
}
   d4b3e:	4770      	bx	lr

000d4b40 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4b40:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4b42:	7982      	ldrb	r2, [r0, #6]
   d4b44:	798b      	ldrb	r3, [r1, #6]
   d4b46:	429a      	cmp	r2, r3
   d4b48:	d106      	bne.n	d4b58 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4b4a:	2206      	movs	r2, #6
   d4b4c:	f002 fdae 	bl	d76ac <memcmp>
   d4b50:	fab0 f080 	clz	r0, r0
   d4b54:	0940      	lsrs	r0, r0, #5
   d4b56:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4b58:	2000      	movs	r0, #0
}
   d4b5a:	bd08      	pop	{r3, pc}

000d4b5c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4b5c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d4b5e:	2301      	movs	r3, #1
   d4b60:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4b62:	4b05      	ldr	r3, [pc, #20]	; (d4b78 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4b64:	4602      	mov	r2, r0
   d4b66:	f103 0110 	add.w	r1, r3, #16
   d4b6a:	f853 4b04 	ldr.w	r4, [r3], #4
   d4b6e:	f842 4b04 	str.w	r4, [r2], #4
   d4b72:	428b      	cmp	r3, r1
   d4b74:	d1f9      	bne.n	d4b6a <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4b76:	bd10      	pop	{r4, pc}
   d4b78:	000d7bb4 	.word	0x000d7bb4

000d4b7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4b7c:	b510      	push	{r4, lr}
    if (uuid128) {
   d4b7e:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4b80:	4604      	mov	r4, r0
    if (uuid128) {
   d4b82:	b1b9      	cbz	r1, d4bb4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d4b84:	2a01      	cmp	r2, #1
   d4b86:	d109      	bne.n	d4b9c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4b88:	4603      	mov	r3, r0
   d4b8a:	f101 0210 	add.w	r2, r1, #16
   d4b8e:	f851 0b04 	ldr.w	r0, [r1], #4
   d4b92:	f843 0b04 	str.w	r0, [r3], #4
   d4b96:	4291      	cmp	r1, r2
   d4b98:	d1f9      	bne.n	d4b8e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d4b9a:	e008      	b.n	d4bae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d4b9c:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d4b9e:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d4ba0:	5c98      	ldrb	r0, [r3, r2]
   d4ba2:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4ba6:	3a01      	subs	r2, #1
   d4ba8:	b2d2      	uxtb	r2, r2
   d4baa:	2aff      	cmp	r2, #255	; 0xff
   d4bac:	d1f8      	bne.n	d4ba0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d4bae:	2301      	movs	r3, #1
   d4bb0:	6123      	str	r3, [r4, #16]
   d4bb2:	e002      	b.n	d4bba <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4bb4:	2210      	movs	r2, #16
   d4bb6:	f002 fdae 	bl	d7716 <memset>
    }
}
   d4bba:	4620      	mov	r0, r4
   d4bbc:	bd10      	pop	{r4, pc}

000d4bbe <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d4bbe:	b538      	push	{r3, r4, r5, lr}
   d4bc0:	4604      	mov	r4, r0
   d4bc2:	460d      	mov	r5, r1
        : BleUuid() {
   d4bc4:	f7ff ffca 	bl	d4b5c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d4bc8:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4bca:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4bcc:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d4bce:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4bd0:	7365      	strb	r5, [r4, #13]
}
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	bd38      	pop	{r3, r4, r5, pc}

000d4bd6 <_ZNK8particle7BleUuid7shortedEv>:
    }
    return uuid;
}

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4bd6:	7b42      	ldrb	r2, [r0, #13]
   d4bd8:	7b00      	ldrb	r0, [r0, #12]
}
   d4bda:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4bde:	4770      	bx	lr

000d4be0 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4be0:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4be2:	690b      	ldr	r3, [r1, #16]
   d4be4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4be6:	f101 0210 	add.w	r2, r1, #16
   d4bea:	4603      	mov	r3, r0
   d4bec:	f851 4b04 	ldr.w	r4, [r1], #4
   d4bf0:	f843 4b04 	str.w	r4, [r3], #4
   d4bf4:	4291      	cmp	r1, r2
   d4bf6:	d1f9      	bne.n	d4bec <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d4bf8:	bd10      	pop	{r4, pc}

000d4bfa <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4bfa:	b510      	push	{r4, lr}
   d4bfc:	b086      	sub	sp, #24
   d4bfe:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4c00:	2201      	movs	r2, #1
   d4c02:	a801      	add	r0, sp, #4
   d4c04:	f7ff ffba 	bl	d4b7c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4c08:	a901      	add	r1, sp, #4
   d4c0a:	4620      	mov	r0, r4
   d4c0c:	f7ff ffe8 	bl	d4be0 <_ZN8particle7BleUuidaSERKS0_>
}
   d4c10:	b006      	add	sp, #24
   d4c12:	bd10      	pop	{r4, pc}

000d4c14 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d4c14:	b510      	push	{r4, lr}
   d4c16:	b086      	sub	sp, #24
   d4c18:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d4c1a:	a801      	add	r0, sp, #4
   d4c1c:	f7ff ffcf 	bl	d4bbe <_ZN8particle7BleUuidC1Et>
   d4c20:	a901      	add	r1, sp, #4
   d4c22:	4620      	mov	r0, r4
   d4c24:	f7ff ffdc 	bl	d4be0 <_ZN8particle7BleUuidaSERKS0_>
}
   d4c28:	b006      	add	sp, #24
   d4c2a:	bd10      	pop	{r4, pc}

000d4c2c <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d4c2c:	b538      	push	{r3, r4, r5, lr}
   d4c2e:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d4c30:	b101      	cbz	r1, d4c34 <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d4c32:	b912      	cbnz	r2, d4c3a <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d4c34:	2000      	movs	r0, #0
   d4c36:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d4c38:	bd38      	pop	{r3, r4, r5, pc}
   d4c3a:	2a1f      	cmp	r2, #31
   d4c3c:	bf28      	it	cs
   d4c3e:	221f      	movcs	r2, #31
   d4c40:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d4c42:	f002 fd42 	bl	d76ca <memcpy>
    selfLen_ = len;
   d4c46:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d4c48:	4620      	mov	r0, r4
}
   d4c4a:	bd38      	pop	{r3, r4, r5, pc}

000d4c4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4c4e:	b18b      	cbz	r3, d4c74 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4c50:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4c52:	1ce5      	adds	r5, r4, #3
   d4c54:	428d      	cmp	r5, r1
   d4c56:	d80f      	bhi.n	d4c78 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4c58:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d4c5a:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d4c5c:	5d87      	ldrb	r7, [r0, r6]
   d4c5e:	4297      	cmp	r7, r2
   d4c60:	d105      	bne.n	d4c6e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4c62:	442e      	add	r6, r5
   d4c64:	42b1      	cmp	r1, r6
   d4c66:	d307      	bcc.n	d4c78 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d4c68:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d4c6a:	1c68      	adds	r0, r5, #1
                return adsLen;
   d4c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4c6e:	3501      	adds	r5, #1
   d4c70:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4c72:	e7ee      	b.n	d4c52 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4c74:	4618      	mov	r0, r3
   d4c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c78:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c7c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4c7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4c80:	4604      	mov	r4, r0
   d4c82:	460e      	mov	r6, r1
   d4c84:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d4c86:	4617      	mov	r7, r2
   d4c88:	2a00      	cmp	r2, #0
   d4c8a:	d03a      	beq.n	d4d02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d4c8c:	460a      	mov	r2, r1
   d4c8e:	ab01      	add	r3, sp, #4
   d4c90:	6a01      	ldr	r1, [r0, #32]
   d4c92:	f7ff ffdb 	bl	d4c4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d4c96:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d4c9a:	6a22      	ldr	r2, [r4, #32]
   d4c9c:	bb03      	cbnz	r3, d4ce0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d4c9e:	b1f8      	cbz	r0, d4ce0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4ca0:	1c96      	adds	r6, r2, #2
   d4ca2:	442e      	add	r6, r5
   d4ca4:	1a36      	subs	r6, r6, r0
   d4ca6:	2e1f      	cmp	r6, #31
   d4ca8:	d82b      	bhi.n	d4d02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4caa:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d4cae:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4cb2:	ebc8 0202 	rsb	r2, r8, r2
   d4cb6:	1a12      	subs	r2, r2, r0
   d4cb8:	eb00 0108 	add.w	r1, r0, r8
   d4cbc:	eb05 0009 	add.w	r0, r5, r9
   d4cc0:	b292      	uxth	r2, r2
   d4cc2:	4421      	add	r1, r4
   d4cc4:	4420      	add	r0, r4
   d4cc6:	f002 fd0b 	bl	d76e0 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d4cca:	1c6b      	adds	r3, r5, #1
   d4ccc:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d4cd0:	462a      	mov	r2, r5
   d4cd2:	4639      	mov	r1, r7
   d4cd4:	eb04 0009 	add.w	r0, r4, r9
   d4cd8:	f002 fcf7 	bl	d76ca <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d4cdc:	6226      	str	r6, [r4, #32]
   d4cde:	e010      	b.n	d4d02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4ce0:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4ce2:	182b      	adds	r3, r5, r0
   d4ce4:	2b1f      	cmp	r3, #31
   d4ce6:	d80c      	bhi.n	d4d02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d4ce8:	1c6b      	adds	r3, r5, #1
   d4cea:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4cec:	4422      	add	r2, r4
   d4cee:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4cf0:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4cf2:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4cf4:	4420      	add	r0, r4
   d4cf6:	462a      	mov	r2, r5
   d4cf8:	f002 fce7 	bl	d76ca <memcpy>
        selfLen_ += len;
   d4cfc:	6a22      	ldr	r2, [r4, #32]
   d4cfe:	442a      	add	r2, r5
   d4d00:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4d02:	6a20      	ldr	r0, [r4, #32]
}
   d4d04:	b003      	add	sp, #12
   d4d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4d0a <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d4d0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4d0c:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4d0e:	4603      	mov	r3, r0
   d4d10:	f100 021f 	add.w	r2, r0, #31
   d4d14:	2000      	movs	r0, #0
   d4d16:	f803 0b01 	strb.w	r0, [r3], #1
   d4d1a:	4293      	cmp	r3, r2
   d4d1c:	f04f 0100 	mov.w	r1, #0
   d4d20:	d1f9      	bne.n	d4d16 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4d22:	aa04      	add	r2, sp, #16
   d4d24:	2306      	movs	r3, #6
   d4d26:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4d2a:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d4d2c:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4d2e:	9100      	str	r1, [sp, #0]
   d4d30:	4620      	mov	r0, r4
   d4d32:	4619      	mov	r1, r3
   d4d34:	f7ff ffa2 	bl	d4c7c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d4d38:	4620      	mov	r0, r4
   d4d3a:	b004      	add	sp, #16
   d4d3c:	bd10      	pop	{r4, pc}

000d4d3e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4d40:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4d42:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4d44:	ab01      	add	r3, sp, #4
   d4d46:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4d48:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4d4a:	f7ff ff7f 	bl	d4c4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4d4e:	4605      	mov	r5, r0
   d4d50:	b178      	cbz	r0, d4d72 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4d52:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4d54:	6a22      	ldr	r2, [r4, #32]
   d4d56:	1829      	adds	r1, r5, r0
   d4d58:	1a12      	subs	r2, r2, r0
   d4d5a:	1b52      	subs	r2, r2, r5
   d4d5c:	4421      	add	r1, r4
   d4d5e:	4420      	add	r0, r4
   d4d60:	f002 fcb3 	bl	d76ca <memcpy>
        selfLen_ -= len;
   d4d64:	6a23      	ldr	r3, [r4, #32]
   d4d66:	1b5d      	subs	r5, r3, r5
   d4d68:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d4d6a:	4631      	mov	r1, r6
   d4d6c:	4620      	mov	r0, r4
   d4d6e:	f7ff ffe6 	bl	d4d3e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4d72:	b002      	add	sp, #8
   d4d74:	bd70      	pop	{r4, r5, r6, pc}

000d4d76 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d4d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4d7a:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d4d7c:	b085      	sub	sp, #20
   d4d7e:	4606      	mov	r6, r0
   d4d80:	4689      	mov	r9, r1
   d4d82:	4617      	mov	r7, r2
   d4d84:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d4d86:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d4d88:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4d8c:	6a31      	ldr	r1, [r6, #32]
   d4d8e:	428d      	cmp	r5, r1
   d4d90:	d22a      	bcs.n	d4de8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d4d92:	ab03      	add	r3, sp, #12
   d4d94:	464a      	mov	r2, r9
   d4d96:	1b49      	subs	r1, r1, r5
   d4d98:	1970      	adds	r0, r6, r5
   d4d9a:	f7ff ff57 	bl	d4c4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d4d9e:	4683      	mov	fp, r0
   d4da0:	b310      	cbz	r0, d4de8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d4da2:	4554      	cmp	r4, sl
   d4da4:	d220      	bcs.n	d4de8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d4da6:	2804      	cmp	r0, #4
   d4da8:	9903      	ldr	r1, [sp, #12]
   d4daa:	d10c      	bne.n	d4dc6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d4dac:	4429      	add	r1, r5
   d4dae:	1872      	adds	r2, r6, r1
   d4db0:	1c63      	adds	r3, r4, #1
   d4db2:	78d1      	ldrb	r1, [r2, #3]
   d4db4:	7892      	ldrb	r2, [r2, #2]
   d4db6:	9301      	str	r3, [sp, #4]
   d4db8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d4dbc:	fb08 7004 	mla	r0, r8, r4, r7
   d4dc0:	f7ff ff28 	bl	d4c14 <_ZN8particle7BleUuidaSEt>
   d4dc4:	e00a      	b.n	d4ddc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d4dc6:	2812      	cmp	r0, #18
   d4dc8:	d10a      	bne.n	d4de0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d4dca:	3102      	adds	r1, #2
   d4dcc:	4429      	add	r1, r5
   d4dce:	1c63      	adds	r3, r4, #1
   d4dd0:	4431      	add	r1, r6
   d4dd2:	fb08 7004 	mla	r0, r8, r4, r7
   d4dd6:	9301      	str	r3, [sp, #4]
   d4dd8:	f7ff ff0f 	bl	d4bfa <_ZN8particle7BleUuidaSEPKh>
   d4ddc:	9b01      	ldr	r3, [sp, #4]
   d4dde:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d4de0:	9b03      	ldr	r3, [sp, #12]
   d4de2:	445b      	add	r3, fp
   d4de4:	441d      	add	r5, r3
   d4de6:	e7d1      	b.n	d4d8c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d4de8:	4620      	mov	r0, r4
   d4dea:	b005      	add	sp, #20
   d4dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4df0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4df4:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4df6:	460d      	mov	r5, r1
   d4df8:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4dfa:	460a      	mov	r2, r1
   d4dfc:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d4dfe:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4e00:	f7ff ffb9 	bl	d4d76 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d4e04:	f04f 0814 	mov.w	r8, #20
   d4e08:	1a33      	subs	r3, r6, r0
   d4e0a:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4e0e:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d4e10:	2103      	movs	r1, #3
   d4e12:	4638      	mov	r0, r7
   d4e14:	f7ff ffaf 	bl	d4d76 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d4e18:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d4e1a:	1b33      	subs	r3, r6, r4
   d4e1c:	fb08 5204 	mla	r2, r8, r4, r5
   d4e20:	2106      	movs	r1, #6
   d4e22:	4638      	mov	r0, r7
   d4e24:	f7ff ffa7 	bl	d4d76 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d4e28:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d4e2a:	1b33      	subs	r3, r6, r4
   d4e2c:	fb08 5204 	mla	r2, r8, r4, r5
   d4e30:	2107      	movs	r1, #7
   d4e32:	4638      	mov	r0, r7
   d4e34:	f7ff ff9f 	bl	d4d76 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d4e38:	4420      	add	r0, r4
   d4e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4e3e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d4e3e:	b510      	push	{r4, lr}
   d4e40:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4e42:	69c2      	ldr	r2, [r0, #28]
   d4e44:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d4e48:	4293      	cmp	r3, r2
   d4e4a:	4618      	mov	r0, r3
   d4e4c:	d006      	beq.n	d4e5c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d4e4e:	6804      	ldr	r4, [r0, #0]
   d4e50:	8824      	ldrh	r4, [r4, #0]
   d4e52:	428c      	cmp	r4, r1
   d4e54:	f103 0308 	add.w	r3, r3, #8
   d4e58:	d1f6      	bne.n	d4e48 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d4e5a:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d4e5c:	2000      	movs	r0, #0
    }
   d4e5e:	bd10      	pop	{r4, pc}

000d4e60 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d4e60:	b510      	push	{r4, lr}
    return impl()->address();
   d4e62:	680a      	ldr	r2, [r1, #0]
   d4e64:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d4e68:	6003      	str	r3, [r0, #0]
   d4e6a:	6853      	ldr	r3, [r2, #4]
   d4e6c:	6043      	str	r3, [r0, #4]
}
   d4e6e:	bd10      	pop	{r4, pc}

000d4e70 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4e72:	6802      	ldr	r2, [r0, #0]
   d4e74:	680b      	ldr	r3, [r1, #0]
   d4e76:	8812      	ldrh	r2, [r2, #0]
   d4e78:	881b      	ldrh	r3, [r3, #0]
   d4e7a:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d4e7c:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d4e7e:	d10c      	bne.n	d4e9a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d4e80:	4601      	mov	r1, r0
   d4e82:	4668      	mov	r0, sp
   d4e84:	f7ff ffec 	bl	d4e60 <_ZNK8particle13BlePeerDevice7addressEv>
   d4e88:	4621      	mov	r1, r4
   d4e8a:	a802      	add	r0, sp, #8
   d4e8c:	f7ff ffe8 	bl	d4e60 <_ZNK8particle13BlePeerDevice7addressEv>
   d4e90:	a902      	add	r1, sp, #8
   d4e92:	4668      	mov	r0, sp
   d4e94:	f7ff fe54 	bl	d4b40 <_ZNK8particle10BleAddresseqERKS0_>
   d4e98:	b900      	cbnz	r0, d4e9c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d4e9a:	2000      	movs	r0, #0
}
   d4e9c:	b004      	add	sp, #16
   d4e9e:	bd10      	pop	{r4, pc}

000d4ea0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4ea0:	b510      	push	{r4, lr}
   d4ea2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4ea4:	2034      	movs	r0, #52	; 0x34
   d4ea6:	f7ff f8f6 	bl	d4096 <_Znwj>
   d4eaa:	4601      	mov	r1, r0
   d4eac:	b168      	cbz	r0, d4eca <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4eae:	2300      	movs	r3, #0
   d4eb0:	6003      	str	r3, [r0, #0]
   d4eb2:	6043      	str	r3, [r0, #4]
   d4eb4:	6083      	str	r3, [r0, #8]
   d4eb6:	60c3      	str	r3, [r0, #12]
   d4eb8:	6103      	str	r3, [r0, #16]
   d4eba:	6143      	str	r3, [r0, #20]
   d4ebc:	6183      	str	r3, [r0, #24]
   d4ebe:	61c3      	str	r3, [r0, #28]
   d4ec0:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d4ec2:	6243      	str	r3, [r0, #36]	; 0x24
   d4ec4:	6283      	str	r3, [r0, #40]	; 0x28
   d4ec6:	62c3      	str	r3, [r0, #44]	; 0x2c
   d4ec8:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4eca:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d4ecc:	b919      	cbnz	r1, d4ed6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d4ece:	4a0a      	ldr	r2, [pc, #40]	; (d4ef8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4ed0:	200a      	movs	r0, #10
   d4ed2:	f7ff fd21 	bl	d4918 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4ed6:	2000      	movs	r0, #0
   d4ed8:	f7ff fba8 	bl	d462c <hal_ble_stack_init>
   d4edc:	b120      	cbz	r0, d4ee8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d4ede:	4a06      	ldr	r2, [pc, #24]	; (d4ef8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d4ee0:	2100      	movs	r1, #0
   d4ee2:	200a      	movs	r0, #10
   d4ee4:	f7ff fd18 	bl	d4918 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d4ee8:	2200      	movs	r2, #0
   d4eea:	6821      	ldr	r1, [r4, #0]
   d4eec:	4803      	ldr	r0, [pc, #12]	; (d4efc <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d4eee:	f7ff fc11 	bl	d4714 <hal_ble_set_callback_on_periph_link_events>
}
   d4ef2:	4620      	mov	r0, r4
   d4ef4:	bd10      	pop	{r4, pc}
   d4ef6:	bf00      	nop
   d4ef8:	000d47a9 	.word	0x000d47a9
   d4efc:	000d53b1 	.word	0x000d53b1

000d4f00 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4f00:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4f02:	4c0a      	ldr	r4, [pc, #40]	; (d4f2c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4f04:	6823      	ldr	r3, [r4, #0]
   d4f06:	07db      	lsls	r3, r3, #31
   d4f08:	d40e      	bmi.n	d4f28 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4f0a:	4620      	mov	r0, r4
   d4f0c:	f7ff f8d4 	bl	d40b8 <__cxa_guard_acquire>
   d4f10:	b150      	cbz	r0, d4f28 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4f12:	4807      	ldr	r0, [pc, #28]	; (d4f30 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4f14:	f7ff ffc4 	bl	d4ea0 <_ZN8particle14BleLocalDeviceC1Ev>
   d4f18:	4620      	mov	r0, r4
   d4f1a:	f7ff f8d2 	bl	d40c2 <__cxa_guard_release>
   d4f1e:	4a05      	ldr	r2, [pc, #20]	; (d4f34 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4f20:	4905      	ldr	r1, [pc, #20]	; (d4f38 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4f22:	4803      	ldr	r0, [pc, #12]	; (d4f30 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4f24:	f002 fa4c 	bl	d73c0 <__aeabi_atexit>
    return instance;
}
   d4f28:	4801      	ldr	r0, [pc, #4]	; (d4f30 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4f2a:	bd10      	pop	{r4, pc}
   d4f2c:	2003e3bc 	.word	0x2003e3bc
   d4f30:	2003e3b8 	.word	0x2003e3b8
   d4f34:	2003e2f0 	.word	0x2003e2f0
   d4f38:	000d5199 	.word	0x000d5199

000d4f3c <_ZNK8particle14BleLocalDevice7addressEv>:
int BleLocalDevice::setAddress(const String& address, BleAddressType type) const {
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
   d4f3c:	b513      	push	{r0, r1, r4, lr}
   d4f3e:	4604      	mov	r4, r0
    hal_ble_addr_t halAddr = {};
   d4f40:	2100      	movs	r1, #0
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d4f42:	4668      	mov	r0, sp
    BleAddress addr(address, type);
    return setAddress(addr);
}

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
   d4f44:	9100      	str	r1, [sp, #0]
   d4f46:	9101      	str	r1, [sp, #4]
    hal_ble_gap_get_device_address(&halAddr, nullptr);
   d4f48:	f7ff fb78 	bl	d463c <hal_ble_gap_get_device_address>
        : address_{} {
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}

BleAddress::BleAddress(const hal_ble_addr_t& addr) {
    address_ = addr;
   d4f4c:	466b      	mov	r3, sp
   d4f4e:	cb03      	ldmia	r3!, {r0, r1}
   d4f50:	6020      	str	r0, [r4, #0]

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
    hal_ble_gap_get_device_address(&halAddr, nullptr);
    return BleAddress(halAddr);
}
   d4f52:	4620      	mov	r0, r4
        : address_{} {
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}

BleAddress::BleAddress(const hal_ble_addr_t& addr) {
    address_ = addr;
   d4f54:	6061      	str	r1, [r4, #4]

BleAddress BleLocalDevice::address() const {
    hal_ble_addr_t halAddr = {};
    hal_ble_gap_get_device_address(&halAddr, nullptr);
    return BleAddress(halAddr);
}
   d4f56:	b002      	add	sp, #8
   d4f58:	bd10      	pop	{r4, pc}

000d4f5a <_ZNK8particle14BleLocalDevice7txPowerEPa>:
int BleLocalDevice::setTxPower(int8_t txPower) const {
    WiringBleLock lk;
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}

int BleLocalDevice::txPower(int8_t* txPower) const {
   d4f5a:	b513      	push	{r0, r1, r4, lr}
   d4f5c:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4f5e:	a801      	add	r0, sp, #4
   d4f60:	f7ff fdcc 	bl	d4afc <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_get_tx_power(txPower, nullptr);
   d4f64:	2100      	movs	r1, #0
   d4f66:	4620      	mov	r0, r4
   d4f68:	f7ff fb70 	bl	d464c <hal_ble_gap_get_tx_power>
   d4f6c:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_set_tx_power(txPower, nullptr);
}

int BleLocalDevice::txPower(int8_t* txPower) const {
    WiringBleLock lk;
   d4f6e:	a801      	add	r0, sp, #4
   d4f70:	f7ff fdd2 	bl	d4b18 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_get_tx_power(txPower, nullptr);
}
   d4f74:	4620      	mov	r0, r4
   d4f76:	b002      	add	sp, #8
   d4f78:	bd10      	pop	{r4, pc}

000d4f7a <_ZNK8particle14BleLocalDevice21setAdvertisingTimeoutEt>:
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
   d4f7a:	b530      	push	{r4, r5, lr}
   d4f7c:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4f7e:	2400      	movs	r4, #0
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d4f80:	4668      	mov	r0, sp
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
   d4f82:	460d      	mov	r5, r1
    WiringBleLock lk;
   d4f84:	f7ff fdba 	bl	d4afc <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4f88:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4f8a:	4621      	mov	r1, r4
   d4f8c:	a801      	add	r0, sp, #4
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4f8e:	9401      	str	r4, [sp, #4]
   d4f90:	9402      	str	r4, [sp, #8]
   d4f92:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4f94:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4f98:	f7ff fb68 	bl	d466c <hal_ble_gap_get_advertising_parameters>
   d4f9c:	2800      	cmp	r0, #0
   d4f9e:	db05      	blt.n	d4fac <_ZNK8particle14BleLocalDevice21setAdvertisingTimeoutEt+0x32>
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4fa0:	4621      	mov	r1, r4
   d4fa2:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
   d4fa4:	f8ad 500a 	strh.w	r5, [sp, #10]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4fa8:	f7ff fb58 	bl	d465c <hal_ble_gap_set_advertising_parameters>
   d4fac:	4604      	mov	r4, r0
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d4fae:	4668      	mov	r0, sp
   d4fb0:	f7ff fdb2 	bl	d4b18 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d4fb4:	4620      	mov	r0, r4
   d4fb6:	b005      	add	sp, #20
   d4fb8:	bd30      	pop	{r4, r5, pc}

000d4fba <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE>:

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d4fba:	b530      	push	{r4, r5, lr}
   d4fbc:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4fbe:	2400      	movs	r4, #0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d4fc0:	4668      	mov	r0, sp
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
   d4fc2:	460d      	mov	r5, r1
    WiringBleLock lk;
   d4fc4:	f7ff fd9a 	bl	d4afc <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4fc8:	230c      	movs	r3, #12
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4fca:	4621      	mov	r1, r4
   d4fcc:	a801      	add	r0, sp, #4
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
   d4fce:	9401      	str	r4, [sp, #4]
   d4fd0:	9402      	str	r4, [sp, #8]
   d4fd2:	9403      	str	r4, [sp, #12]
    advParams.size = sizeof(hal_ble_adv_params_t);
   d4fd4:	f8ad 3006 	strh.w	r3, [sp, #6]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   d4fd8:	f7ff fb48 	bl	d466c <hal_ble_gap_get_advertising_parameters>
   d4fdc:	2800      	cmp	r0, #0
   d4fde:	db05      	blt.n	d4fec <_ZNK8particle14BleLocalDevice18setAdvertisingTypeENS_23BleAdvertisingEventTypeE+0x32>
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4fe0:	4621      	mov	r1, r4
   d4fe2:	a801      	add	r0, sp, #4
int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
   d4fe4:	f88d 500c 	strb.w	r5, [sp, #12]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   d4fe8:	f7ff fb38 	bl	d465c <hal_ble_gap_set_advertising_parameters>
   d4fec:	4604      	mov	r4, r0
    advParams.timeout = timeout;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}

int BleLocalDevice::setAdvertisingType(BleAdvertisingEventType type) const {
    WiringBleLock lk;
   d4fee:	4668      	mov	r0, sp
   d4ff0:	f7ff fd92 	bl	d4b18 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_adv_params_t advParams = {};
    advParams.size = sizeof(hal_ble_adv_params_t);
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
    advParams.type = static_cast<hal_ble_adv_evt_type_t>(type);
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
}
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	b005      	add	sp, #20
   d4ff8:	bd30      	pop	{r4, r5, pc}

000d4ffa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d4ffa:	4608      	mov	r0, r1
   d4ffc:	b909      	cbnz	r1, d5002 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d4ffe:	460a      	mov	r2, r1
   d5000:	e001      	b.n	d5006 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5002:	6a09      	ldr	r1, [r1, #32]
   d5004:	2200      	movs	r2, #0
   d5006:	f7ff bb39 	b.w	d467c <hal_ble_gap_set_advertising_data>

000d500a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d500a:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d500c:	460c      	mov	r4, r1
   d500e:	b911      	cbnz	r1, d5016 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5010:	460a      	mov	r2, r1
   d5012:	4608      	mov	r0, r1
   d5014:	e006      	b.n	d5024 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5016:	2101      	movs	r1, #1
   d5018:	4620      	mov	r0, r4
   d501a:	f7ff fe90 	bl	d4d3e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d501e:	6a21      	ldr	r1, [r4, #32]
   d5020:	2200      	movs	r2, #0
   d5022:	4620      	mov	r0, r4
    }
}
   d5024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5028:	f7ff bb30 	b.w	d468c <hal_ble_gap_set_scan_response_data>

000d502c <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d502c:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d502e:	a801      	add	r0, sp, #4
   d5030:	f7ff fd64 	bl	d4afc <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5034:	2000      	movs	r0, #0
   d5036:	f7ff fb31 	bl	d469c <hal_ble_gap_start_advertising>
   d503a:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d503c:	a801      	add	r0, sp, #4
   d503e:	f7ff fd6b 	bl	d4b18 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5042:	4620      	mov	r0, r4
   d5044:	b002      	add	sp, #8
   d5046:	bd10      	pop	{r4, pc}

000d5048 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5048:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d504a:	4605      	mov	r5, r0
   d504c:	460c      	mov	r4, r1
    WiringBleLock lk;
   d504e:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5050:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5052:	f7ff fd53 	bl	d4afc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5056:	4621      	mov	r1, r4
   d5058:	4628      	mov	r0, r5
   d505a:	f7ff ffce 	bl	d4ffa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d505e:	2800      	cmp	r0, #0
   d5060:	db08      	blt.n	d5074 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5062:	4631      	mov	r1, r6
   d5064:	4628      	mov	r0, r5
   d5066:	f7ff ffd0 	bl	d500a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d506a:	2800      	cmp	r0, #0
   d506c:	db02      	blt.n	d5074 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d506e:	4628      	mov	r0, r5
   d5070:	f7ff ffdc 	bl	d502c <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5074:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5076:	a801      	add	r0, sp, #4
   d5078:	f7ff fd4e 	bl	d4b18 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d507c:	4620      	mov	r0, r4
   d507e:	b002      	add	sp, #8
   d5080:	bd70      	pop	{r4, r5, r6, pc}

000d5082 <_ZNK8particle14BleLocalDevice11advertisingEv>:
int BleLocalDevice::stopAdvertising() const {
    return hal_ble_gap_stop_advertising(nullptr);
}

bool BleLocalDevice::advertising() const {
    return hal_ble_gap_is_advertising(nullptr);
   d5082:	2000      	movs	r0, #0
   d5084:	f7ff bb12 	b.w	d46ac <hal_ble_gap_is_advertising>

000d5088 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d5088:	b530      	push	{r4, r5, lr}
   d508a:	b085      	sub	sp, #20
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d508c:	2400      	movs	r4, #0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d508e:	4668      	mov	r0, sp
    size_t foundCount_;
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   d5090:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5092:	f7ff fd33 	bl	d4afc <_ZN8particle3ble13WiringBleLockC1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d5096:	230c      	movs	r3, #12
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d5098:	4621      	mov	r1, r4
   d509a:	a801      	add	r0, sp, #4
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d509c:	9401      	str	r4, [sp, #4]
   d509e:	9402      	str	r4, [sp, #8]
    scanParams.size = sizeof(hal_ble_scan_params_t);
   d50a0:	f8ad 3006 	strh.w	r3, [sp, #6]
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
   d50a4:	9403      	str	r4, [sp, #12]
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   d50a6:	f7ff fb11 	bl	d46cc <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d50aa:	4621      	mov	r1, r4
   d50ac:	a801      	add	r0, sp, #4
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
   d50ae:	f8ad 500c 	strh.w	r5, [sp, #12]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   d50b2:	f7ff fb03 	bl	d46bc <hal_ble_gap_set_scan_parameters>
   d50b6:	4604      	mov	r4, r0
    BleOnScanResultCallback callback_;
    void* context_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
    WiringBleLock lk;
   d50b8:	4668      	mov	r0, sp
   d50ba:	f7ff fd2d 	bl	d4b18 <_ZN8particle3ble13WiringBleLockD1Ev>
    hal_ble_scan_params_t scanParams = {};
    scanParams.size = sizeof(hal_ble_scan_params_t);
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
}
   d50be:	4620      	mov	r0, r4
   d50c0:	b005      	add	sp, #20
   d50c2:	bd30      	pop	{r4, r5, pc}

000d50c4 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>:
int BleLocalDevice::getScanParameters(BleScanParams* params) const {
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   d50c4:	b530      	push	{r4, r5, lr}
   d50c6:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d50c8:	a801      	add	r0, sp, #4
int BleLocalDevice::getScanParameters(BleScanParams* params) const {
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   d50ca:	4614      	mov	r4, r2
   d50cc:	460d      	mov	r5, r1
    WiringBleLock lk;
   d50ce:	f7ff fd15 	bl	d4afc <_ZN8particle3ble13WiringBleLockC1Ev>
   d50d2:	2200      	movs	r2, #0
    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
        context_ = context;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d50d4:	a902      	add	r1, sp, #8
   d50d6:	480c      	ldr	r0, [pc, #48]	; (d5108 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_+0x44>)
   d50d8:	9202      	str	r2, [sp, #8]
   d50da:	9203      	str	r2, [sp, #12]
   d50dc:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d50de:	9205      	str	r2, [sp, #20]
   d50e0:	9206      	str	r2, [sp, #24]
   d50e2:	9207      	str	r2, [sp, #28]

    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
        context_ = context;
   d50e4:	9409      	str	r4, [sp, #36]	; 0x24
    }

    ~BleScanDelegator() = default;

    int start(BleOnScanResultCallback callback, void* context) {
        callback_ = callback;
   d50e6:	9508      	str	r5, [sp, #32]
        context_ = context;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d50e8:	f7ff faf8 	bl	d46dc <hal_ble_gap_start_scan>
   d50ec:	2800      	cmp	r0, #0
   d50ee:	bfb8      	it	lt
   d50f0:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d50f2:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d50f4:	bfa8      	it	ge
   d50f6:	9c07      	ldrge	r4, [sp, #28]
   d50f8:	f7ff fcb2 	bl	d4a60 <free>
    WiringBleLock lk;
    return hal_ble_gap_get_scan_parameters(params, nullptr);
}

int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
    WiringBleLock lk;
   d50fc:	a801      	add	r0, sp, #4
   d50fe:	f7ff fd0b 	bl	d4b18 <_ZN8particle3ble13WiringBleLockD1Ev>
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}
   d5102:	4620      	mov	r0, r4
   d5104:	b00b      	add	sp, #44	; 0x2c
   d5106:	bd30      	pop	{r4, r5, pc}
   d5108:	000d551f 	.word	0x000d551f

000d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d510c:	680b      	ldr	r3, [r1, #0]
   d510e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5110:	b113      	cbz	r3, d5118 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5112:	685a      	ldr	r2, [r3, #4]
   d5114:	3201      	adds	r2, #1
   d5116:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5118:	4770      	bx	lr

000d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d511a:	b510      	push	{r4, lr}
   d511c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d511e:	6800      	ldr	r0, [r0, #0]
   d5120:	b128      	cbz	r0, d512e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5122:	6843      	ldr	r3, [r0, #4]
   d5124:	3b01      	subs	r3, #1
   d5126:	6043      	str	r3, [r0, #4]
   d5128:	b90b      	cbnz	r3, d512e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d512a:	f7ff fcd7 	bl	d4adc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d512e:	4620      	mov	r0, r4
   d5130:	bd10      	pop	{r4, pc}

000d5132 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5132:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5134:	6804      	ldr	r4, [r0, #0]
   d5136:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5138:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d513a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d513e:	42a6      	cmp	r6, r4
   d5140:	d004      	beq.n	d514c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5142:	1d20      	adds	r0, r4, #4
   d5144:	f7ff ffe9 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5148:	3408      	adds	r4, #8
   d514a:	e7f8      	b.n	d513e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d514c:	6828      	ldr	r0, [r5, #0]
   d514e:	f7ff fc87 	bl	d4a60 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5152:	4628      	mov	r0, r5
   d5154:	bd70      	pop	{r4, r5, r6, pc}

000d5156 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5156:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5158:	6804      	ldr	r4, [r0, #0]
   d515a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d515c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d515e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5162:	42a6      	cmp	r6, r4
   d5164:	d004      	beq.n	d5170 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5166:	1d20      	adds	r0, r4, #4
   d5168:	f7ff ffd7 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d516c:	3408      	adds	r4, #8
   d516e:	e7f8      	b.n	d5162 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5170:	6828      	ldr	r0, [r5, #0]
   d5172:	f7ff fc75 	bl	d4a60 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5176:	4628      	mov	r0, r5
   d5178:	bd70      	pop	{r4, r5, r6, pc}

000d517a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d517a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d517c:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d517e:	f104 0018 	add.w	r0, r4, #24
   d5182:	f7ff ffe8 	bl	d5156 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5186:	f104 000c 	add.w	r0, r4, #12
   d518a:	f7ff ffd2 	bl	d5132 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d518e:	4620      	mov	r0, r4
   d5190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5194:	f7fe bf81 	b.w	d409a <_ZdlPv>

000d5198 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d519a:	6804      	ldr	r4, [r0, #0]
   d519c:	4607      	mov	r7, r0
   d519e:	b1c4      	cbz	r4, d51d2 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d51a0:	69a5      	ldr	r5, [r4, #24]
   d51a2:	69e3      	ldr	r3, [r4, #28]
   d51a4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d51a8:	42ae      	cmp	r6, r5
   d51aa:	d004      	beq.n	d51b6 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51ac:	1d28      	adds	r0, r5, #4
   d51ae:	f7ff ffb4 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51b2:	3508      	adds	r5, #8
   d51b4:	e7f8      	b.n	d51a8 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d51b6:	69a0      	ldr	r0, [r4, #24]
   d51b8:	f7ff fc52 	bl	d4a60 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d51bc:	f104 000c 	add.w	r0, r4, #12
   d51c0:	f7ff ffc9 	bl	d5156 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d51c4:	4620      	mov	r0, r4
   d51c6:	f7ff ffb4 	bl	d5132 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d51ca:	2134      	movs	r1, #52	; 0x34
   d51cc:	4620      	mov	r0, r4
   d51ce:	f002 f8fc 	bl	d73ca <_ZdlPvj>
   d51d2:	4638      	mov	r0, r7
   d51d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d51d8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d51d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d51da:	2500      	movs	r5, #0
   d51dc:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d51de:	6045      	str	r5, [r0, #4]
   d51e0:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d51e2:	2024      	movs	r0, #36	; 0x24
   d51e4:	f7fe ff57 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d51e8:	4604      	mov	r4, r0
   d51ea:	b178      	cbz	r0, d520c <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d51ec:	4603      	mov	r3, r0
   d51ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d51f2:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d51f6:	f8c0 5002 	str.w	r5, [r0, #2]
   d51fa:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d51fc:	7285      	strb	r5, [r0, #10]
   d51fe:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5200:	60c5      	str	r5, [r0, #12]
   d5202:	6105      	str	r5, [r0, #16]
   d5204:	6145      	str	r5, [r0, #20]
   d5206:	6185      	str	r5, [r0, #24]
   d5208:	61c5      	str	r5, [r0, #28]
   d520a:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d520c:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d520e:	2014      	movs	r0, #20
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	f7fe ff40 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5216:	4603      	mov	r3, r0
   d5218:	b128      	cbz	r0, d5226 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d521a:	2201      	movs	r2, #1
   d521c:	6042      	str	r2, [r0, #4]
   d521e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5220:	4a08      	ldr	r2, [pc, #32]	; (d5244 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5222:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5224:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5226:	a802      	add	r0, sp, #8
   d5228:	6872      	ldr	r2, [r6, #4]
   d522a:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d522e:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5230:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5232:	f7ff ff72 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5236:	6833      	ldr	r3, [r6, #0]
   d5238:	b90b      	cbnz	r3, d523e <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d523a:	f7ff fc45 	bl	d4ac8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d523e:	4630      	mov	r0, r6
   d5240:	b002      	add	sp, #8
   d5242:	bd70      	pop	{r4, r5, r6, pc}
   d5244:	000d7a00 	.word	0x000d7a00

000d5248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5248:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d524a:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d524c:	6803      	ldr	r3, [r0, #0]
   d524e:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5250:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5252:	d00c      	beq.n	d526e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5254:	b114      	cbz	r4, d525c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5256:	6863      	ldr	r3, [r4, #4]
   d5258:	3301      	adds	r3, #1
   d525a:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d525c:	6828      	ldr	r0, [r5, #0]
   d525e:	b128      	cbz	r0, d526c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5260:	6843      	ldr	r3, [r0, #4]
   d5262:	3b01      	subs	r3, #1
   d5264:	6043      	str	r3, [r0, #4]
   d5266:	b90b      	cbnz	r3, d526c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d5268:	f7ff fc38 	bl	d4adc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d526c:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d526e:	4628      	mov	r0, r5
   d5270:	bd38      	pop	{r3, r4, r5, pc}

000d5272 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5272:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5274:	b570      	push	{r4, r5, r6, lr}
   d5276:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5278:	d91a      	bls.n	d52b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d527a:	4290      	cmp	r0, r2
   d527c:	d219      	bcs.n	d52b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d527e:	f1a1 0608 	sub.w	r6, r1, #8
   d5282:	1a51      	subs	r1, r2, r1
   d5284:	3904      	subs	r1, #4
   d5286:	1f15      	subs	r5, r2, #4
   d5288:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d528a:	1f2b      	subs	r3, r5, #4
   d528c:	429e      	cmp	r6, r3
   d528e:	d025      	beq.n	d52dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5290:	2c04      	cmp	r4, #4
   d5292:	d007      	beq.n	d52a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5294:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5298:	f844 3c04 	str.w	r3, [r4, #-4]
   d529c:	4629      	mov	r1, r5
   d529e:	4620      	mov	r0, r4
   d52a0:	f7ff ff34 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52a4:	4628      	mov	r0, r5
   d52a6:	f7ff ff38 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52aa:	3d08      	subs	r5, #8
   d52ac:	3c08      	subs	r4, #8
   d52ae:	e7ec      	b.n	d528a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d52b0:	d014      	beq.n	d52dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d52b2:	1d0c      	adds	r4, r1, #4
   d52b4:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d52b6:	1f23      	subs	r3, r4, #4
   d52b8:	429d      	cmp	r5, r3
   d52ba:	d00f      	beq.n	d52dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d52bc:	2e04      	cmp	r6, #4
   d52be:	d007      	beq.n	d52d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d52c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d52c4:	f846 3c04 	str.w	r3, [r6, #-4]
   d52c8:	4621      	mov	r1, r4
   d52ca:	4630      	mov	r0, r6
   d52cc:	f7ff ff1e 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52d0:	4620      	mov	r0, r4
   d52d2:	f7ff ff22 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52d6:	3408      	adds	r4, #8
   d52d8:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d52da:	e7ec      	b.n	d52b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d52dc:	bd70      	pop	{r4, r5, r6, pc}

000d52de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d52de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d52e2:	6804      	ldr	r4, [r0, #0]
   d52e4:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d52e6:	4605      	mov	r5, r0
   d52e8:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d52ea:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d52ee:	42a7      	cmp	r7, r4
   d52f0:	d018      	beq.n	d5324 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d52f2:	4641      	mov	r1, r8
   d52f4:	4620      	mov	r0, r4
   d52f6:	f7ff fdbb 	bl	d4e70 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d52fa:	4606      	mov	r6, r0
   d52fc:	b908      	cbnz	r0, d5302 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d52fe:	3408      	adds	r4, #8
   d5300:	e7f5      	b.n	d52ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5302:	b18c      	cbz	r4, d5328 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5304:	1d20      	adds	r0, r4, #4
   d5306:	f7ff ff08 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d530a:	682b      	ldr	r3, [r5, #0]
   d530c:	686a      	ldr	r2, [r5, #4]
   d530e:	f104 0108 	add.w	r1, r4, #8
   d5312:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5316:	4620      	mov	r0, r4
   d5318:	f7ff ffab 	bl	d5272 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d531c:	686b      	ldr	r3, [r5, #4]
   d531e:	3b01      	subs	r3, #1
   d5320:	606b      	str	r3, [r5, #4]
    return true;
   d5322:	e002      	b.n	d532a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5324:	2600      	movs	r6, #0
   d5326:	e000      	b.n	d532a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5328:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d532a:	4630      	mov	r0, r6
   d532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5330 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5332:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5334:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5338:	6847      	ldr	r7, [r0, #4]
   d533a:	9300      	str	r3, [sp, #0]
   d533c:	a801      	add	r0, sp, #4
   d533e:	f7ff fee5 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5342:	6866      	ldr	r6, [r4, #4]
   d5344:	68a3      	ldr	r3, [r4, #8]
   d5346:	429e      	cmp	r6, r3
   d5348:	db14      	blt.n	d5374 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d534a:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d534c:	2e00      	cmp	r6, #0
   d534e:	dd0b      	ble.n	d5368 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5350:	00f0      	lsls	r0, r6, #3
   d5352:	f7ff fb7d 	bl	d4a50 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5356:	4605      	mov	r5, r0
   d5358:	b318      	cbz	r0, d53a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d535a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d535e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5362:	f7ff ff86 	bl	d5272 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5366:	e000      	b.n	d536a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5368:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d536a:	6820      	ldr	r0, [r4, #0]
   d536c:	f7ff fb78 	bl	d4a60 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5370:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5372:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5374:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5376:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5378:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d537c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5380:	4629      	mov	r1, r5
   d5382:	f105 0008 	add.w	r0, r5, #8
   d5386:	f7ff ff74 	bl	d5272 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d538a:	b135      	cbz	r5, d539a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d538c:	9b00      	ldr	r3, [sp, #0]
   d538e:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5392:	a901      	add	r1, sp, #4
   d5394:	1d28      	adds	r0, r5, #4
   d5396:	f7ff feb9 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d539a:	6863      	ldr	r3, [r4, #4]
   d539c:	3301      	adds	r3, #1
   d539e:	6063      	str	r3, [r4, #4]
   d53a0:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d53a2:	a801      	add	r0, sp, #4
   d53a4:	f7ff feb9 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d53a8:	4628      	mov	r0, r5
   d53aa:	b003      	add	sp, #12
   d53ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d53b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d53b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d53b4:	4604      	mov	r4, r0
   d53b6:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d53b8:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d53ba:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d53bc:	f7ff fb9e 	bl	d4afc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d53c0:	6823      	ldr	r3, [r4, #0]
   d53c2:	2b03      	cmp	r3, #3
   d53c4:	d002      	beq.n	d53cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d53c6:	2b04      	cmp	r3, #4
   d53c8:	d042      	beq.n	d5450 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d53ca:	e087      	b.n	d54dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d53cc:	a804      	add	r0, sp, #16
   d53ce:	f7ff ff03 	bl	d51d8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d53d2:	9b04      	ldr	r3, [sp, #16]
   d53d4:	8922      	ldrh	r2, [r4, #8]
   d53d6:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d53d8:	6862      	ldr	r2, [r4, #4]
   d53da:	9904      	ldr	r1, [sp, #16]
   d53dc:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d53e0:	f8c1 3002 	str.w	r3, [r1, #2]
   d53e4:	6853      	ldr	r3, [r2, #4]
   d53e6:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53ea:	a807      	add	r0, sp, #28
   d53ec:	9b04      	ldr	r3, [sp, #16]
   d53ee:	9306      	str	r3, [sp, #24]
   d53f0:	a905      	add	r1, sp, #20
   d53f2:	f7ff fe8b 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d53f6:	a906      	add	r1, sp, #24
   d53f8:	f105 0018 	add.w	r0, r5, #24
   d53fc:	f7ff ff98 	bl	d5330 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5400:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5402:	a807      	add	r0, sp, #28
   d5404:	f7ff fe89 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5408:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d540a:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d540c:	b974      	cbnz	r4, d542c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d540e:	4b36      	ldr	r3, [pc, #216]	; (d54e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5410:	9300      	str	r3, [sp, #0]
   d5412:	aa06      	add	r2, sp, #24
   d5414:	4623      	mov	r3, r4
   d5416:	4935      	ldr	r1, [pc, #212]	; (d54ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5418:	9407      	str	r4, [sp, #28]
   d541a:	2032      	movs	r0, #50	; 0x32
   d541c:	f7ff fa84 	bl	d4928 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5420:	9b04      	ldr	r3, [sp, #16]
   d5422:	4621      	mov	r1, r4
   d5424:	8818      	ldrh	r0, [r3, #0]
   d5426:	f7ff f96b 	bl	d4700 <hal_ble_gap_disconnect>
   d542a:	e00d      	b.n	d5448 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d542c:	4a30      	ldr	r2, [pc, #192]	; (d54f0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d542e:	9200      	str	r2, [sp, #0]
   d5430:	2300      	movs	r3, #0
   d5432:	aa06      	add	r2, sp, #24
   d5434:	492d      	ldr	r1, [pc, #180]	; (d54ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5436:	9307      	str	r3, [sp, #28]
   d5438:	2001      	movs	r0, #1
   d543a:	f7ff fa75 	bl	d4928 <log_message>
                if (impl->connectedCb_) {
   d543e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5440:	b113      	cbz	r3, d5448 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5442:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5444:	a804      	add	r0, sp, #16
   d5446:	4798      	blx	r3
   d5448:	a805      	add	r0, sp, #20
   d544a:	f7ff fe66 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d544e:	e045      	b.n	d54dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5450:	8921      	ldrh	r1, [r4, #8]
   d5452:	4628      	mov	r0, r5
   d5454:	f7ff fcf3 	bl	d4e3e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5458:	4607      	mov	r7, r0
   d545a:	2800      	cmp	r0, #0
   d545c:	d03e      	beq.n	d54dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d545e:	6804      	ldr	r4, [r0, #0]
   d5460:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5462:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5464:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5468:	8022      	strh	r2, [r4, #0]
   d546a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d546e:	4299      	cmp	r1, r3
   d5470:	d003      	beq.n	d547a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5472:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5476:	8042      	strh	r2, [r0, #2]
   d5478:	e7f9      	b.n	d546e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d547a:	68e6      	ldr	r6, [r4, #12]
   d547c:	6923      	ldr	r3, [r4, #16]
   d547e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5482:	45b0      	cmp	r8, r6
   d5484:	d004      	beq.n	d5490 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5486:	1d30      	adds	r0, r6, #4
   d5488:	f7ff fe47 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d548c:	3608      	adds	r6, #8
   d548e:	e7f8      	b.n	d5482 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5490:	2300      	movs	r3, #0
   d5492:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5494:	69a6      	ldr	r6, [r4, #24]
   d5496:	69e3      	ldr	r3, [r4, #28]
   d5498:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d549c:	45b0      	cmp	r8, r6
   d549e:	d004      	beq.n	d54aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d54a0:	1d30      	adds	r0, r6, #4
   d54a2:	f7ff fe3a 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54a6:	3608      	adds	r6, #8
   d54a8:	e7f8      	b.n	d549c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d54aa:	2300      	movs	r3, #0
   d54ac:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d54ae:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d54b0:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d54b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d54b4:	b113      	cbz	r3, d54bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d54b6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d54b8:	4638      	mov	r0, r7
   d54ba:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d54bc:	2320      	movs	r3, #32
   d54be:	4a0d      	ldr	r2, [pc, #52]	; (d54f4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d54c0:	9306      	str	r3, [sp, #24]
   d54c2:	9200      	str	r2, [sp, #0]
   d54c4:	2300      	movs	r3, #0
   d54c6:	4909      	ldr	r1, [pc, #36]	; (d54ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d54c8:	9307      	str	r3, [sp, #28]
   d54ca:	2001      	movs	r0, #1
   d54cc:	aa06      	add	r2, sp, #24
   d54ce:	f7ff fa2b 	bl	d4928 <log_message>
                    impl->peers_.removeOne(*peer);
   d54d2:	4639      	mov	r1, r7
   d54d4:	f105 0018 	add.w	r0, r5, #24
   d54d8:	f7ff ff01 	bl	d52de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d54dc:	a803      	add	r0, sp, #12
   d54de:	f7ff fb1b 	bl	d4b18 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d54e2:	b00e      	add	sp, #56	; 0x38
   d54e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d54e8:	000d7a76 	.word	0x000d7a76
   d54ec:	000d7a14 	.word	0x000d7a14
   d54f0:	000d7a9c 	.word	0x000d7a9c
   d54f4:	000d7ab9 	.word	0x000d7ab9

000d54f8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d54f8:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d54fa:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d54fc:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d54fe:	dd06      	ble.n	d550e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d5500:	2154      	movs	r1, #84	; 0x54
   d5502:	4369      	muls	r1, r5
   d5504:	6800      	ldr	r0, [r0, #0]
   d5506:	f7ff fab3 	bl	d4a70 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d550a:	b920      	cbnz	r0, d5516 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d550c:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d550e:	6800      	ldr	r0, [r0, #0]
   d5510:	f7ff faa6 	bl	d4a60 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5514:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d5516:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5518:	60a5      	str	r5, [r4, #8]
        return true;
   d551a:	2001      	movs	r0, #1
    }
   d551c:	bd38      	pop	{r3, r4, r5, pc}

000d551e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d551e:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5520:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5522:	b0c0      	sub	sp, #256	; 0x100
   d5524:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5526:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5528:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d552a:	a801      	add	r0, sp, #4
   d552c:	2100      	movs	r1, #0
   d552e:	f002 f8f2 	bl	d7716 <memset>
   d5532:	a803      	add	r0, sp, #12
   d5534:	f7ff fbe9 	bl	d4d0a <_ZN8particle18BleAdvertisingDataC1Ev>
   d5538:	a80c      	add	r0, sp, #48	; 0x30
   d553a:	f7ff fbe6 	bl	d4d0a <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d553e:	462a      	mov	r2, r5
   d5540:	ab01      	add	r3, sp, #4
   d5542:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d5546:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5548:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d554a:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d554c:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d554e:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5550:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5554:	a80c      	add	r0, sp, #48	; 0x30
   d5556:	f7ff fb69 	bl	d4c2c <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d555a:	89aa      	ldrh	r2, [r5, #12]
   d555c:	6869      	ldr	r1, [r5, #4]
   d555e:	a803      	add	r0, sp, #12
   d5560:	f7ff fb64 	bl	d4c2c <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d5564:	69a5      	ldr	r5, [r4, #24]
   d5566:	b11d      	cbz	r5, d5570 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d5568:	69e1      	ldr	r1, [r4, #28]
   d556a:	a801      	add	r0, sp, #4
   d556c:	47a8      	blx	r5
   d556e:	e03c      	b.n	d55ea <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d5570:	68e0      	ldr	r0, [r4, #12]
   d5572:	b198      	cbz	r0, d559c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d5574:	6963      	ldr	r3, [r4, #20]
   d5576:	6922      	ldr	r2, [r4, #16]
   d5578:	4293      	cmp	r3, r2
   d557a:	d239      	bcs.n	d55f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d557c:	1c5a      	adds	r2, r3, #1
   d557e:	6162      	str	r2, [r4, #20]
   d5580:	fb06 0003 	mla	r0, r6, r3, r0
   d5584:	2251      	movs	r2, #81	; 0x51
   d5586:	a901      	add	r1, sp, #4
   d5588:	f002 f89f 	bl	d76ca <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d558c:	6962      	ldr	r2, [r4, #20]
   d558e:	6923      	ldr	r3, [r4, #16]
   d5590:	429a      	cmp	r2, r3
   d5592:	d32d      	bcc.n	d55f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d5594:	4628      	mov	r0, r5
   d5596:	f7ff f8a9 	bl	d46ec <hal_ble_gap_stop_scan>
   d559a:	e029      	b.n	d55f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d559c:	4632      	mov	r2, r6
   d559e:	a901      	add	r1, sp, #4
   d55a0:	a816      	add	r0, sp, #88	; 0x58
   d55a2:	f002 f892 	bl	d76ca <memcpy>
   d55a6:	4632      	mov	r2, r6
   d55a8:	a916      	add	r1, sp, #88	; 0x58
   d55aa:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d55ac:	6865      	ldr	r5, [r4, #4]
   d55ae:	f002 f88c 	bl	d76ca <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d55b2:	68a3      	ldr	r3, [r4, #8]
   d55b4:	429d      	cmp	r5, r3
   d55b6:	db04      	blt.n	d55c2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d55b8:	1c69      	adds	r1, r5, #1
   d55ba:	4620      	mov	r0, r4
   d55bc:	f7ff ff9c 	bl	d54f8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d55c0:	b1b0      	cbz	r0, d55f0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d55c2:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d55c4:	6822      	ldr	r2, [r4, #0]
   d55c6:	2654      	movs	r6, #84	; 0x54
   d55c8:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d55cc:	fb06 2203 	mla	r2, r6, r3, r2
   d55d0:	1b52      	subs	r2, r2, r5
   d55d2:	4629      	mov	r1, r5
   d55d4:	19a8      	adds	r0, r5, r6
   d55d6:	f002 f883 	bl	d76e0 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d55da:	4632      	mov	r2, r6
   d55dc:	a92b      	add	r1, sp, #172	; 0xac
   d55de:	4628      	mov	r0, r5
   d55e0:	f002 f873 	bl	d76ca <memcpy>
    ++size_;
   d55e4:	6863      	ldr	r3, [r4, #4]
   d55e6:	3301      	adds	r3, #1
   d55e8:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d55ea:	6963      	ldr	r3, [r4, #20]
   d55ec:	3301      	adds	r3, #1
   d55ee:	6163      	str	r3, [r4, #20]
        }
    }
   d55f0:	b040      	add	sp, #256	; 0x100
   d55f2:	bd70      	pop	{r4, r5, r6, pc}

000d55f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d55f4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d55f6:	4c06      	ldr	r4, [pc, #24]	; (d5610 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d55f8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d55fa:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d55fc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d55fe:	f7ff f8ab 	bl	d4758 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5602:	4620      	mov	r0, r4
   d5604:	4a03      	ldr	r2, [pc, #12]	; (d5614 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5606:	4904      	ldr	r1, [pc, #16]	; (d5618 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d560c:	f001 bed8 	b.w	d73c0 <__aeabi_atexit>
   d5610:	2003e3c0 	.word	0x2003e3c0
   d5614:	2003e2f0 	.word	0x2003e2f0
   d5618:	000d4ab9 	.word	0x000d4ab9

000d561c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d561c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d561e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5620:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5622:	b113      	cbz	r3, d562a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5624:	2203      	movs	r2, #3
   d5626:	4601      	mov	r1, r0
   d5628:	4798      	blx	r3
    }
   d562a:	4620      	mov	r0, r4
   d562c:	bd10      	pop	{r4, pc}

000d562e <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d562e:	2200      	movs	r2, #0
   d5630:	4611      	mov	r1, r2
   d5632:	6840      	ldr	r0, [r0, #4]
   d5634:	f7ff b9f4 	b.w	d4a20 <network_listening>

000d5638 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5638:	2200      	movs	r2, #0
   d563a:	4611      	mov	r1, r2
   d563c:	6840      	ldr	r0, [r0, #4]
   d563e:	f7ff b9ff 	b.w	d4a40 <network_get_listen_timeout>

000d5642 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5642:	2200      	movs	r2, #0
   d5644:	6840      	ldr	r0, [r0, #4]
   d5646:	f7ff b9f3 	b.w	d4a30 <network_set_listen_timeout>

000d564a <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d564a:	2200      	movs	r2, #0
   d564c:	f081 0101 	eor.w	r1, r1, #1
   d5650:	6840      	ldr	r0, [r0, #4]
   d5652:	f7ff b9dd 	b.w	d4a10 <network_listen>

000d5656 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5656:	2300      	movs	r3, #0
   d5658:	461a      	mov	r2, r3
   d565a:	4619      	mov	r1, r3
   d565c:	6840      	ldr	r0, [r0, #4]
   d565e:	f7ff b9cf 	b.w	d4a00 <network_off>

000d5662 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5662:	2300      	movs	r3, #0
   d5664:	461a      	mov	r2, r3
   d5666:	4619      	mov	r1, r3
   d5668:	6840      	ldr	r0, [r0, #4]
   d566a:	f7ff b9c1 	b.w	d49f0 <network_on>

000d566e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d566e:	2200      	movs	r2, #0
   d5670:	4611      	mov	r1, r2
   d5672:	6840      	ldr	r0, [r0, #4]
   d5674:	f7ff b9b4 	b.w	d49e0 <network_ready>

000d5678 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5678:	2200      	movs	r2, #0
   d567a:	4611      	mov	r1, r2
   d567c:	6840      	ldr	r0, [r0, #4]
   d567e:	f7ff b99f 	b.w	d49c0 <network_connecting>

000d5682 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5682:	2200      	movs	r2, #0
   d5684:	2102      	movs	r1, #2
   d5686:	6840      	ldr	r0, [r0, #4]
   d5688:	f7ff b9a2 	b.w	d49d0 <network_disconnect>

000d568c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d568c:	2300      	movs	r3, #0
   d568e:	461a      	mov	r2, r3
   d5690:	6840      	ldr	r0, [r0, #4]
   d5692:	f7ff b98d 	b.w	d49b0 <network_connect>
	...

000d5698 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5698:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d569a:	2203      	movs	r2, #3
   d569c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d569e:	4a02      	ldr	r2, [pc, #8]	; (d56a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d56a0:	601a      	str	r2, [r3, #0]
   d56a2:	4770      	bx	lr
   d56a4:	2003e3c4 	.word	0x2003e3c4
   d56a8:	000d7bcc 	.word	0x000d7bcc

000d56ac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d56ac:	4770      	bx	lr

000d56ae <_ZN9IPAddressD0Ev>:
   d56ae:	b510      	push	{r4, lr}
   d56b0:	2118      	movs	r1, #24
   d56b2:	4604      	mov	r4, r0
   d56b4:	f001 fe89 	bl	d73ca <_ZdlPvj>
   d56b8:	4620      	mov	r0, r4
   d56ba:	bd10      	pop	{r4, pc}

000d56bc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d56bc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d56be:	7d03      	ldrb	r3, [r0, #20]
   d56c0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d56c2:	b08d      	sub	sp, #52	; 0x34
   d56c4:	460e      	mov	r6, r1
   d56c6:	f100 0704 	add.w	r7, r0, #4
   d56ca:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d56ce:	d002      	beq.n	d56d6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d56d0:	f100 0508 	add.w	r5, r0, #8
   d56d4:	e018      	b.n	d5708 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d56d6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d56d8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d56da:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d56de:	232f      	movs	r3, #47	; 0x2f
   d56e0:	462a      	mov	r2, r5
   d56e2:	200a      	movs	r0, #10
   d56e4:	f7ff f878 	bl	d47d8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d56e8:	4628      	mov	r0, r5
   d56ea:	f002 f867 	bl	d77bc <strlen>
   d56ee:	6833      	ldr	r3, [r6, #0]
   d56f0:	4602      	mov	r2, r0
   d56f2:	68db      	ldr	r3, [r3, #12]
   d56f4:	4629      	mov	r1, r5
   d56f6:	4630      	mov	r0, r6
   d56f8:	4798      	blx	r3
   d56fa:	e00f      	b.n	d571c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d56fc:	b124      	cbz	r4, d5708 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d56fe:	212e      	movs	r1, #46	; 0x2e
   d5700:	4630      	mov	r0, r6
   d5702:	f001 fb4d 	bl	d6da0 <_ZN5Print5printEc>
   d5706:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5708:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d570c:	220a      	movs	r2, #10
   d570e:	4630      	mov	r0, r6
   d5710:	f001 fb55 	bl	d6dbe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5714:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5716:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5718:	d1f0      	bne.n	d56fc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d571a:	4620      	mov	r0, r4
    }
    return n;
}
   d571c:	b00d      	add	sp, #52	; 0x34
   d571e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5720 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5720:	b510      	push	{r4, lr}
   d5722:	4b05      	ldr	r3, [pc, #20]	; (d5738 <_ZN9IPAddressC1Ev+0x18>)
   d5724:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5726:	2211      	movs	r2, #17
   d5728:	f840 3b04 	str.w	r3, [r0], #4
   d572c:	2100      	movs	r1, #0
   d572e:	f001 fff2 	bl	d7716 <memset>
{
    clear();
}
   d5732:	4620      	mov	r0, r4
   d5734:	bd10      	pop	{r4, pc}
   d5736:	bf00      	nop
   d5738:	000d7c00 	.word	0x000d7c00

000d573c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d573c:	4603      	mov	r3, r0
   d573e:	4a07      	ldr	r2, [pc, #28]	; (d575c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5740:	b510      	push	{r4, lr}
   d5742:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5746:	f101 0210 	add.w	r2, r1, #16
   d574a:	f851 4b04 	ldr.w	r4, [r1], #4
   d574e:	f843 4b04 	str.w	r4, [r3], #4
   d5752:	4291      	cmp	r1, r2
   d5754:	d1f9      	bne.n	d574a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5756:	780a      	ldrb	r2, [r1, #0]
   d5758:	701a      	strb	r2, [r3, #0]
}
   d575a:	bd10      	pop	{r4, pc}
   d575c:	000d7c00 	.word	0x000d7c00

000d5760 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5760:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5762:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5766:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d576a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d576e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5772:	2304      	movs	r3, #4
   d5774:	6041      	str	r1, [r0, #4]
   d5776:	7503      	strb	r3, [r0, #20]
   d5778:	bd10      	pop	{r4, pc}

000d577a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d577a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d577c:	780d      	ldrb	r5, [r1, #0]
   d577e:	788b      	ldrb	r3, [r1, #2]
   d5780:	784a      	ldrb	r2, [r1, #1]
   d5782:	78c9      	ldrb	r1, [r1, #3]
   d5784:	9100      	str	r1, [sp, #0]
   d5786:	4629      	mov	r1, r5
   d5788:	f7ff ffea 	bl	d5760 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d578c:	b003      	add	sp, #12
   d578e:	bd30      	pop	{r4, r5, pc}

000d5790 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d5790:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d5794:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d5796:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d579a:	2901      	cmp	r1, #1
   d579c:	4610      	mov	r0, r2
   d579e:	d104      	bne.n	d57aa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d57a0:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d57a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d57a8:	e004      	b.n	d57b4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d57aa:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d57ac:	bf04      	itt	eq
   d57ae:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d57b2:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d57b4:	3b01      	subs	r3, #1
   d57b6:	f102 0210 	add.w	r2, r2, #16
   d57ba:	d1ec      	bne.n	d5796 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d57bc:	4770      	bx	lr

000d57be <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d57be:	b40e      	push	{r1, r2, r3}
   d57c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d57c4:	b087      	sub	sp, #28
   d57c6:	af00      	add	r7, sp, #0
   d57c8:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d57cc:	4605      	mov	r5, r0
   d57ce:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d57d2:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d57d4:	4623      	mov	r3, r4
   d57d6:	4632      	mov	r2, r6
   d57d8:	2110      	movs	r1, #16
   d57da:	f107 0008 	add.w	r0, r7, #8
   d57de:	f7ff f957 	bl	d4a90 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d57e2:	280f      	cmp	r0, #15
   d57e4:	d916      	bls.n	d5814 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d57e6:	f100 0308 	add.w	r3, r0, #8
   d57ea:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d57ee:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d57f0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d57f4:	4632      	mov	r2, r6
   d57f6:	1c41      	adds	r1, r0, #1
   d57f8:	4623      	mov	r3, r4
   d57fa:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d57fc:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d57fe:	f7ff f947 	bl	d4a90 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d5802:	1e02      	subs	r2, r0, #0
   d5804:	dd04      	ble.n	d5810 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d5806:	682b      	ldr	r3, [r5, #0]
   d5808:	4669      	mov	r1, sp
   d580a:	689b      	ldr	r3, [r3, #8]
   d580c:	4628      	mov	r0, r5
   d580e:	4798      	blx	r3
   d5810:	46c5      	mov	sp, r8
   d5812:	e007      	b.n	d5824 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d5814:	b130      	cbz	r0, d5824 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d5816:	682b      	ldr	r3, [r5, #0]
   d5818:	4602      	mov	r2, r0
   d581a:	689b      	ldr	r3, [r3, #8]
   d581c:	f107 0108 	add.w	r1, r7, #8
   d5820:	4628      	mov	r0, r5
   d5822:	4798      	blx	r3
    }
}
   d5824:	371c      	adds	r7, #28
   d5826:	46bd      	mov	sp, r7
   d5828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d582c:	b003      	add	sp, #12
   d582e:	4770      	bx	lr

000d5830 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5830:	b513      	push	{r0, r1, r4, lr}
   d5832:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5834:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d5836:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d583a:	6894      	ldr	r4, [r2, #8]
   d583c:	4619      	mov	r1, r3
   d583e:	2201      	movs	r2, #1
   d5840:	47a0      	blx	r4
}
   d5842:	b002      	add	sp, #8
   d5844:	bd10      	pop	{r4, pc}

000d5846 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d5846:	6883      	ldr	r3, [r0, #8]
   d5848:	b1fb      	cbz	r3, d588a <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d584a:	781a      	ldrb	r2, [r3, #0]
   d584c:	2a03      	cmp	r2, #3
   d584e:	d81a      	bhi.n	d5886 <_ZNK5spark9JSONValue4typeEv+0x40>
   d5850:	e8df f002 	tbb	[pc, r2]
   d5854:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d5858:	2005      	movs	r0, #5
   d585a:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d585c:	6802      	ldr	r2, [r0, #0]
   d585e:	685b      	ldr	r3, [r3, #4]
   d5860:	6852      	ldr	r2, [r2, #4]
   d5862:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d5864:	282d      	cmp	r0, #45	; 0x2d
   d5866:	d014      	beq.n	d5892 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d5868:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d586c:	2b09      	cmp	r3, #9
   d586e:	d910      	bls.n	d5892 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d5870:	2874      	cmp	r0, #116	; 0x74
   d5872:	d010      	beq.n	d5896 <_ZNK5spark9JSONValue4typeEv+0x50>
   d5874:	2866      	cmp	r0, #102	; 0x66
   d5876:	d00e      	beq.n	d5896 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d5878:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d587c:	4258      	negs	r0, r3
   d587e:	4158      	adcs	r0, r3
   d5880:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d5882:	2006      	movs	r0, #6
   d5884:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d5886:	2000      	movs	r0, #0
   d5888:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d588a:	4618      	mov	r0, r3
   d588c:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d588e:	2004      	movs	r0, #4
   d5890:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d5892:	2003      	movs	r0, #3
   d5894:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d5896:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d5898:	4770      	bx	lr

000d589a <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d589a:	b510      	push	{r4, lr}
   d589c:	4604      	mov	r4, r0
    switch (type()) {
   d589e:	f7ff ffd2 	bl	d5846 <_ZNK5spark9JSONValue4typeEv>
   d58a2:	2802      	cmp	r0, #2
   d58a4:	d00d      	beq.n	d58c2 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d58a6:	d316      	bcc.n	d58d6 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d58a8:	2804      	cmp	r0, #4
   d58aa:	d814      	bhi.n	d58d6 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d58ac:	6822      	ldr	r2, [r4, #0]
   d58ae:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d58b0:	6850      	ldr	r0, [r2, #4]
   d58b2:	685b      	ldr	r3, [r3, #4]
   d58b4:	220a      	movs	r2, #10
   d58b6:	2100      	movs	r1, #0
   d58b8:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d58ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d58be:	f002 b833 	b.w	d7928 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d58c2:	6822      	ldr	r2, [r4, #0]
   d58c4:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d58c6:	6852      	ldr	r2, [r2, #4]
   d58c8:	685b      	ldr	r3, [r3, #4]
   d58ca:	5cd0      	ldrb	r0, [r2, r3]
   d58cc:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d58d0:	4258      	negs	r0, r3
   d58d2:	4158      	adcs	r0, r3
   d58d4:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d58d6:	2000      	movs	r0, #0
    }
}
   d58d8:	bd10      	pop	{r4, pc}

000d58da <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d58da:	b510      	push	{r4, lr}
    if (!n_) {
   d58dc:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d58de:	4604      	mov	r4, r0
    if (!n_) {
   d58e0:	b15b      	cbz	r3, d58fa <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d58e2:	6880      	ldr	r0, [r0, #8]
   d58e4:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d58e6:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d58e8:	3010      	adds	r0, #16
   d58ea:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d58ec:	6120      	str	r0, [r4, #16]
    --n_;
   d58ee:	6163      	str	r3, [r4, #20]
    if (n_) {
   d58f0:	b12b      	cbz	r3, d58fe <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d58f2:	f7ff ff4d 	bl	d5790 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d58f6:	60a0      	str	r0, [r4, #8]
   d58f8:	e001      	b.n	d58fe <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d58fa:	4618      	mov	r0, r3
   d58fc:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d58fe:	2001      	movs	r0, #1
}
   d5900:	bd10      	pop	{r4, pc}

000d5902 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d5902:	b510      	push	{r4, lr}
    write('}');
   d5904:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d5906:	4604      	mov	r4, r0
    write('}');
   d5908:	f7ff ff92 	bl	d5830 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d590c:	2301      	movs	r3, #1
   d590e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5910:	4620      	mov	r0, r4
   d5912:	bd10      	pop	{r4, pc}

000d5914 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d5914:	b508      	push	{r3, lr}
    switch (state_) {
   d5916:	7903      	ldrb	r3, [r0, #4]
   d5918:	2b01      	cmp	r3, #1
   d591a:	d002      	beq.n	d5922 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d591c:	2b02      	cmp	r3, #2
   d591e:	d002      	beq.n	d5926 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d5920:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d5922:	212c      	movs	r1, #44	; 0x2c
   d5924:	e000      	b.n	d5928 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d5926:	213a      	movs	r1, #58	; 0x3a
   d5928:	f7ff ff82 	bl	d5830 <_ZN5spark10JSONWriter5writeEc>
   d592c:	bd08      	pop	{r3, pc}

000d592e <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d592e:	b510      	push	{r4, lr}
   d5930:	4604      	mov	r4, r0
    writeSeparator();
   d5932:	f7ff ffef 	bl	d5914 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d5936:	4620      	mov	r0, r4
   d5938:	217b      	movs	r1, #123	; 0x7b
   d593a:	f7ff ff79 	bl	d5830 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d593e:	2300      	movs	r3, #0
   d5940:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5942:	4620      	mov	r0, r4
   d5944:	bd10      	pop	{r4, pc}
	...

000d5948 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d5948:	b538      	push	{r3, r4, r5, lr}
   d594a:	4604      	mov	r4, r0
   d594c:	460d      	mov	r5, r1
    writeSeparator();
   d594e:	f7ff ffe1 	bl	d5914 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d5952:	6823      	ldr	r3, [r4, #0]
   d5954:	4904      	ldr	r1, [pc, #16]	; (d5968 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d5956:	68db      	ldr	r3, [r3, #12]
   d5958:	4620      	mov	r0, r4
   d595a:	462a      	mov	r2, r5
   d595c:	4798      	blx	r3
    state_ = NEXT;
   d595e:	2301      	movs	r3, #1
   d5960:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5962:	4620      	mov	r0, r4
   d5964:	bd38      	pop	{r3, r4, r5, pc}
   d5966:	bf00      	nop
   d5968:	000d79d9 	.word	0x000d79d9

000d596c <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d596c:	b538      	push	{r3, r4, r5, lr}
   d596e:	4604      	mov	r4, r0
   d5970:	460d      	mov	r5, r1
    writeSeparator();
   d5972:	f7ff ffcf 	bl	d5914 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d5976:	6823      	ldr	r3, [r4, #0]
   d5978:	4904      	ldr	r1, [pc, #16]	; (d598c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d597a:	68db      	ldr	r3, [r3, #12]
   d597c:	4620      	mov	r0, r4
   d597e:	462a      	mov	r2, r5
   d5980:	4798      	blx	r3
    state_ = NEXT;
   d5982:	2301      	movs	r3, #1
   d5984:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5986:	4620      	mov	r0, r4
   d5988:	bd38      	pop	{r3, r4, r5, pc}
   d598a:	bf00      	nop
   d598c:	000d7c1b 	.word	0x000d7c1b

000d5990 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5992:	460d      	mov	r5, r1
   d5994:	4617      	mov	r7, r2
    write('"');
   d5996:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5998:	4604      	mov	r4, r0
   d599a:	442f      	add	r7, r5
    write('"');
   d599c:	f7ff ff48 	bl	d5830 <_ZN5spark10JSONWriter5writeEc>
   d59a0:	462a      	mov	r2, r5
    const char* const end = str + size;
   d59a2:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d59a4:	42ba      	cmp	r2, r7
   d59a6:	d038      	beq.n	d5a1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d59a8:	4616      	mov	r6, r2
   d59aa:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d59ae:	2d22      	cmp	r5, #34	; 0x22
   d59b0:	d003      	beq.n	d59ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d59b2:	2d5c      	cmp	r5, #92	; 0x5c
   d59b4:	d001      	beq.n	d59ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d59b6:	2d1f      	cmp	r5, #31
   d59b8:	d82d      	bhi.n	d5a16 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d59ba:	6823      	ldr	r3, [r4, #0]
   d59bc:	1a52      	subs	r2, r2, r1
   d59be:	689b      	ldr	r3, [r3, #8]
   d59c0:	4620      	mov	r0, r4
   d59c2:	4798      	blx	r3
            write('\\');
   d59c4:	215c      	movs	r1, #92	; 0x5c
   d59c6:	4620      	mov	r0, r4
   d59c8:	f7ff ff32 	bl	d5830 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d59cc:	2d0c      	cmp	r5, #12
   d59ce:	d019      	beq.n	d5a04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d59d0:	d807      	bhi.n	d59e2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d59d2:	2d09      	cmp	r5, #9
   d59d4:	d00f      	beq.n	d59f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d59d6:	2d0a      	cmp	r5, #10
   d59d8:	d012      	beq.n	d5a00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d59da:	2d08      	cmp	r5, #8
   d59dc:	d114      	bne.n	d5a08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d59de:	2162      	movs	r1, #98	; 0x62
   d59e0:	e00a      	b.n	d59f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d59e2:	2d22      	cmp	r5, #34	; 0x22
   d59e4:	d005      	beq.n	d59f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d59e6:	2d5c      	cmp	r5, #92	; 0x5c
   d59e8:	d003      	beq.n	d59f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d59ea:	2d0d      	cmp	r5, #13
   d59ec:	d10c      	bne.n	d5a08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d59ee:	2172      	movs	r1, #114	; 0x72
   d59f0:	e002      	b.n	d59f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d59f2:	4629      	mov	r1, r5
   d59f4:	e000      	b.n	d59f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d59f6:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d59f8:	4620      	mov	r0, r4
   d59fa:	f7ff ff19 	bl	d5830 <_ZN5spark10JSONWriter5writeEc>
                break;
   d59fe:	e009      	b.n	d5a14 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d5a00:	216e      	movs	r1, #110	; 0x6e
   d5a02:	e7f9      	b.n	d59f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d5a04:	2166      	movs	r1, #102	; 0x66
   d5a06:	e7f7      	b.n	d59f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d5a08:	6823      	ldr	r3, [r4, #0]
   d5a0a:	490a      	ldr	r1, [pc, #40]	; (d5a34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d5a0c:	68db      	ldr	r3, [r3, #12]
   d5a0e:	462a      	mov	r2, r5
   d5a10:	4620      	mov	r0, r4
   d5a12:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d5a14:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d5a16:	4632      	mov	r2, r6
   d5a18:	e7c4      	b.n	d59a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d5a1a:	4291      	cmp	r1, r2
   d5a1c:	d004      	beq.n	d5a28 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d5a1e:	6823      	ldr	r3, [r4, #0]
   d5a20:	1a52      	subs	r2, r2, r1
   d5a22:	689d      	ldr	r5, [r3, #8]
   d5a24:	4620      	mov	r0, r4
   d5a26:	47a8      	blx	r5
    }
    write('"');
   d5a28:	2122      	movs	r1, #34	; 0x22
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	f7ff ff00 	bl	d5830 <_ZN5spark10JSONWriter5writeEc>
   d5a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5a32:	bf00      	nop
   d5a34:	000d7c2c 	.word	0x000d7c2c

000d5a38 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d5a38:	b570      	push	{r4, r5, r6, lr}
   d5a3a:	4604      	mov	r4, r0
   d5a3c:	460d      	mov	r5, r1
   d5a3e:	4616      	mov	r6, r2
    writeSeparator();
   d5a40:	f7ff ff68 	bl	d5914 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d5a44:	4620      	mov	r0, r4
   d5a46:	4632      	mov	r2, r6
   d5a48:	4629      	mov	r1, r5
   d5a4a:	f7ff ffa1 	bl	d5990 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d5a4e:	2302      	movs	r3, #2
   d5a50:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5a52:	4620      	mov	r0, r4
   d5a54:	bd70      	pop	{r4, r5, r6, pc}

000d5a56 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d5a56:	b570      	push	{r4, r5, r6, lr}
   d5a58:	4604      	mov	r4, r0
   d5a5a:	460d      	mov	r5, r1
   d5a5c:	4616      	mov	r6, r2
    writeSeparator();
   d5a5e:	f7ff ff59 	bl	d5914 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d5a62:	4620      	mov	r0, r4
   d5a64:	4632      	mov	r2, r6
   d5a66:	4629      	mov	r1, r5
   d5a68:	f7ff ff92 	bl	d5990 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d5a6c:	2301      	movs	r3, #1
   d5a6e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5a70:	4620      	mov	r0, r4
   d5a72:	bd70      	pop	{r4, r5, r6, pc}

000d5a74 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a74:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5a76:	2300      	movs	r3, #0
   d5a78:	4604      	mov	r4, r0
   d5a7a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a7c:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d5a7e:	4810      	ldr	r0, [pc, #64]	; (d5ac0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d5a80:	60a0      	str	r0, [r4, #8]
   d5a82:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d5a84:	b1d1      	cbz	r1, d5abc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d5a86:	780b      	ldrb	r3, [r1, #0]
   d5a88:	2b03      	cmp	r3, #3
   d5a8a:	d006      	beq.n	d5a9a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5a8c:	b9b3      	cbnz	r3, d5abc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5a8e:	6813      	ldr	r3, [r2, #0]
   d5a90:	6858      	ldr	r0, [r3, #4]
   d5a92:	684b      	ldr	r3, [r1, #4]
   d5a94:	5cc3      	ldrb	r3, [r0, r3]
   d5a96:	2b6e      	cmp	r3, #110	; 0x6e
   d5a98:	d008      	beq.n	d5aac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d5a9a:	6813      	ldr	r3, [r2, #0]
   d5a9c:	6858      	ldr	r0, [r3, #4]
   d5a9e:	684b      	ldr	r3, [r1, #4]
   d5aa0:	4403      	add	r3, r0
   d5aa2:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d5aa4:	688b      	ldr	r3, [r1, #8]
   d5aa6:	6849      	ldr	r1, [r1, #4]
   d5aa8:	1a5b      	subs	r3, r3, r1
   d5aaa:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5aac:	4611      	mov	r1, r2
   d5aae:	4620      	mov	r0, r4
   d5ab0:	f851 3b04 	ldr.w	r3, [r1], #4
   d5ab4:	f840 3b04 	str.w	r3, [r0], #4
   d5ab8:	f7ff fbc6 	bl	d5248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d5abc:	4620      	mov	r0, r4
   d5abe:	bd10      	pop	{r4, pc}
   d5ac0:	000d7d04 	.word	0x000d7d04

000d5ac4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5ac4:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5ac6:	b510      	push	{r4, lr}
   d5ac8:	4604      	mov	r4, r0
   d5aca:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5acc:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5ace:	6083      	str	r3, [r0, #8]
   d5ad0:	60c3      	str	r3, [r0, #12]
   d5ad2:	6103      	str	r3, [r0, #16]
   d5ad4:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5ad6:	b171      	cbz	r1, d5af6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d5ad8:	780b      	ldrb	r3, [r1, #0]
   d5ada:	2b01      	cmp	r3, #1
   d5adc:	d10b      	bne.n	d5af6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d5ade:	f101 0310 	add.w	r3, r1, #16
   d5ae2:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d5ae4:	68cb      	ldr	r3, [r1, #12]
   d5ae6:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5ae8:	4611      	mov	r1, r2
   d5aea:	f851 3b04 	ldr.w	r3, [r1], #4
   d5aee:	f840 3b04 	str.w	r3, [r0], #4
   d5af2:	f7ff fba9 	bl	d5248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d5af6:	4620      	mov	r0, r4
   d5af8:	bd10      	pop	{r4, pc}

000d5afa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5afa:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5afc:	b510      	push	{r4, lr}
   d5afe:	4604      	mov	r4, r0
   d5b00:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b02:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d5b04:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d5b06:	b131      	cbz	r1, d5b16 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5b08:	4611      	mov	r1, r2
   d5b0a:	f851 3b04 	ldr.w	r3, [r1], #4
   d5b0e:	f840 3b04 	str.w	r3, [r0], #4
   d5b12:	f7ff fb99 	bl	d5248 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d5b16:	4620      	mov	r0, r4
   d5b18:	bd10      	pop	{r4, pc}

000d5b1a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5b1a:	6880      	ldr	r0, [r0, #8]
   d5b1c:	6803      	ldr	r3, [r0, #0]
   d5b1e:	68db      	ldr	r3, [r3, #12]
   d5b20:	4718      	bx	r3

000d5b22 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d5b22:	4770      	bx	lr

000d5b24 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5b24:	b119      	cbz	r1, d5b2e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d5b26:	680b      	ldr	r3, [r1, #0]
   d5b28:	4608      	mov	r0, r1
   d5b2a:	685b      	ldr	r3, [r3, #4]
   d5b2c:	4718      	bx	r3
   d5b2e:	4770      	bx	lr

000d5b30 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5b30:	b119      	cbz	r1, d5b3a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d5b32:	680b      	ldr	r3, [r1, #0]
   d5b34:	4608      	mov	r0, r1
   d5b36:	685b      	ldr	r3, [r3, #4]
   d5b38:	4718      	bx	r3
   d5b3a:	4770      	bx	lr

000d5b3c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5b3c:	4770      	bx	lr

000d5b3e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5b3e:	4770      	bx	lr

000d5b40 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5b40:	4770      	bx	lr

000d5b42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5b42:	b538      	push	{r3, r4, r5, lr}
   d5b44:	4604      	mov	r4, r0
   d5b46:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5b48:	6800      	ldr	r0, [r0, #0]
   d5b4a:	212e      	movs	r1, #46	; 0x2e
   d5b4c:	f001 fe22 	bl	d7794 <strchrnul>
    size = s - category;
   d5b50:	6823      	ldr	r3, [r4, #0]
   d5b52:	1ac3      	subs	r3, r0, r3
   d5b54:	602b      	str	r3, [r5, #0]
    if (size) {
   d5b56:	b123      	cbz	r3, d5b62 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5b58:	7803      	ldrb	r3, [r0, #0]
   d5b5a:	b103      	cbz	r3, d5b5e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5b5c:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5b5e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b60:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d5b62:	4618      	mov	r0, r3
}
   d5b64:	bd38      	pop	{r3, r4, r5, pc}

000d5b66 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5b66:	b510      	push	{r4, lr}
   d5b68:	210c      	movs	r1, #12
   d5b6a:	4604      	mov	r4, r0
   d5b6c:	f001 fc2d 	bl	d73ca <_ZdlPvj>
   d5b70:	4620      	mov	r0, r4
   d5b72:	bd10      	pop	{r4, pc}

000d5b74 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5b74:	b510      	push	{r4, lr}
   d5b76:	2104      	movs	r1, #4
   d5b78:	4604      	mov	r4, r0
   d5b7a:	f001 fc26 	bl	d73ca <_ZdlPvj>
   d5b7e:	4620      	mov	r0, r4
   d5b80:	bd10      	pop	{r4, pc}

000d5b82 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5b82:	b510      	push	{r4, lr}
   d5b84:	2104      	movs	r1, #4
   d5b86:	4604      	mov	r4, r0
   d5b88:	f001 fc1f 	bl	d73ca <_ZdlPvj>
   d5b8c:	4620      	mov	r0, r4
   d5b8e:	bd10      	pop	{r4, pc}

000d5b90 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5b90:	b538      	push	{r3, r4, r5, lr}
   d5b92:	460c      	mov	r4, r1
   d5b94:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5b96:	f001 fb27 	bl	d71e8 <_Z16_fetch_usbserialv>
   d5b9a:	4284      	cmp	r4, r0
   d5b9c:	d00d      	beq.n	d5bba <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5b9e:	f001 fa97 	bl	d70d0 <_Z22__fetch_global_Serial1v>
   d5ba2:	4284      	cmp	r4, r0
   d5ba4:	d105      	bne.n	d5bb2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d5ba6:	f001 fa93 	bl	d70d0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d5bae:	f001 ba8c 	b.w	d70ca <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d5bb2:	4621      	mov	r1, r4
   d5bb4:	4628      	mov	r0, r5
   d5bb6:	f7ff ffbb 	bl	d5b30 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d5bba:	bd38      	pop	{r3, r4, r5, pc}

000d5bbc <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5bbc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5bbe:	f001 fdf3 	bl	d77a8 <strcmp>
}
   d5bc2:	fab0 f080 	clz	r0, r0
   d5bc6:	0940      	lsrs	r0, r0, #5
   d5bc8:	bd08      	pop	{r3, pc}

000d5bca <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5bca:	b538      	push	{r3, r4, r5, lr}
   d5bcc:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5bce:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5bd0:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d5bd2:	f001 fdf3 	bl	d77bc <strlen>
   d5bd6:	4621      	mov	r1, r4
   d5bd8:	4602      	mov	r2, r0
   d5bda:	4628      	mov	r0, r5
}
   d5bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5be0:	f7ff bf39 	b.w	d5a56 <_ZN5spark10JSONWriter5valueEPKcj>

000d5be4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5be4:	6800      	ldr	r0, [r0, #0]
   d5be6:	f7fe bdc7 	b.w	d4778 <os_mutex_recursive_lock>

000d5bea <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5bea:	b570      	push	{r4, r5, r6, lr}
   d5bec:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5bee:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5bf0:	460d      	mov	r5, r1
    write(str, strlen(str));
   d5bf2:	f001 fde3 	bl	d77bc <strlen>
   d5bf6:	6823      	ldr	r3, [r4, #0]
   d5bf8:	4602      	mov	r2, r0
   d5bfa:	4629      	mov	r1, r5
   d5bfc:	4620      	mov	r0, r4
   d5bfe:	68db      	ldr	r3, [r3, #12]
}
   d5c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d5c04:	4718      	bx	r3

000d5c06 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d5c06:	b513      	push	{r0, r1, r4, lr}
   d5c08:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5c0a:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d5c0c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5c10:	68d4      	ldr	r4, [r2, #12]
   d5c12:	4619      	mov	r1, r3
   d5c14:	2201      	movs	r2, #1
   d5c16:	47a0      	blx	r4
}
   d5c18:	b002      	add	sp, #8
   d5c1a:	bd10      	pop	{r4, pc}

000d5c1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5c20:	6845      	ldr	r5, [r0, #4]
   d5c22:	6807      	ldr	r7, [r0, #0]
   d5c24:	b085      	sub	sp, #20
   d5c26:	4691      	mov	r9, r2
   d5c28:	2214      	movs	r2, #20
   d5c2a:	4355      	muls	r5, r2
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	10ab      	asrs	r3, r5, #2
   d5c30:	4d19      	ldr	r5, [pc, #100]	; (d5c98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5c32:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5c34:	435d      	muls	r5, r3
   d5c36:	468b      	mov	fp, r1
   d5c38:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5c3a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5c3c:	2d00      	cmp	r5, #0
   d5c3e:	9303      	str	r3, [sp, #12]
   d5c40:	dd23      	ble.n	d5c8a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5c42:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d5c44:	106e      	asrs	r6, r5, #1
   d5c46:	fb03 f006 	mul.w	r0, r3, r6
   d5c4a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5c4e:	464a      	mov	r2, r9
   d5c50:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d5c54:	5820      	ldr	r0, [r4, r0]
   d5c56:	45d1      	cmp	r9, sl
   d5c58:	bf28      	it	cs
   d5c5a:	4652      	movcs	r2, sl
   d5c5c:	4659      	mov	r1, fp
   d5c5e:	f001 fdb5 	bl	d77cc <strncmp>
                if (cmp == 0) {
   d5c62:	9b03      	ldr	r3, [sp, #12]
   d5c64:	b948      	cbnz	r0, d5c7a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d5c66:	45d1      	cmp	r9, sl
   d5c68:	d103      	bne.n	d5c72 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5c6a:	9a01      	ldr	r2, [sp, #4]
   d5c6c:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5c6e:	4635      	mov	r5, r6
   d5c70:	e7e4      	b.n	d5c3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d5c72:	bf8c      	ite	hi
   d5c74:	2001      	movhi	r0, #1
   d5c76:	2000      	movls	r0, #0
   d5c78:	e000      	b.n	d5c7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d5c7a:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5c7c:	2800      	cmp	r0, #0
   d5c7e:	d0f6      	beq.n	d5c6e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5c80:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d5c82:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d5c86:	3e01      	subs	r6, #1
   d5c88:	e7f1      	b.n	d5c6e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d5c8a:	1be4      	subs	r4, r4, r7
}
   d5c8c:	4802      	ldr	r0, [pc, #8]	; (d5c98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d5c8e:	10a4      	asrs	r4, r4, #2
}
   d5c90:	4360      	muls	r0, r4
   d5c92:	b005      	add	sp, #20
   d5c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c98:	cccccccd 	.word	0xcccccccd

000d5c9c <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c9e:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d5ca0:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5ca2:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d5ca4:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d5ca6:	b313      	cbz	r3, d5cee <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d5ca8:	b309      	cbz	r1, d5cee <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5caa:	af04      	add	r7, sp, #16
   d5cac:	2300      	movs	r3, #0
   d5cae:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d5cb2:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5cb6:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5cb8:	4639      	mov	r1, r7
   d5cba:	a801      	add	r0, sp, #4
   d5cbc:	f7ff ff41 	bl	d5b42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5cc0:	4601      	mov	r1, r0
   d5cc2:	b1a0      	cbz	r0, d5cee <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d5cc4:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d5cc6:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5cc8:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5ccc:	4620      	mov	r0, r4
   d5cce:	f7ff ffa5 	bl	d5c1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5cd2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5cd6:	b153      	cbz	r3, d5cee <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d5cd8:	6823      	ldr	r3, [r4, #0]
   d5cda:	2414      	movs	r4, #20
   d5cdc:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d5ce0:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d5ce2:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d5ce6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5ce8:	bfa8      	it	ge
   d5cea:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5cec:	e7e4      	b.n	d5cb8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d5cee:	4630      	mov	r0, r6
   d5cf0:	b005      	add	sp, #20
   d5cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5cf4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5cf4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d5cf6:	4c09      	ldr	r4, [pc, #36]	; (d5d1c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d5cf8:	6823      	ldr	r3, [r4, #0]
   d5cfa:	07db      	lsls	r3, r3, #31
   d5cfc:	d40b      	bmi.n	d5d16 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5cfe:	4620      	mov	r0, r4
   d5d00:	f7fe f9da 	bl	d40b8 <__cxa_guard_acquire>
   d5d04:	b138      	cbz	r0, d5d16 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5d06:	4620      	mov	r0, r4
   d5d08:	f7fe f9db 	bl	d40c2 <__cxa_guard_release>
   d5d0c:	4a04      	ldr	r2, [pc, #16]	; (d5d20 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5d0e:	4905      	ldr	r1, [pc, #20]	; (d5d24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5d10:	4805      	ldr	r0, [pc, #20]	; (d5d28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5d12:	f001 fb55 	bl	d73c0 <__aeabi_atexit>
    return &factory;
}
   d5d16:	4804      	ldr	r0, [pc, #16]	; (d5d28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5d18:	bd10      	pop	{r4, pc}
   d5d1a:	bf00      	nop
   d5d1c:	2003e3cc 	.word	0x2003e3cc
   d5d20:	2003e2f0 	.word	0x2003e2f0
   d5d24:	000d5b3f 	.word	0x000d5b3f
   d5d28:	2003e280 	.word	0x2003e280

000d5d2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5d2c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5d2e:	4c09      	ldr	r4, [pc, #36]	; (d5d54 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5d30:	6823      	ldr	r3, [r4, #0]
   d5d32:	07db      	lsls	r3, r3, #31
   d5d34:	d40b      	bmi.n	d5d4e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5d36:	4620      	mov	r0, r4
   d5d38:	f7fe f9be 	bl	d40b8 <__cxa_guard_acquire>
   d5d3c:	b138      	cbz	r0, d5d4e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5d3e:	4620      	mov	r0, r4
   d5d40:	f7fe f9bf 	bl	d40c2 <__cxa_guard_release>
   d5d44:	4a04      	ldr	r2, [pc, #16]	; (d5d58 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5d46:	4905      	ldr	r1, [pc, #20]	; (d5d5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5d48:	4805      	ldr	r0, [pc, #20]	; (d5d60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5d4a:	f001 fb39 	bl	d73c0 <__aeabi_atexit>
    return &factory;
}
   d5d4e:	4804      	ldr	r0, [pc, #16]	; (d5d60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5d50:	bd10      	pop	{r4, pc}
   d5d52:	bf00      	nop
   d5d54:	2003e3fc 	.word	0x2003e3fc
   d5d58:	2003e2f0 	.word	0x2003e2f0
   d5d5c:	000d5b3d 	.word	0x000d5b3d
   d5d60:	2003e27c 	.word	0x2003e27c

000d5d64 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5d64:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5d66:	2500      	movs	r5, #0
   d5d68:	4604      	mov	r4, r0
   d5d6a:	6005      	str	r5, [r0, #0]
   d5d6c:	6045      	str	r5, [r0, #4]
   d5d6e:	6085      	str	r5, [r0, #8]
   d5d70:	6105      	str	r5, [r0, #16]
   d5d72:	6145      	str	r5, [r0, #20]
   d5d74:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5d76:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d5d7a:	f7fe fced 	bl	d4758 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5d7e:	f7ff ffb9 	bl	d5cf4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d5d82:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5d84:	f7ff ffd2 	bl	d5d2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5d88:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5d8a:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	bd38      	pop	{r3, r4, r5, pc}

000d5d90 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5d90:	b510      	push	{r4, lr}
    static LogManager mgr;
   d5d92:	4c0a      	ldr	r4, [pc, #40]	; (d5dbc <_ZN5spark10LogManager8instanceEv+0x2c>)
   d5d94:	6823      	ldr	r3, [r4, #0]
   d5d96:	07db      	lsls	r3, r3, #31
   d5d98:	d40e      	bmi.n	d5db8 <_ZN5spark10LogManager8instanceEv+0x28>
   d5d9a:	4620      	mov	r0, r4
   d5d9c:	f7fe f98c 	bl	d40b8 <__cxa_guard_acquire>
   d5da0:	b150      	cbz	r0, d5db8 <_ZN5spark10LogManager8instanceEv+0x28>
   d5da2:	4807      	ldr	r0, [pc, #28]	; (d5dc0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5da4:	f7ff ffde 	bl	d5d64 <_ZN5spark10LogManagerC1Ev>
   d5da8:	4620      	mov	r0, r4
   d5daa:	f7fe f98a 	bl	d40c2 <__cxa_guard_release>
   d5dae:	4a05      	ldr	r2, [pc, #20]	; (d5dc4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5db0:	4905      	ldr	r1, [pc, #20]	; (d5dc8 <_ZN5spark10LogManager8instanceEv+0x38>)
   d5db2:	4803      	ldr	r0, [pc, #12]	; (d5dc0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5db4:	f001 fb04 	bl	d73c0 <__aeabi_atexit>
    return &mgr;
}
   d5db8:	4801      	ldr	r0, [pc, #4]	; (d5dc0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5dba:	bd10      	pop	{r4, pc}
   d5dbc:	2003e3d0 	.word	0x2003e3d0
   d5dc0:	2003e3d4 	.word	0x2003e3d4
   d5dc4:	2003e2f0 	.word	0x2003e2f0
   d5dc8:	000d61fb 	.word	0x000d61fb

000d5dcc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5dcc:	2300      	movs	r3, #0
   d5dce:	4a02      	ldr	r2, [pc, #8]	; (d5dd8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5dd0:	4902      	ldr	r1, [pc, #8]	; (d5ddc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5dd2:	4803      	ldr	r0, [pc, #12]	; (d5de0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d5dd4:	f7fe bdc0 	b.w	d4958 <log_set_callbacks>
   d5dd8:	000d60dd 	.word	0x000d60dd
   d5ddc:	000d606d 	.word	0x000d606d
   d5de0:	000d5ff5 	.word	0x000d5ff5

000d5de4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5de4:	2300      	movs	r3, #0
   d5de6:	461a      	mov	r2, r3
   d5de8:	4619      	mov	r1, r3
   d5dea:	4618      	mov	r0, r3
   d5dec:	f7fe bdb4 	b.w	d4958 <log_set_callbacks>

000d5df0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5df0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5df2:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d5df4:	688e      	ldr	r6, [r1, #8]
   d5df6:	f851 3b04 	ldr.w	r3, [r1], #4
   d5dfa:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5dfe:	4605      	mov	r5, r0
   d5e00:	a801      	add	r0, sp, #4
   d5e02:	f7ff f983 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d5e06:	4622      	mov	r2, r4
   d5e08:	4631      	mov	r1, r6
   d5e0a:	4628      	mov	r0, r5
   d5e0c:	f7ff fe5a 	bl	d5ac4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e10:	a801      	add	r0, sp, #4
   d5e12:	f7ff f982 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e16:	4628      	mov	r0, r5
   d5e18:	b002      	add	sp, #8
   d5e1a:	bd70      	pop	{r4, r5, r6, pc}

000d5e1c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e1e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d5e20:	690e      	ldr	r6, [r1, #16]
   d5e22:	f851 3b04 	ldr.w	r3, [r1], #4
   d5e26:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5e2a:	4605      	mov	r5, r0
   d5e2c:	a801      	add	r0, sp, #4
   d5e2e:	f7ff f96d 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5e32:	4622      	mov	r2, r4
   d5e34:	4631      	mov	r1, r6
   d5e36:	4628      	mov	r0, r5
   d5e38:	f7ff fe5f 	bl	d5afa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e3c:	a801      	add	r0, sp, #4
   d5e3e:	f7ff f96c 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e42:	4628      	mov	r0, r5
   d5e44:	b002      	add	sp, #8
   d5e46:	bd70      	pop	{r4, r5, r6, pc}

000d5e48 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e4a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d5e4c:	68ce      	ldr	r6, [r1, #12]
   d5e4e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5e52:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5e56:	4605      	mov	r5, r0
   d5e58:	a801      	add	r0, sp, #4
   d5e5a:	f7ff f957 	bl	d510c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5e5e:	4622      	mov	r2, r4
   d5e60:	4631      	mov	r1, r6
   d5e62:	4628      	mov	r0, r5
   d5e64:	f7ff fe06 	bl	d5a74 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e68:	a801      	add	r0, sp, #4
   d5e6a:	f7ff f956 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5e6e:	4628      	mov	r0, r5
   d5e70:	b002      	add	sp, #8
   d5e72:	bd70      	pop	{r4, r5, r6, pc}

000d5e74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5e74:	b530      	push	{r4, r5, lr}
   d5e76:	b08b      	sub	sp, #44	; 0x2c
   d5e78:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5e7a:	4601      	mov	r1, r0
   d5e7c:	a804      	add	r0, sp, #16
   d5e7e:	f7ff ffb7 	bl	d5df0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d5e82:	a804      	add	r0, sp, #16
   d5e84:	f7ff fd29 	bl	d58da <_ZN5spark18JSONObjectIterator4nextEv>
   d5e88:	b1e8      	cbz	r0, d5ec6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d5e8a:	a904      	add	r1, sp, #16
   d5e8c:	4668      	mov	r0, sp
   d5e8e:	f7ff ffdb 	bl	d5e48 <_ZNK5spark18JSONObjectIterator4nameEv>
   d5e92:	490f      	ldr	r1, [pc, #60]	; (d5ed0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d5e94:	9802      	ldr	r0, [sp, #8]
   d5e96:	f7ff fe91 	bl	d5bbc <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d5e9a:	4604      	mov	r4, r0
   d5e9c:	b110      	cbz	r0, d5ea4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d5e9e:	1c2c      	adds	r4, r5, #0
   d5ea0:	bf18      	it	ne
   d5ea2:	2401      	movne	r4, #1
   d5ea4:	a801      	add	r0, sp, #4
   d5ea6:	f7ff f938 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5eaa:	2c00      	cmp	r4, #0
   d5eac:	d0e9      	beq.n	d5e82 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d5eae:	a904      	add	r1, sp, #16
   d5eb0:	4668      	mov	r0, sp
   d5eb2:	f7ff ffb3 	bl	d5e1c <_ZNK5spark18JSONObjectIterator5valueEv>
   d5eb6:	4668      	mov	r0, sp
   d5eb8:	f7ff fcef 	bl	d589a <_ZNK5spark9JSONValue5toIntEv>
   d5ebc:	6028      	str	r0, [r5, #0]
   d5ebe:	a801      	add	r0, sp, #4
   d5ec0:	f7ff f92b 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ec4:	e7dd      	b.n	d5e82 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d5ec6:	a805      	add	r0, sp, #20
   d5ec8:	f7ff f927 	bl	d511a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d5ecc:	b00b      	add	sp, #44	; 0x2c
   d5ece:	bd30      	pop	{r4, r5, pc}
   d5ed0:	000d7c64 	.word	0x000d7c64

000d5ed4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ed6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5ed8:	4620      	mov	r0, r4
   d5eda:	4913      	ldr	r1, [pc, #76]	; (d5f28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5edc:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5ede:	f001 fc63 	bl	d77a8 <strcmp>
   d5ee2:	b940      	cbnz	r0, d5ef6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d5ee4:	f001 f980 	bl	d71e8 <_Z16_fetch_usbserialv>
   d5ee8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5eec:	f001 f96c 	bl	d71c8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5ef0:	f001 f97a 	bl	d71e8 <_Z16_fetch_usbserialv>
   d5ef4:	e015      	b.n	d5f22 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d5ef6:	490d      	ldr	r1, [pc, #52]	; (d5f2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d5ef8:	4620      	mov	r0, r4
   d5efa:	f001 fc55 	bl	d77a8 <strcmp>
   d5efe:	b978      	cbnz	r0, d5f20 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5f00:	a902      	add	r1, sp, #8
   d5f02:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d5f06:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d5f0a:	4628      	mov	r0, r5
   d5f0c:	f7ff ffb2 	bl	d5e74 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5f10:	f001 f8de 	bl	d70d0 <_Z22__fetch_global_Serial1v>
   d5f14:	9901      	ldr	r1, [sp, #4]
   d5f16:	f001 f8d5 	bl	d70c4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5f1a:	f001 f8d9 	bl	d70d0 <_Z22__fetch_global_Serial1v>
   d5f1e:	e000      	b.n	d5f22 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d5f20:	2000      	movs	r0, #0
}
   d5f22:	b003      	add	sp, #12
   d5f24:	bd30      	pop	{r4, r5, pc}
   d5f26:	bf00      	nop
   d5f28:	000d7c69 	.word	0x000d7c69
   d5f2c:	000d7c70 	.word	0x000d7c70

000d5f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f30:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5f32:	6804      	ldr	r4, [r0, #0]
   d5f34:	6843      	ldr	r3, [r0, #4]
   d5f36:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f38:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5f3a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f3e:	42a6      	cmp	r6, r4
   d5f40:	d005      	beq.n	d5f4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5f42:	f104 0008 	add.w	r0, r4, #8
   d5f46:	f7ff fff3 	bl	d5f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5f4a:	3414      	adds	r4, #20
   d5f4c:	e7f7      	b.n	d5f3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f4e:	6828      	ldr	r0, [r5, #0]
   d5f50:	f7fe fd86 	bl	d4a60 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5f54:	4628      	mov	r0, r5
   d5f56:	bd70      	pop	{r4, r5, r6, pc}

000d5f58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f58:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5f5a:	6804      	ldr	r4, [r0, #0]
   d5f5c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5f5e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5f60:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f64:	42a6      	cmp	r6, r4
   d5f66:	d004      	beq.n	d5f72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5f68:	4620      	mov	r0, r4
   d5f6a:	f000 ffa7 	bl	d6ebc <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5f6e:	3410      	adds	r4, #16
   d5f70:	e7f8      	b.n	d5f64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f72:	6828      	ldr	r0, [r5, #0]
   d5f74:	f7fe fd74 	bl	d4a60 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5f78:	4628      	mov	r0, r5
   d5f7a:	bd70      	pop	{r4, r5, r6, pc}

000d5f7c <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d5f7c:	b510      	push	{r4, lr}
   d5f7e:	4604      	mov	r4, r0
   d5f80:	300c      	adds	r0, #12
   d5f82:	f7ff ffd5 	bl	d5f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5f86:	4620      	mov	r0, r4
   d5f88:	f7ff ffe6 	bl	d5f58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	bd10      	pop	{r4, pc}

000d5f90 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5f90:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5f92:	4b04      	ldr	r3, [pc, #16]	; (d5fa4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5f94:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5f96:	f840 3b04 	str.w	r3, [r0], #4
   d5f9a:	f7ff ffef 	bl	d5f7c <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	bd10      	pop	{r4, pc}
   d5fa2:	bf00      	nop
   d5fa4:	000d7958 	.word	0x000d7958

000d5fa8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d5fa8:	b510      	push	{r4, lr}
   d5faa:	4604      	mov	r4, r0
   d5fac:	f7ff fff0 	bl	d5f90 <_ZN5spark16StreamLogHandlerD1Ev>
   d5fb0:	4620      	mov	r0, r4
   d5fb2:	2124      	movs	r1, #36	; 0x24
   d5fb4:	f001 fa09 	bl	d73ca <_ZdlPvj>
   d5fb8:	4620      	mov	r0, r4
   d5fba:	bd10      	pop	{r4, pc}

000d5fbc <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d5fbc:	b510      	push	{r4, lr}
   d5fbe:	4b03      	ldr	r3, [pc, #12]	; (d5fcc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5fc0:	6003      	str	r3, [r0, #0]
   d5fc2:	4604      	mov	r4, r0
   d5fc4:	f7ff ffe4 	bl	d5f90 <_ZN5spark16StreamLogHandlerD1Ev>
   d5fc8:	4620      	mov	r0, r4
   d5fca:	bd10      	pop	{r4, pc}
   d5fcc:	000d7c54 	.word	0x000d7c54

000d5fd0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5fd0:	b510      	push	{r4, lr}
   d5fd2:	4604      	mov	r4, r0
   d5fd4:	f7ff fff2 	bl	d5fbc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5fd8:	4620      	mov	r0, r4
   d5fda:	2124      	movs	r1, #36	; 0x24
   d5fdc:	f001 f9f5 	bl	d73ca <_ZdlPvj>
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	bd10      	pop	{r4, pc}

000d5fe4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5fe4:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5fe6:	6803      	ldr	r3, [r0, #0]
   d5fe8:	4604      	mov	r4, r0
   d5fea:	6818      	ldr	r0, [r3, #0]
   d5fec:	f7fe fbcc 	bl	d4788 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d5ff0:	4620      	mov	r0, r4
   d5ff2:	bd10      	pop	{r4, pc}

000d5ff4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ff8:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d5ffa:	4b1b      	ldr	r3, [pc, #108]	; (d6068 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d5ffc:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6002:	b085      	sub	sp, #20
   d6004:	4682      	mov	sl, r0
   d6006:	460e      	mov	r6, r1
   d6008:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d600a:	bb53      	cbnz	r3, d6062 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d600c:	f7ff fec0 	bl	d5d90 <_ZN5spark10LogManager8instanceEv>
   d6010:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6012:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6014:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6016:	f7ff fde5 	bl	d5be4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d601a:	7b23      	ldrb	r3, [r4, #12]
   d601c:	b9f3      	cbnz	r3, d605c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d601e:	2301      	movs	r3, #1
   d6020:	7323      	strb	r3, [r4, #12]
   d6022:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6024:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6026:	b2f6      	uxtb	r6, r6
   d6028:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d602c:	454d      	cmp	r5, r9
   d602e:	d013      	beq.n	d6058 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6030:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6034:	4641      	mov	r1, r8
   d6036:	1d38      	adds	r0, r7, #4
   d6038:	f7ff fe30 	bl	d5c9c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d603c:	4286      	cmp	r6, r0
   d603e:	d3f5      	bcc.n	d602c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6040:	683b      	ldr	r3, [r7, #0]
   d6042:	f8cd b000 	str.w	fp, [sp]
   d6046:	689b      	ldr	r3, [r3, #8]
   d6048:	469e      	mov	lr, r3
   d604a:	4638      	mov	r0, r7
   d604c:	4643      	mov	r3, r8
   d604e:	4632      	mov	r2, r6
   d6050:	4651      	mov	r1, sl
   d6052:	4677      	mov	r7, lr
   d6054:	47b8      	blx	r7
   d6056:	e7e9      	b.n	d602c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6058:	2300      	movs	r3, #0
   d605a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d605c:	a803      	add	r0, sp, #12
   d605e:	f7ff ffc1 	bl	d5fe4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d6062:	b005      	add	sp, #20
   d6064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6068:	e000ed00 	.word	0xe000ed00

000d606c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d606c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6070:	4699      	mov	r9, r3
   d6072:	4b19      	ldr	r3, [pc, #100]	; (d60d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d6074:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6076:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d607a:	4607      	mov	r7, r0
   d607c:	4688      	mov	r8, r1
   d607e:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6080:	bb33      	cbnz	r3, d60d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d6082:	f7ff fe85 	bl	d5d90 <_ZN5spark10LogManager8instanceEv>
   d6086:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6088:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d608a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d608c:	f7ff fdaa 	bl	d5be4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6090:	7b23      	ldrb	r3, [r4, #12]
   d6092:	b9d3      	cbnz	r3, d60ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6094:	2301      	movs	r3, #1
   d6096:	7323      	strb	r3, [r4, #12]
   d6098:	6825      	ldr	r5, [r4, #0]
   d609a:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d609c:	fa5f fb86 	uxtb.w	fp, r6
   d60a0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d60a4:	4555      	cmp	r5, sl
   d60a6:	d00e      	beq.n	d60c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d60a8:	f855 6b04 	ldr.w	r6, [r5], #4
   d60ac:	4649      	mov	r1, r9
   d60ae:	1d30      	adds	r0, r6, #4
   d60b0:	f7ff fdf4 	bl	d5c9c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d60b4:	4583      	cmp	fp, r0
   d60b6:	d3f5      	bcc.n	d60a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d60b8:	6833      	ldr	r3, [r6, #0]
   d60ba:	4642      	mov	r2, r8
   d60bc:	68db      	ldr	r3, [r3, #12]
   d60be:	4639      	mov	r1, r7
   d60c0:	4630      	mov	r0, r6
   d60c2:	4798      	blx	r3
   d60c4:	e7ee      	b.n	d60a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d60c6:	2300      	movs	r3, #0
   d60c8:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d60ca:	a801      	add	r0, sp, #4
   d60cc:	f7ff ff8a 	bl	d5fe4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d60d0:	b003      	add	sp, #12
   d60d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d60d6:	bf00      	nop
   d60d8:	e000ed00 	.word	0xe000ed00

000d60dc <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d60dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d60e0:	4b15      	ldr	r3, [pc, #84]	; (d6138 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d60e2:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d60e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d60e8:	4604      	mov	r4, r0
   d60ea:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d60ec:	b9fb      	cbnz	r3, d612e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d60ee:	f7ff fe4f 	bl	d5d90 <_ZN5spark10LogManager8instanceEv>
   d60f2:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d60f4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d60f6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d60f8:	f7ff fd74 	bl	d5be4 <_ZN14RecursiveMutex4lockEv>
   d60fc:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6100:	2646      	movs	r6, #70	; 0x46
   d6102:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6106:	42af      	cmp	r7, r5
   d6108:	d107      	bne.n	d611a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d610a:	a801      	add	r0, sp, #4
   d610c:	f7ff ff6a 	bl	d5fe4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6110:	42b4      	cmp	r4, r6
   d6112:	bfb4      	ite	lt
   d6114:	2000      	movlt	r0, #0
   d6116:	2001      	movge	r0, #1
   d6118:	e00a      	b.n	d6130 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d611a:	f855 0b04 	ldr.w	r0, [r5], #4
   d611e:	4641      	mov	r1, r8
   d6120:	3004      	adds	r0, #4
   d6122:	f7ff fdbb 	bl	d5c9c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6126:	4286      	cmp	r6, r0
   d6128:	bfa8      	it	ge
   d612a:	4606      	movge	r6, r0
   d612c:	e7eb      	b.n	d6106 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d612e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6130:	b002      	add	sp, #8
   d6132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6136:	bf00      	nop
   d6138:	e000ed00 	.word	0xe000ed00

000d613c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d613c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d613e:	6803      	ldr	r3, [r0, #0]
   d6140:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6142:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6144:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6148:	429a      	cmp	r2, r3
   d614a:	4618      	mov	r0, r3
   d614c:	d00e      	beq.n	d616c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d614e:	6806      	ldr	r6, [r0, #0]
   d6150:	680d      	ldr	r5, [r1, #0]
   d6152:	42ae      	cmp	r6, r5
   d6154:	f103 0304 	add.w	r3, r3, #4
   d6158:	d1f6      	bne.n	d6148 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d615a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d615c:	1a52      	subs	r2, r2, r1
   d615e:	f001 fabf 	bl	d76e0 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6162:	6863      	ldr	r3, [r4, #4]
   d6164:	3b01      	subs	r3, #1
   d6166:	6063      	str	r3, [r4, #4]
    return true;
   d6168:	2001      	movs	r0, #1
}
   d616a:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d616c:	2000      	movs	r0, #0
   d616e:	bd70      	pop	{r4, r5, r6, pc}

000d6170 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6172:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6174:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6176:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6178:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d617a:	f7ff fd33 	bl	d5be4 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d617e:	a901      	add	r1, sp, #4
   d6180:	4620      	mov	r0, r4
   d6182:	f7ff ffdb 	bl	d613c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6186:	b920      	cbnz	r0, d6192 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6188:	a803      	add	r0, sp, #12
   d618a:	f7ff ff2b 	bl	d5fe4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d618e:	b004      	add	sp, #16
   d6190:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6192:	6863      	ldr	r3, [r4, #4]
   d6194:	2b00      	cmp	r3, #0
   d6196:	d1f7      	bne.n	d6188 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6198:	f7ff fe24 	bl	d5de4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d619c:	e7f4      	b.n	d6188 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d619e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d619e:	b570      	push	{r4, r5, r6, lr}
   d61a0:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d61a2:	6943      	ldr	r3, [r0, #20]
   d61a4:	2618      	movs	r6, #24
   d61a6:	4604      	mov	r4, r0
   d61a8:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d61ac:	42ae      	cmp	r6, r5
   d61ae:	d015      	beq.n	d61dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d61b0:	f105 0110 	add.w	r1, r5, #16
   d61b4:	4620      	mov	r0, r4
   d61b6:	f7ff ffc1 	bl	d613c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d61ba:	6863      	ldr	r3, [r4, #4]
   d61bc:	b90b      	cbnz	r3, d61c2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d61be:	f7ff fe11 	bl	d5de4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d61c2:	69e0      	ldr	r0, [r4, #28]
   d61c4:	6929      	ldr	r1, [r5, #16]
   d61c6:	6803      	ldr	r3, [r0, #0]
   d61c8:	68db      	ldr	r3, [r3, #12]
   d61ca:	4798      	blx	r3
        if (h.stream) {
   d61cc:	6969      	ldr	r1, [r5, #20]
   d61ce:	b119      	cbz	r1, d61d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d61d0:	6a20      	ldr	r0, [r4, #32]
   d61d2:	6803      	ldr	r3, [r0, #0]
   d61d4:	68db      	ldr	r3, [r3, #12]
   d61d6:	4798      	blx	r3
   d61d8:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d61da:	e7e7      	b.n	d61ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d61dc:	6925      	ldr	r5, [r4, #16]
   d61de:	6963      	ldr	r3, [r4, #20]
   d61e0:	2618      	movs	r6, #24
   d61e2:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d61e6:	42b5      	cmp	r5, r6
   d61e8:	d004      	beq.n	d61f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d61ea:	4628      	mov	r0, r5
   d61ec:	f000 fe66 	bl	d6ebc <_ZN6StringD1Ev>
   d61f0:	3518      	adds	r5, #24
   d61f2:	e7f8      	b.n	d61e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d61f4:	2300      	movs	r3, #0
   d61f6:	6163      	str	r3, [r4, #20]
   d61f8:	bd70      	pop	{r4, r5, r6, pc}

000d61fa <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d61fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d61fc:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d61fe:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6200:	f7ff fdf0 	bl	d5de4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6204:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6208:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d620c:	f7ff fcea 	bl	d5be4 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6210:	4620      	mov	r0, r4
   d6212:	f7ff ffc4 	bl	d619e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6216:	4628      	mov	r0, r5
   d6218:	f7ff fee4 	bl	d5fe4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d621c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d621e:	b108      	cbz	r0, d6224 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6220:	f7fe faa2 	bl	d4768 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6224:	6925      	ldr	r5, [r4, #16]
   d6226:	6963      	ldr	r3, [r4, #20]
   d6228:	2618      	movs	r6, #24
   d622a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d622e:	42b5      	cmp	r5, r6
   d6230:	d004      	beq.n	d623c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6232:	4628      	mov	r0, r5
   d6234:	f000 fe42 	bl	d6ebc <_ZN6StringD1Ev>
   d6238:	3518      	adds	r5, #24
   d623a:	e7f8      	b.n	d622e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d623c:	6920      	ldr	r0, [r4, #16]
   d623e:	f7fe fc0f 	bl	d4a60 <free>
   d6242:	6820      	ldr	r0, [r4, #0]
   d6244:	f7fe fc0c 	bl	d4a60 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6248:	4620      	mov	r0, r4
   d624a:	b002      	add	sp, #8
   d624c:	bd70      	pop	{r4, r5, r6, pc}

000d624e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d624e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6250:	680a      	ldr	r2, [r1, #0]
   d6252:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6254:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6256:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6258:	684a      	ldr	r2, [r1, #4]
   d625a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d625c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d625e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6260:	688a      	ldr	r2, [r1, #8]
   d6262:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6264:	608b      	str	r3, [r1, #8]
   d6266:	4770      	bx	lr

000d6268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6268:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d626a:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d626c:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d626e:	6003      	str	r3, [r0, #0]
   d6270:	6043      	str	r3, [r0, #4]
   d6272:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6274:	f7ff ffeb 	bl	d624e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6278:	4620      	mov	r0, r4
   d627a:	bd10      	pop	{r4, pc}

000d627c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d627c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d627e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6280:	4604      	mov	r4, r0
   d6282:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6284:	d925      	bls.n	d62d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6286:	4290      	cmp	r0, r2
   d6288:	d224      	bcs.n	d62d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d628a:	1a55      	subs	r5, r2, r1
   d628c:	3d14      	subs	r5, #20
   d628e:	442c      	add	r4, r5
   d6290:	f1a1 0714 	sub.w	r7, r1, #20
   d6294:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6298:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d629a:	f1a5 0308 	sub.w	r3, r5, #8
   d629e:	429f      	cmp	r7, r3
   d62a0:	d037      	beq.n	d6312 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d62a2:	b184      	cbz	r4, d62c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d62a4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d62a8:	6023      	str	r3, [r4, #0]
   d62aa:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d62ae:	80a3      	strh	r3, [r4, #4]
   d62b0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d62b4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d62b6:	60a6      	str	r6, [r4, #8]
   d62b8:	60e6      	str	r6, [r4, #12]
   d62ba:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d62bc:	4629      	mov	r1, r5
   d62be:	f104 0008 	add.w	r0, r4, #8
   d62c2:	f7ff ffc4 	bl	d624e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d62c6:	4628      	mov	r0, r5
   d62c8:	f7ff fe32 	bl	d5f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d62cc:	3c14      	subs	r4, #20
   d62ce:	3d14      	subs	r5, #20
   d62d0:	e7e3      	b.n	d629a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d62d2:	d01e      	beq.n	d6312 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d62d4:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d62d8:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d62da:	f1a5 0308 	sub.w	r3, r5, #8
   d62de:	429e      	cmp	r6, r3
   d62e0:	d017      	beq.n	d6312 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d62e2:	b184      	cbz	r4, d6306 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d62e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d62e8:	6023      	str	r3, [r4, #0]
   d62ea:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d62ee:	80a3      	strh	r3, [r4, #4]
   d62f0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d62f4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d62f6:	60a7      	str	r7, [r4, #8]
   d62f8:	60e7      	str	r7, [r4, #12]
   d62fa:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d62fc:	4629      	mov	r1, r5
   d62fe:	f104 0008 	add.w	r0, r4, #8
   d6302:	f7ff ffa4 	bl	d624e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6306:	4628      	mov	r0, r5
   d6308:	f7ff fe12 	bl	d5f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d630c:	3414      	adds	r4, #20
   d630e:	3514      	adds	r5, #20
   d6310:	e7e3      	b.n	d62da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6314 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6316:	6845      	ldr	r5, [r0, #4]
   d6318:	6883      	ldr	r3, [r0, #8]
   d631a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d631c:	4604      	mov	r4, r0
   d631e:	460e      	mov	r6, r1
   d6320:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6322:	db0e      	blt.n	d6342 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6324:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6326:	2d00      	cmp	r5, #0
   d6328:	dd05      	ble.n	d6336 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d632a:	00a9      	lsls	r1, r5, #2
   d632c:	6800      	ldr	r0, [r0, #0]
   d632e:	f7fe fb9f 	bl	d4a70 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6332:	b920      	cbnz	r0, d633e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6336:	6800      	ldr	r0, [r0, #0]
   d6338:	f7fe fb92 	bl	d4a60 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d633c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d633e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6340:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6342:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6344:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6346:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d634a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d634e:	1a52      	subs	r2, r2, r1
   d6350:	1d08      	adds	r0, r1, #4
   d6352:	f001 f9c5 	bl	d76e0 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6356:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d635a:	6863      	ldr	r3, [r4, #4]
   d635c:	3301      	adds	r3, #1
   d635e:	6063      	str	r3, [r4, #4]
   d6360:	2001      	movs	r0, #1
    return true;
}
   d6362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6364 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6364:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6366:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6368:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d636a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d636c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d636e:	f7ff fc39 	bl	d5be4 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d6372:	6823      	ldr	r3, [r4, #0]
   d6374:	6861      	ldr	r1, [r4, #4]
   d6376:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d637a:	4283      	cmp	r3, r0
   d637c:	461a      	mov	r2, r3
   d637e:	d009      	beq.n	d6394 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d6380:	6812      	ldr	r2, [r2, #0]
   d6382:	42aa      	cmp	r2, r5
   d6384:	f103 0304 	add.w	r3, r3, #4
   d6388:	d1f7      	bne.n	d637a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d638a:	a801      	add	r0, sp, #4
   d638c:	f7ff fe2a 	bl	d5fe4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6390:	2500      	movs	r5, #0
   d6392:	e00e      	b.n	d63b2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6394:	462a      	mov	r2, r5
   d6396:	4620      	mov	r0, r4
   d6398:	f7ff ffbc 	bl	d6314 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d639c:	4605      	mov	r5, r0
   d639e:	2800      	cmp	r0, #0
   d63a0:	d0f3      	beq.n	d638a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d63a2:	6863      	ldr	r3, [r4, #4]
   d63a4:	2b01      	cmp	r3, #1
   d63a6:	d101      	bne.n	d63ac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d63a8:	f7ff fd10 	bl	d5dcc <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d63ac:	a801      	add	r0, sp, #4
   d63ae:	f7ff fe19 	bl	d5fe4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d63b2:	4628      	mov	r0, r5
   d63b4:	b003      	add	sp, #12
   d63b6:	bd30      	pop	{r4, r5, pc}

000d63b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d63b8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d63ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63bc:	4606      	mov	r6, r0
   d63be:	460c      	mov	r4, r1
   d63c0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d63c2:	d914      	bls.n	d63ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d63c4:	4290      	cmp	r0, r2
   d63c6:	d213      	bcs.n	d63f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d63c8:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d63cc:	1a6c      	subs	r4, r5, r1
   d63ce:	f1a1 0710 	sub.w	r7, r1, #16
   d63d2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d63d4:	42af      	cmp	r7, r5
   d63d6:	d018      	beq.n	d640a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d63d8:	b11c      	cbz	r4, d63e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d63da:	4629      	mov	r1, r5
   d63dc:	4620      	mov	r0, r4
   d63de:	f000 fd5d 	bl	d6e9c <_ZN6StringC1EOS_>
                end->~T();
   d63e2:	4628      	mov	r0, r5
   d63e4:	f000 fd6a 	bl	d6ebc <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d63e8:	3d10      	subs	r5, #16
   d63ea:	3c10      	subs	r4, #16
   d63ec:	e7f2      	b.n	d63d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d63ee:	d00c      	beq.n	d640a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d63f0:	42ac      	cmp	r4, r5
   d63f2:	d00a      	beq.n	d640a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d63f4:	b11e      	cbz	r6, d63fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d63f6:	4621      	mov	r1, r4
   d63f8:	4630      	mov	r0, r6
   d63fa:	f000 fd4f 	bl	d6e9c <_ZN6StringC1EOS_>
                p->~T();
   d63fe:	4620      	mov	r0, r4
   d6400:	f000 fd5c 	bl	d6ebc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6404:	3410      	adds	r4, #16
   d6406:	3610      	adds	r6, #16
   d6408:	e7f2      	b.n	d63f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d640a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d640c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d640c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d640e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6410:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6412:	dd0b      	ble.n	d642c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6414:	0130      	lsls	r0, r6, #4
   d6416:	f7fe fb1b 	bl	d4a50 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d641a:	4604      	mov	r4, r0
   d641c:	b170      	cbz	r0, d643c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d641e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6422:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6426:	f7ff ffc7 	bl	d63b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d642a:	e000      	b.n	d642e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d642c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d642e:	6828      	ldr	r0, [r5, #0]
   d6430:	f7fe fb16 	bl	d4a60 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6434:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6436:	60ae      	str	r6, [r5, #8]
        return true;
   d6438:	2001      	movs	r0, #1
   d643a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d643c:	bd70      	pop	{r4, r5, r6, pc}

000d643e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d643e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6442:	2300      	movs	r3, #0
   d6444:	b095      	sub	sp, #84	; 0x54
   d6446:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6448:	2246      	movs	r2, #70	; 0x46
   d644a:	6003      	str	r3, [r0, #0]
   d644c:	6043      	str	r3, [r0, #4]
   d644e:	6083      	str	r3, [r0, #8]
   d6450:	60c3      	str	r3, [r0, #12]
   d6452:	6103      	str	r3, [r0, #16]
   d6454:	6143      	str	r3, [r0, #20]
   d6456:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6458:	9102      	str	r1, [sp, #8]
   d645a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d645e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6460:	4299      	cmp	r1, r3
   d6462:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6464:	9309      	str	r3, [sp, #36]	; 0x24
   d6466:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6468:	f340 809d 	ble.w	d65a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d646c:	a808      	add	r0, sp, #32
   d646e:	f7ff ffcd 	bl	d640c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6472:	2800      	cmp	r0, #0
   d6474:	f040 8097 	bne.w	d65a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6478:	e08e      	b.n	d6598 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d647a:	4621      	mov	r1, r4
   d647c:	a80b      	add	r0, sp, #44	; 0x2c
   d647e:	f000 fd0d 	bl	d6e9c <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6482:	a90b      	add	r1, sp, #44	; 0x2c
   d6484:	a80f      	add	r0, sp, #60	; 0x3c
   d6486:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6488:	f000 fd08 	bl	d6e9c <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d648c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d648e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6490:	4299      	cmp	r1, r3
   d6492:	f2c0 80ce 	blt.w	d6632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6496:	3101      	adds	r1, #1
   d6498:	a808      	add	r0, sp, #32
   d649a:	f7ff ffb7 	bl	d640c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d649e:	2800      	cmp	r0, #0
   d64a0:	f040 80c7 	bne.w	d6632 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d64a4:	a80f      	add	r0, sp, #60	; 0x3c
   d64a6:	f000 fd09 	bl	d6ebc <_ZN6StringD1Ev>
   d64aa:	a80b      	add	r0, sp, #44	; 0x2c
   d64ac:	f000 fd06 	bl	d6ebc <_ZN6StringD1Ev>
   d64b0:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d64b2:	42a7      	cmp	r7, r4
   d64b4:	d1e1      	bne.n	d647a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d64b6:	2600      	movs	r6, #0
   d64b8:	960b      	str	r6, [sp, #44]	; 0x2c
   d64ba:	960c      	str	r6, [sp, #48]	; 0x30
   d64bc:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d64be:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d64c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d64c2:	429e      	cmp	r6, r3
   d64c4:	f280 80a8 	bge.w	d6618 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d64c8:	0133      	lsls	r3, r6, #4
   d64ca:	9a08      	ldr	r2, [sp, #32]
   d64cc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d64ce:	9306      	str	r3, [sp, #24]
        if (!category) {
   d64d0:	2b00      	cmp	r3, #0
   d64d2:	f000 809f 	beq.w	d6614 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d64d6:	2314      	movs	r3, #20
   d64d8:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d64da:	f8cd 901c 	str.w	r9, [sp, #28]
   d64de:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d64e0:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d64e2:	a907      	add	r1, sp, #28
   d64e4:	a806      	add	r0, sp, #24
   d64e6:	f7ff fb2c 	bl	d5b42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d64ea:	4607      	mov	r7, r0
   d64ec:	2800      	cmp	r0, #0
   d64ee:	f000 8091 	beq.w	d6614 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d64f2:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d64f4:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d64f6:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d64fa:	9a07      	ldr	r2, [sp, #28]
   d64fc:	4620      	mov	r0, r4
   d64fe:	f7ff fb8d 	bl	d5c1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6502:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6506:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6508:	f1b8 0f00 	cmp.w	r8, #0
   d650c:	d153      	bne.n	d65b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d650e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6512:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6516:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d651a:	970f      	str	r7, [sp, #60]	; 0x3c
   d651c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6520:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6524:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6528:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d652c:	6867      	ldr	r7, [r4, #4]
   d652e:	68a3      	ldr	r3, [r4, #8]
   d6530:	429f      	cmp	r7, r3
   d6532:	da4f      	bge.n	d65d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6534:	9b00      	ldr	r3, [sp, #0]
   d6536:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d653a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d653c:	2214      	movs	r2, #20
   d653e:	4353      	muls	r3, r2
   d6540:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6544:	fb02 b201 	mla	r2, r2, r1, fp
   d6548:	f107 0014 	add.w	r0, r7, #20
   d654c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d654e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d6550:	f7ff fe94 	bl	d627c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6554:	b1a7      	cbz	r7, d6580 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6556:	9b03      	ldr	r3, [sp, #12]
   d6558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d655a:	f84b 2003 	str.w	r2, [fp, r3]
   d655e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d6562:	80bb      	strh	r3, [r7, #4]
   d6564:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d6568:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d656a:	f8c7 9008 	str.w	r9, [r7, #8]
   d656e:	f8c7 900c 	str.w	r9, [r7, #12]
   d6572:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6576:	a911      	add	r1, sp, #68	; 0x44
   d6578:	f107 0008 	add.w	r0, r7, #8
   d657c:	f7ff fe67 	bl	d624e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6580:	6863      	ldr	r3, [r4, #4]
   d6582:	3301      	adds	r3, #1
   d6584:	6063      	str	r3, [r4, #4]
   d6586:	a811      	add	r0, sp, #68	; 0x44
   d6588:	f7ff fcd2 	bl	d5f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d658c:	f1b8 0f00 	cmp.w	r8, #0
   d6590:	d011      	beq.n	d65b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6592:	a80b      	add	r0, sp, #44	; 0x2c
   d6594:	f7ff fccc 	bl	d5f30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6598:	a808      	add	r0, sp, #32
   d659a:	f7ff fcdd 	bl	d5f58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d659e:	4628      	mov	r0, r5
   d65a0:	b015      	add	sp, #84	; 0x54
   d65a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d65a6:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d65aa:	f8da 3004 	ldr.w	r3, [sl, #4]
   d65ae:	2714      	movs	r7, #20
   d65b0:	fb07 4703 	mla	r7, r7, r3, r4
   d65b4:	e77d      	b.n	d64b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d65b6:	6823      	ldr	r3, [r4, #0]
   d65b8:	9a00      	ldr	r2, [sp, #0]
   d65ba:	2414      	movs	r4, #20
   d65bc:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d65c0:	9b06      	ldr	r3, [sp, #24]
   d65c2:	781b      	ldrb	r3, [r3, #0]
   d65c4:	bb23      	cbnz	r3, d6610 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d65c6:	f8da 3000 	ldr.w	r3, [sl]
   d65ca:	9a01      	ldr	r2, [sp, #4]
   d65cc:	4413      	add	r3, r2
   d65ce:	7c1b      	ldrb	r3, [r3, #16]
   d65d0:	80e3      	strh	r3, [r4, #6]
   d65d2:	e01d      	b.n	d6610 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d65d4:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d65d6:	2f00      	cmp	r7, #0
   d65d8:	dd0f      	ble.n	d65fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d65da:	2314      	movs	r3, #20
   d65dc:	fb03 f007 	mul.w	r0, r3, r7
   d65e0:	9303      	str	r3, [sp, #12]
   d65e2:	f7fe fa35 	bl	d4a50 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d65e6:	4683      	mov	fp, r0
   d65e8:	b178      	cbz	r0, d660a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d65ea:	e894 0006 	ldmia.w	r4, {r1, r2}
   d65ee:	9b03      	ldr	r3, [sp, #12]
   d65f0:	fb03 1202 	mla	r2, r3, r2, r1
   d65f4:	f7ff fe42 	bl	d627c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d65f8:	e000      	b.n	d65fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d65fa:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d65fc:	6820      	ldr	r0, [r4, #0]
   d65fe:	f7fe fa2f 	bl	d4a60 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6602:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d6606:	60a7      	str	r7, [r4, #8]
   d6608:	e794      	b.n	d6534 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d660a:	f04f 0801 	mov.w	r8, #1
   d660e:	e7ba      	b.n	d6586 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6610:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6612:	e766      	b.n	d64e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6614:	3601      	adds	r6, #1
   d6616:	e753      	b.n	d64c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6618:	a908      	add	r1, sp, #32
   d661a:	4628      	mov	r0, r5
   d661c:	f7ff fe17 	bl	d624e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6620:	a90b      	add	r1, sp, #44	; 0x2c
   d6622:	f105 000c 	add.w	r0, r5, #12
   d6626:	f7ff fe12 	bl	d624e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d662a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d662e:	762b      	strb	r3, [r5, #24]
   d6630:	e7af      	b.n	d6592 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6632:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d6634:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6636:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d663a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d663e:	4631      	mov	r1, r6
   d6640:	f106 0010 	add.w	r0, r6, #16
   d6644:	f7ff feb8 	bl	d63b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6648:	b11e      	cbz	r6, d6652 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d664a:	a90f      	add	r1, sp, #60	; 0x3c
   d664c:	4630      	mov	r0, r6
   d664e:	f000 fc25 	bl	d6e9c <_ZN6StringC1EOS_>
    ++size_;
   d6652:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6654:	3301      	adds	r3, #1
   d6656:	9309      	str	r3, [sp, #36]	; 0x24
   d6658:	e724      	b.n	d64a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d665c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d665c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d665e:	4604      	mov	r4, r0
   d6660:	4b09      	ldr	r3, [pc, #36]	; (d6688 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6662:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6666:	4605      	mov	r5, r0
   d6668:	460e      	mov	r6, r1
        filter_(level, filters) {
   d666a:	a801      	add	r0, sp, #4
   d666c:	4611      	mov	r1, r2
   d666e:	f7fd ff48 	bl	d4502 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6672:	aa01      	add	r2, sp, #4
   d6674:	4631      	mov	r1, r6
   d6676:	4620      	mov	r0, r4
   d6678:	f7ff fee1 	bl	d643e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d667c:	a801      	add	r0, sp, #4
   d667e:	f7fd fed1 	bl	d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6682:	4628      	mov	r0, r5
   d6684:	b004      	add	sp, #16
   d6686:	bd70      	pop	{r4, r5, r6, pc}
   d6688:	000d7958 	.word	0x000d7958

000d668c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d668c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d668e:	460f      	mov	r7, r1
   d6690:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6692:	492b      	ldr	r1, [pc, #172]	; (d6740 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6694:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6696:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6698:	4616      	mov	r6, r2
   d669a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d669c:	f001 f884 	bl	d77a8 <strcmp>
   d66a0:	bb28      	cbnz	r0, d66ee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d66a2:	2c00      	cmp	r4, #0
   d66a4:	d049      	beq.n	d673a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d66a6:	4629      	mov	r1, r5
   d66a8:	a801      	add	r0, sp, #4
   d66aa:	f7ff fddd 	bl	d6268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d66ae:	4925      	ldr	r1, [pc, #148]	; (d6744 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d66b0:	2024      	movs	r0, #36	; 0x24
   d66b2:	f000 fe95 	bl	d73e0 <_ZnwjRKSt9nothrow_t>
   d66b6:	4605      	mov	r5, r0
   d66b8:	b1b8      	cbz	r0, d66ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d66ba:	a901      	add	r1, sp, #4
   d66bc:	a804      	add	r0, sp, #16
   d66be:	f7ff fdd3 	bl	d6268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d66c2:	a904      	add	r1, sp, #16
   d66c4:	a807      	add	r0, sp, #28
   d66c6:	f7fd ff1c 	bl	d4502 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d66ca:	aa07      	add	r2, sp, #28
   d66cc:	4631      	mov	r1, r6
   d66ce:	4628      	mov	r0, r5
   d66d0:	f7ff ffc4 	bl	d665c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d66d4:	a807      	add	r0, sp, #28
   d66d6:	f7fd fea5 	bl	d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d66da:	4b1b      	ldr	r3, [pc, #108]	; (d6748 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d66dc:	602b      	str	r3, [r5, #0]
   d66de:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d66e0:	a804      	add	r0, sp, #16
   d66e2:	f7fd fe9f 	bl	d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d66e6:	4b19      	ldr	r3, [pc, #100]	; (d674c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d66e8:	602b      	str	r3, [r5, #0]
   d66ea:	a801      	add	r0, sp, #4
   d66ec:	e01f      	b.n	d672e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d66ee:	4918      	ldr	r1, [pc, #96]	; (d6750 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d66f0:	4638      	mov	r0, r7
   d66f2:	f001 f859 	bl	d77a8 <strcmp>
   d66f6:	b9f0      	cbnz	r0, d6736 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d66f8:	b1fc      	cbz	r4, d673a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d66fa:	4629      	mov	r1, r5
   d66fc:	a804      	add	r0, sp, #16
   d66fe:	f7ff fdb3 	bl	d6268 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6702:	4910      	ldr	r1, [pc, #64]	; (d6744 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6704:	2024      	movs	r0, #36	; 0x24
   d6706:	f000 fe6b 	bl	d73e0 <_ZnwjRKSt9nothrow_t>
   d670a:	4605      	mov	r5, r0
   d670c:	b170      	cbz	r0, d672c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d670e:	a904      	add	r1, sp, #16
   d6710:	a807      	add	r0, sp, #28
   d6712:	f7fd fef6 	bl	d4502 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6716:	aa07      	add	r2, sp, #28
   d6718:	4631      	mov	r1, r6
   d671a:	4628      	mov	r0, r5
   d671c:	f7ff ff9e 	bl	d665c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6720:	a807      	add	r0, sp, #28
   d6722:	f7fd fe7f 	bl	d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6726:	4b08      	ldr	r3, [pc, #32]	; (d6748 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6728:	602b      	str	r3, [r5, #0]
   d672a:	622c      	str	r4, [r5, #32]
   d672c:	a804      	add	r0, sp, #16
   d672e:	f7fd fe79 	bl	d4424 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6732:	4628      	mov	r0, r5
   d6734:	e002      	b.n	d673c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6736:	2000      	movs	r0, #0
   d6738:	e000      	b.n	d673c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d673a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d673c:	b00b      	add	sp, #44	; 0x2c
   d673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6740:	000d7cc2 	.word	0x000d7cc2
   d6744:	000d7eac 	.word	0x000d7eac
   d6748:	000d7d44 	.word	0x000d7d44
   d674c:	000d7c54 	.word	0x000d7c54
   d6750:	000d7cc6 	.word	0x000d7cc6

000d6754 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6754:	4b01      	ldr	r3, [pc, #4]	; (d675c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6756:	4a02      	ldr	r2, [pc, #8]	; (d6760 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6758:	601a      	str	r2, [r3, #0]
   d675a:	4770      	bx	lr
   d675c:	2003e400 	.word	0x2003e400
   d6760:	000d79f2 	.word	0x000d79f2

000d6764 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6768:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d676a:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d676e:	4604      	mov	r4, r0
   d6770:	460e      	mov	r6, r1
   d6772:	4617      	mov	r7, r2
   d6774:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6776:	f000 fd37 	bl	d71e8 <_Z16_fetch_usbserialv>
   d677a:	4581      	cmp	r9, r0
   d677c:	d105      	bne.n	d678a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d677e:	485a      	ldr	r0, [pc, #360]	; (d68e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6780:	f000 fa73 	bl	d6c6a <_ZN5spark12NetworkClass9listeningEv>
   d6784:	2800      	cmp	r0, #0
   d6786:	f040 80ac 	bne.w	d68e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d678a:	792b      	ldrb	r3, [r5, #4]
   d678c:	071b      	lsls	r3, r3, #28
   d678e:	d505      	bpl.n	d679c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6790:	696b      	ldr	r3, [r5, #20]
   d6792:	4a56      	ldr	r2, [pc, #344]	; (d68ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6794:	6a20      	ldr	r0, [r4, #32]
   d6796:	2100      	movs	r1, #0
   d6798:	f000 fb31 	bl	d6dfe <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d679c:	f1b8 0f00 	cmp.w	r8, #0
   d67a0:	d00d      	beq.n	d67be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d67a2:	215b      	movs	r1, #91	; 0x5b
   d67a4:	4620      	mov	r0, r4
   d67a6:	f7ff fa2e 	bl	d5c06 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d67aa:	4641      	mov	r1, r8
   d67ac:	4620      	mov	r0, r4
   d67ae:	f7ff fa1c 	bl	d5bea <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d67b2:	6823      	ldr	r3, [r4, #0]
   d67b4:	494e      	ldr	r1, [pc, #312]	; (d68f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d67b6:	68db      	ldr	r3, [r3, #12]
   d67b8:	2202      	movs	r2, #2
   d67ba:	4620      	mov	r0, r4
   d67bc:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d67be:	792b      	ldrb	r3, [r5, #4]
   d67c0:	07d9      	lsls	r1, r3, #31
   d67c2:	d525      	bpl.n	d6810 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d67c4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d67c8:	212f      	movs	r1, #47	; 0x2f
   d67ca:	4640      	mov	r0, r8
   d67cc:	f001 f813 	bl	d77f6 <strrchr>
    if (s1) {
   d67d0:	b108      	cbz	r0, d67d6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d67d2:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d67d6:	4641      	mov	r1, r8
   d67d8:	4620      	mov	r0, r4
   d67da:	f7ff fa06 	bl	d5bea <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d67de:	792b      	ldrb	r3, [r5, #4]
   d67e0:	079a      	lsls	r2, r3, #30
   d67e2:	d509      	bpl.n	d67f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d67e4:	213a      	movs	r1, #58	; 0x3a
   d67e6:	4620      	mov	r0, r4
   d67e8:	f7ff fa0d 	bl	d5c06 <_ZN5spark16StreamLogHandler5writeEc>
   d67ec:	68eb      	ldr	r3, [r5, #12]
   d67ee:	4a41      	ldr	r2, [pc, #260]	; (d68f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d67f0:	6a20      	ldr	r0, [r4, #32]
   d67f2:	2100      	movs	r1, #0
   d67f4:	f000 fb03 	bl	d6dfe <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d67f8:	792b      	ldrb	r3, [r5, #4]
   d67fa:	f013 0f04 	tst.w	r3, #4
   d67fe:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6800:	bf18      	it	ne
   d6802:	493d      	ldrne	r1, [pc, #244]	; (d68f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6804:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6806:	bf08      	it	eq
   d6808:	493c      	ldreq	r1, [pc, #240]	; (d68fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d680a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d680c:	4620      	mov	r0, r4
   d680e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6810:	792b      	ldrb	r3, [r5, #4]
   d6812:	075b      	lsls	r3, r3, #29
   d6814:	d518      	bpl.n	d6848 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6816:	6929      	ldr	r1, [r5, #16]
   d6818:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d681a:	4613      	mov	r3, r2
   d681c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6820:	b138      	cbz	r0, d6832 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6822:	2820      	cmp	r0, #32
   d6824:	d101      	bne.n	d682a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6826:	4619      	mov	r1, r3
   d6828:	e001      	b.n	d682e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d682a:	2828      	cmp	r0, #40	; 0x28
   d682c:	d001      	beq.n	d6832 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d682e:	461a      	mov	r2, r3
   d6830:	e7f3      	b.n	d681a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d6832:	6823      	ldr	r3, [r4, #0]
   d6834:	1a52      	subs	r2, r2, r1
   d6836:	68db      	ldr	r3, [r3, #12]
   d6838:	4620      	mov	r0, r4
   d683a:	4798      	blx	r3
        write("(): ", 4);
   d683c:	6823      	ldr	r3, [r4, #0]
   d683e:	4930      	ldr	r1, [pc, #192]	; (d6900 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6840:	68db      	ldr	r3, [r3, #12]
   d6842:	2204      	movs	r2, #4
   d6844:	4620      	mov	r0, r4
   d6846:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6848:	2100      	movs	r1, #0
   d684a:	4638      	mov	r0, r7
   d684c:	f7fe f87c 	bl	d4948 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d6850:	4601      	mov	r1, r0
   d6852:	4620      	mov	r0, r4
   d6854:	f7ff f9c9 	bl	d5bea <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6858:	6823      	ldr	r3, [r4, #0]
   d685a:	4928      	ldr	r1, [pc, #160]	; (d68fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d685c:	68db      	ldr	r3, [r3, #12]
   d685e:	2202      	movs	r2, #2
   d6860:	4620      	mov	r0, r4
   d6862:	4798      	blx	r3
    // Message
    if (msg) {
   d6864:	b11e      	cbz	r6, d686e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d6866:	4631      	mov	r1, r6
   d6868:	4620      	mov	r0, r4
   d686a:	f7ff f9be 	bl	d5bea <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d686e:	792b      	ldrb	r3, [r5, #4]
   d6870:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6874:	d02d      	beq.n	d68d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d6876:	6823      	ldr	r3, [r4, #0]
   d6878:	4922      	ldr	r1, [pc, #136]	; (d6904 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d687a:	68db      	ldr	r3, [r3, #12]
   d687c:	4620      	mov	r0, r4
   d687e:	2202      	movs	r2, #2
   d6880:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d6882:	792b      	ldrb	r3, [r5, #4]
   d6884:	06d8      	lsls	r0, r3, #27
   d6886:	d50b      	bpl.n	d68a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d6888:	6823      	ldr	r3, [r4, #0]
   d688a:	491f      	ldr	r1, [pc, #124]	; (d6908 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d688c:	68db      	ldr	r3, [r3, #12]
   d688e:	2207      	movs	r2, #7
   d6890:	4620      	mov	r0, r4
   d6892:	4798      	blx	r3
   d6894:	69ab      	ldr	r3, [r5, #24]
   d6896:	4a1d      	ldr	r2, [pc, #116]	; (d690c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d6898:	6a20      	ldr	r0, [r4, #32]
   d689a:	2100      	movs	r1, #0
   d689c:	f000 faaf 	bl	d6dfe <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d68a0:	792b      	ldrb	r3, [r5, #4]
   d68a2:	0699      	lsls	r1, r3, #26
   d68a4:	d511      	bpl.n	d68ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d68a6:	06da      	lsls	r2, r3, #27
   d68a8:	d505      	bpl.n	d68b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d68aa:	6823      	ldr	r3, [r4, #0]
   d68ac:	4912      	ldr	r1, [pc, #72]	; (d68f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d68ae:	68db      	ldr	r3, [r3, #12]
   d68b0:	2202      	movs	r2, #2
   d68b2:	4620      	mov	r0, r4
   d68b4:	4798      	blx	r3
            }
            write("details = ", 10);
   d68b6:	6823      	ldr	r3, [r4, #0]
   d68b8:	4915      	ldr	r1, [pc, #84]	; (d6910 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d68ba:	68db      	ldr	r3, [r3, #12]
   d68bc:	4620      	mov	r0, r4
   d68be:	220a      	movs	r2, #10
   d68c0:	4798      	blx	r3
            write(attr.details);
   d68c2:	69e9      	ldr	r1, [r5, #28]
   d68c4:	4620      	mov	r0, r4
   d68c6:	f7ff f990 	bl	d5bea <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d68ca:	215d      	movs	r1, #93	; 0x5d
   d68cc:	4620      	mov	r0, r4
   d68ce:	f7ff f99a 	bl	d5c06 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d68d2:	6823      	ldr	r3, [r4, #0]
   d68d4:	490f      	ldr	r1, [pc, #60]	; (d6914 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d68d6:	68db      	ldr	r3, [r3, #12]
   d68d8:	4620      	mov	r0, r4
   d68da:	2202      	movs	r2, #2
}
   d68dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d68e0:	4718      	bx	r3
   d68e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68e6:	bf00      	nop
   d68e8:	2003e5d8 	.word	0x2003e5d8
   d68ec:	000d7cd7 	.word	0x000d7cd7
   d68f0:	000d7cde 	.word	0x000d7cde
   d68f4:	000d79d9 	.word	0x000d79d9
   d68f8:	000d7ce1 	.word	0x000d7ce1
   d68fc:	000d7ce6 	.word	0x000d7ce6
   d6900:	000d7ce4 	.word	0x000d7ce4
   d6904:	000d7ce9 	.word	0x000d7ce9
   d6908:	000d7cec 	.word	0x000d7cec
   d690c:	000d7cf4 	.word	0x000d7cf4
   d6910:	000d7cf7 	.word	0x000d7cf7
   d6914:	000d7d02 	.word	0x000d7d02

000d6918 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d691c:	b085      	sub	sp, #20
   d691e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d6922:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6924:	4606      	mov	r6, r0
   d6926:	460f      	mov	r7, r1
   d6928:	4691      	mov	r9, r2
   d692a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d692c:	f000 fc5c 	bl	d71e8 <_Z16_fetch_usbserialv>
   d6930:	4580      	cmp	r8, r0
   d6932:	d105      	bne.n	d6940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6934:	484a      	ldr	r0, [pc, #296]	; (d6a60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6936:	f000 f998 	bl	d6c6a <_ZN5spark12NetworkClass9listeningEv>
   d693a:	2800      	cmp	r0, #0
   d693c:	f040 808c 	bne.w	d6a58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d6940:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6942:	4a48      	ldr	r2, [pc, #288]	; (d6a64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6944:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6946:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d694a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d694c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d694e:	f88d 8008 	strb.w	r8, [sp, #8]
   d6952:	f7fe ffec 	bl	d592e <_ZN5spark10JSONWriter11beginObjectEv>
   d6956:	4641      	mov	r1, r8
   d6958:	4648      	mov	r0, r9
   d695a:	f7fd fff5 	bl	d4948 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d695e:	4942      	ldr	r1, [pc, #264]	; (d6a68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6960:	4680      	mov	r8, r0
   d6962:	2201      	movs	r2, #1
   d6964:	a801      	add	r0, sp, #4
   d6966:	f7ff f867 	bl	d5a38 <_ZN5spark10JSONWriter4nameEPKcj>
   d696a:	4641      	mov	r1, r8
   d696c:	f7ff f92d 	bl	d5bca <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d6970:	b13f      	cbz	r7, d6982 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d6972:	493e      	ldr	r1, [pc, #248]	; (d6a6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d6974:	2201      	movs	r2, #1
   d6976:	a801      	add	r0, sp, #4
   d6978:	f7ff f85e 	bl	d5a38 <_ZN5spark10JSONWriter4nameEPKcj>
   d697c:	4639      	mov	r1, r7
   d697e:	f7ff f924 	bl	d5bca <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d6982:	b13d      	cbz	r5, d6994 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6984:	493a      	ldr	r1, [pc, #232]	; (d6a70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d6986:	2201      	movs	r2, #1
   d6988:	a801      	add	r0, sp, #4
   d698a:	f7ff f855 	bl	d5a38 <_ZN5spark10JSONWriter4nameEPKcj>
   d698e:	4629      	mov	r1, r5
   d6990:	f7ff f91b 	bl	d5bca <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d6994:	7923      	ldrb	r3, [r4, #4]
   d6996:	07df      	lsls	r7, r3, #31
   d6998:	d50e      	bpl.n	d69b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d699a:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d699c:	212f      	movs	r1, #47	; 0x2f
   d699e:	4628      	mov	r0, r5
   d69a0:	f000 ff29 	bl	d77f6 <strrchr>
    if (s1) {
   d69a4:	b100      	cbz	r0, d69a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d69a6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d69a8:	4932      	ldr	r1, [pc, #200]	; (d6a74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d69aa:	2201      	movs	r2, #1
   d69ac:	a801      	add	r0, sp, #4
   d69ae:	f7ff f843 	bl	d5a38 <_ZN5spark10JSONWriter4nameEPKcj>
   d69b2:	4629      	mov	r1, r5
   d69b4:	f7ff f909 	bl	d5bca <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d69b8:	7923      	ldrb	r3, [r4, #4]
   d69ba:	079d      	lsls	r5, r3, #30
   d69bc:	d507      	bpl.n	d69ce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d69be:	492e      	ldr	r1, [pc, #184]	; (d6a78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d69c0:	2202      	movs	r2, #2
   d69c2:	a801      	add	r0, sp, #4
   d69c4:	f7ff f838 	bl	d5a38 <_ZN5spark10JSONWriter4nameEPKcj>
   d69c8:	68e1      	ldr	r1, [r4, #12]
   d69ca:	f7fe ffbd 	bl	d5948 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d69ce:	7923      	ldrb	r3, [r4, #4]
   d69d0:	0758      	lsls	r0, r3, #29
   d69d2:	d516      	bpl.n	d6a02 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d69d4:	6925      	ldr	r5, [r4, #16]
   d69d6:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d69d8:	463b      	mov	r3, r7
   d69da:	f813 2b01 	ldrb.w	r2, [r3], #1
   d69de:	b13a      	cbz	r2, d69f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d69e0:	2a20      	cmp	r2, #32
   d69e2:	d101      	bne.n	d69e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d69e4:	461d      	mov	r5, r3
   d69e6:	e001      	b.n	d69ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d69e8:	2a28      	cmp	r2, #40	; 0x28
   d69ea:	d001      	beq.n	d69f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d69ec:	461f      	mov	r7, r3
   d69ee:	e7f3      	b.n	d69d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d69f0:	2202      	movs	r2, #2
   d69f2:	4922      	ldr	r1, [pc, #136]	; (d6a7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d69f4:	a801      	add	r0, sp, #4
   d69f6:	f7ff f81f 	bl	d5a38 <_ZN5spark10JSONWriter4nameEPKcj>
   d69fa:	1b7a      	subs	r2, r7, r5
   d69fc:	4629      	mov	r1, r5
   d69fe:	f7ff f82a 	bl	d5a56 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d6a02:	7923      	ldrb	r3, [r4, #4]
   d6a04:	0719      	lsls	r1, r3, #28
   d6a06:	d507      	bpl.n	d6a18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d6a08:	491d      	ldr	r1, [pc, #116]	; (d6a80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d6a0a:	2201      	movs	r2, #1
   d6a0c:	a801      	add	r0, sp, #4
   d6a0e:	f7ff f813 	bl	d5a38 <_ZN5spark10JSONWriter4nameEPKcj>
   d6a12:	6961      	ldr	r1, [r4, #20]
   d6a14:	f7fe ffaa 	bl	d596c <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d6a18:	7923      	ldrb	r3, [r4, #4]
   d6a1a:	06da      	lsls	r2, r3, #27
   d6a1c:	d508      	bpl.n	d6a30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d6a1e:	2204      	movs	r2, #4
   d6a20:	4918      	ldr	r1, [pc, #96]	; (d6a84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6a22:	eb0d 0002 	add.w	r0, sp, r2
   d6a26:	f7ff f807 	bl	d5a38 <_ZN5spark10JSONWriter4nameEPKcj>
   d6a2a:	69a1      	ldr	r1, [r4, #24]
   d6a2c:	f7fe ff8c 	bl	d5948 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d6a30:	7923      	ldrb	r3, [r4, #4]
   d6a32:	069b      	lsls	r3, r3, #26
   d6a34:	d507      	bpl.n	d6a46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d6a36:	4914      	ldr	r1, [pc, #80]	; (d6a88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6a38:	2206      	movs	r2, #6
   d6a3a:	a801      	add	r0, sp, #4
   d6a3c:	f7fe fffc 	bl	d5a38 <_ZN5spark10JSONWriter4nameEPKcj>
   d6a40:	69e1      	ldr	r1, [r4, #28]
   d6a42:	f7ff f8c2 	bl	d5bca <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d6a46:	a801      	add	r0, sp, #4
   d6a48:	f7fe ff5b 	bl	d5902 <_ZN5spark10JSONWriter9endObjectEv>
   d6a4c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d6a4e:	490f      	ldr	r1, [pc, #60]	; (d6a8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6a50:	6803      	ldr	r3, [r0, #0]
   d6a52:	2202      	movs	r2, #2
   d6a54:	68db      	ldr	r3, [r3, #12]
   d6a56:	4798      	blx	r3
}
   d6a58:	b005      	add	sp, #20
   d6a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6a5e:	bf00      	nop
   d6a60:	2003e5d8 	.word	0x2003e5d8
   d6a64:	000d7c3c 	.word	0x000d7c3c
   d6a68:	000d7c6e 	.word	0x000d7c6e
   d6a6c:	000d7c81 	.word	0x000d7c81
   d6a70:	000d7d36 	.word	0x000d7d36
   d6a74:	000d7c22 	.word	0x000d7c22
   d6a78:	000d7d05 	.word	0x000d7d05
   d6a7c:	000d7d08 	.word	0x000d7d08
   d6a80:	000d7c96 	.word	0x000d7c96
   d6a84:	000d7d0b 	.word	0x000d7d0b
   d6a88:	000d7d10 	.word	0x000d7d10
   d6a8c:	000d7d02 	.word	0x000d7d02

000d6a90 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a90:	2200      	movs	r2, #0
   d6a92:	4611      	mov	r1, r2
   d6a94:	6840      	ldr	r0, [r0, #4]
   d6a96:	f7fd bfc3 	b.w	d4a20 <network_listening>

000d6a9a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a9a:	2200      	movs	r2, #0
   d6a9c:	4611      	mov	r1, r2
   d6a9e:	6840      	ldr	r0, [r0, #4]
   d6aa0:	f7fd bfce 	b.w	d4a40 <network_get_listen_timeout>

000d6aa4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6aa4:	2200      	movs	r2, #0
   d6aa6:	6840      	ldr	r0, [r0, #4]
   d6aa8:	f7fd bfc2 	b.w	d4a30 <network_set_listen_timeout>

000d6aac <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6aac:	2200      	movs	r2, #0
   d6aae:	f081 0101 	eor.w	r1, r1, #1
   d6ab2:	6840      	ldr	r0, [r0, #4]
   d6ab4:	f7fd bfac 	b.w	d4a10 <network_listen>

000d6ab8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6ab8:	2300      	movs	r3, #0
   d6aba:	461a      	mov	r2, r3
   d6abc:	2101      	movs	r1, #1
   d6abe:	6840      	ldr	r0, [r0, #4]
   d6ac0:	f7fd bf9e 	b.w	d4a00 <network_off>

000d6ac4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6ac4:	2300      	movs	r3, #0
   d6ac6:	461a      	mov	r2, r3
   d6ac8:	4619      	mov	r1, r3
   d6aca:	6840      	ldr	r0, [r0, #4]
   d6acc:	f7fd bf90 	b.w	d49f0 <network_on>

000d6ad0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6ad0:	2200      	movs	r2, #0
   d6ad2:	4611      	mov	r1, r2
   d6ad4:	6840      	ldr	r0, [r0, #4]
   d6ad6:	f7fd bf83 	b.w	d49e0 <network_ready>

000d6ada <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6ada:	2200      	movs	r2, #0
   d6adc:	4611      	mov	r1, r2
   d6ade:	6840      	ldr	r0, [r0, #4]
   d6ae0:	f7fd bf6e 	b.w	d49c0 <network_connecting>

000d6ae4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6ae4:	2200      	movs	r2, #0
   d6ae6:	2102      	movs	r1, #2
   d6ae8:	6840      	ldr	r0, [r0, #4]
   d6aea:	f7fd bf71 	b.w	d49d0 <network_disconnect>

000d6aee <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6aee:	2300      	movs	r3, #0
   d6af0:	461a      	mov	r2, r3
   d6af2:	6840      	ldr	r0, [r0, #4]
   d6af4:	f7fd bf5c 	b.w	d49b0 <network_connect>

000d6af8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6af8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6afa:	4605      	mov	r5, r0
   d6afc:	b188      	cbz	r0, d6b22 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6afe:	6804      	ldr	r4, [r0, #0]
   d6b00:	b14c      	cbz	r4, d6b16 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6b02:	68a3      	ldr	r3, [r4, #8]
   d6b04:	b11b      	cbz	r3, d6b0e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b06:	2203      	movs	r2, #3
   d6b08:	4621      	mov	r1, r4
   d6b0a:	4620      	mov	r0, r4
   d6b0c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b0e:	2110      	movs	r1, #16
   d6b10:	4620      	mov	r0, r4
   d6b12:	f000 fc5a 	bl	d73ca <_ZdlPvj>
   d6b16:	4628      	mov	r0, r5
   d6b18:	2114      	movs	r1, #20
      }
   d6b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b1e:	f000 bc54 	b.w	d73ca <_ZdlPvj>
   d6b22:	bd38      	pop	{r3, r4, r5, pc}

000d6b24 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6b24:	b110      	cbz	r0, d6b2c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6b26:	6803      	ldr	r3, [r0, #0]
   d6b28:	685b      	ldr	r3, [r3, #4]
   d6b2a:	4718      	bx	r3
   d6b2c:	4770      	bx	lr

000d6b2e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6b2e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6b30:	6803      	ldr	r3, [r0, #0]
   d6b32:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6b34:	b1bb      	cbz	r3, d6b66 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6b36:	6858      	ldr	r0, [r3, #4]
   d6b38:	f7fd fdf6 	bl	d4728 <os_thread_is_current>
   d6b3c:	b978      	cbnz	r0, d6b5e <_ZN6ThreadD1Ev+0x30>
   d6b3e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6b40:	7c5a      	ldrb	r2, [r3, #17]
   d6b42:	b912      	cbnz	r2, d6b4a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6b44:	6858      	ldr	r0, [r3, #4]
   d6b46:	f7fd fdf7 	bl	d4738 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6b4a:	6823      	ldr	r3, [r4, #0]
   d6b4c:	6858      	ldr	r0, [r3, #4]
   d6b4e:	f7fd fdfb 	bl	d4748 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b52:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6b54:	2300      	movs	r3, #0
   d6b56:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6b58:	b128      	cbz	r0, d6b66 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6b5a:	f7ff ffcd 	bl	d6af8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b5e:	6820      	ldr	r0, [r4, #0]
   d6b60:	b108      	cbz	r0, d6b66 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6b62:	f7ff ffc9 	bl	d6af8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6b66:	4620      	mov	r0, r4
   d6b68:	bd10      	pop	{r4, pc}

000d6b6a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6b6a:	b538      	push	{r3, r4, r5, lr}
   d6b6c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b6e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6b72:	b108      	cbz	r0, d6b78 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6b74:	f7fd fa93 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6b78:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6b7c:	b108      	cbz	r0, d6b82 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6b7e:	f7fd fdf3 	bl	d4768 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b82:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6b86:	b135      	cbz	r5, d6b96 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6b88:	4628      	mov	r0, r5
   d6b8a:	f7ff ffd0 	bl	d6b2e <_ZN6ThreadD1Ev>
   d6b8e:	2104      	movs	r1, #4
   d6b90:	4628      	mov	r0, r5
   d6b92:	f000 fc1a 	bl	d73ca <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b96:	6820      	ldr	r0, [r4, #0]
   d6b98:	b108      	cbz	r0, d6b9e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6b9a:	f7ff ffc3 	bl	d6b24 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6b9e:	4620      	mov	r0, r4
   d6ba0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ba4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6ba4:	b510      	push	{r4, lr}
   d6ba6:	4b04      	ldr	r3, [pc, #16]	; (d6bb8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6ba8:	4604      	mov	r4, r0
   d6baa:	f840 3b08 	str.w	r3, [r0], #8
   d6bae:	f7ff ffdc 	bl	d6b6a <_ZN5spark11MeshPublishD1Ev>
   d6bb2:	4620      	mov	r0, r4
   d6bb4:	bd10      	pop	{r4, pc}
   d6bb6:	bf00      	nop
   d6bb8:	000d7d8c 	.word	0x000d7d8c

000d6bbc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6bbc:	b538      	push	{r3, r4, r5, lr}
   d6bbe:	4c0e      	ldr	r4, [pc, #56]	; (d6bf8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6bc0:	4b0e      	ldr	r3, [pc, #56]	; (d6bfc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6bc2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6bc4:	2500      	movs	r5, #0
   d6bc6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6bc8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6bcc:	6063      	str	r3, [r4, #4]
   d6bce:	60a5      	str	r5, [r4, #8]
   d6bd0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6bd4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6bd8:	f7fd fdbe 	bl	d4758 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6bdc:	4b08      	ldr	r3, [pc, #32]	; (d6c00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6bde:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6be2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6be6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6be8:	4620      	mov	r0, r4
   d6bea:	4a06      	ldr	r2, [pc, #24]	; (d6c04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6bec:	4906      	ldr	r1, [pc, #24]	; (d6c08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6bf2:	f000 bbe5 	b.w	d73c0 <__aeabi_atexit>
   d6bf6:	bf00      	nop
   d6bf8:	2003e404 	.word	0x2003e404
   d6bfc:	000d7dc0 	.word	0x000d7dc0
   d6c00:	000d7d8c 	.word	0x000d7d8c
   d6c04:	2003e2f0 	.word	0x2003e2f0
   d6c08:	000d6ba5 	.word	0x000d6ba5

000d6c0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6c0c:	2300      	movs	r3, #0
   d6c0e:	461a      	mov	r2, r3
   d6c10:	6840      	ldr	r0, [r0, #4]
   d6c12:	f7fd becd 	b.w	d49b0 <network_connect>

000d6c16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6c16:	2200      	movs	r2, #0
   d6c18:	2102      	movs	r1, #2
   d6c1a:	6840      	ldr	r0, [r0, #4]
   d6c1c:	f7fd bed8 	b.w	d49d0 <network_disconnect>

000d6c20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6c20:	2200      	movs	r2, #0
   d6c22:	4611      	mov	r1, r2
   d6c24:	6840      	ldr	r0, [r0, #4]
   d6c26:	f7fd becb 	b.w	d49c0 <network_connecting>

000d6c2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6c2a:	2200      	movs	r2, #0
   d6c2c:	4611      	mov	r1, r2
   d6c2e:	6840      	ldr	r0, [r0, #4]
   d6c30:	f7fd bed6 	b.w	d49e0 <network_ready>

000d6c34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6c34:	2300      	movs	r3, #0
   d6c36:	461a      	mov	r2, r3
   d6c38:	4619      	mov	r1, r3
   d6c3a:	6840      	ldr	r0, [r0, #4]
   d6c3c:	f7fd bed8 	b.w	d49f0 <network_on>

000d6c40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6c40:	2300      	movs	r3, #0
   d6c42:	461a      	mov	r2, r3
   d6c44:	4619      	mov	r1, r3
   d6c46:	6840      	ldr	r0, [r0, #4]
   d6c48:	f7fd beda 	b.w	d4a00 <network_off>

000d6c4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6c4c:	2200      	movs	r2, #0
   d6c4e:	f081 0101 	eor.w	r1, r1, #1
   d6c52:	6840      	ldr	r0, [r0, #4]
   d6c54:	f7fd bedc 	b.w	d4a10 <network_listen>

000d6c58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6c58:	2200      	movs	r2, #0
   d6c5a:	6840      	ldr	r0, [r0, #4]
   d6c5c:	f7fd bee8 	b.w	d4a30 <network_set_listen_timeout>

000d6c60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6c60:	2200      	movs	r2, #0
   d6c62:	4611      	mov	r1, r2
   d6c64:	6840      	ldr	r0, [r0, #4]
   d6c66:	f7fd beeb 	b.w	d4a40 <network_get_listen_timeout>

000d6c6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6c6a:	2200      	movs	r2, #0
   d6c6c:	4611      	mov	r1, r2
   d6c6e:	6840      	ldr	r0, [r0, #4]
   d6c70:	f7fd bed6 	b.w	d4a20 <network_listening>

000d6c74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6c78:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6c7a:	b095      	sub	sp, #84	; 0x54
   d6c7c:	4616      	mov	r6, r2
   d6c7e:	460d      	mov	r5, r1
   d6c80:	4607      	mov	r7, r0
    IPAddress addr;
   d6c82:	f7fe fd4d 	bl	d5720 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6c86:	4621      	mov	r1, r4
   d6c88:	2220      	movs	r2, #32
   d6c8a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6c8c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6c8e:	f000 fd42 	bl	d7716 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6c92:	2340      	movs	r3, #64	; 0x40
   d6c94:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6c96:	4621      	mov	r1, r4
   d6c98:	466b      	mov	r3, sp
   d6c9a:	aa0c      	add	r2, sp, #48	; 0x30
   d6c9c:	4630      	mov	r0, r6
   d6c9e:	f7fd fdab 	bl	d47f8 <netdb_getaddrinfo>
    if (!r) {
   d6ca2:	4604      	mov	r4, r0
   d6ca4:	2800      	cmp	r0, #0
   d6ca6:	d144      	bne.n	d6d32 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6ca8:	4602      	mov	r2, r0
   d6caa:	2101      	movs	r1, #1
   d6cac:	6868      	ldr	r0, [r5, #4]
   d6cae:	f7fd fe97 	bl	d49e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6cb2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6cb4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6cb6:	4622      	mov	r2, r4
   d6cb8:	6868      	ldr	r0, [r5, #4]
   d6cba:	f7fd fe91 	bl	d49e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6cbe:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6cc0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6cc2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6cc4:	2e00      	cmp	r6, #0
   d6cc6:	d034      	beq.n	d6d32 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6cc8:	2900      	cmp	r1, #0
   d6cca:	d132      	bne.n	d6d32 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6ccc:	6873      	ldr	r3, [r6, #4]
   d6cce:	2b02      	cmp	r3, #2
   d6cd0:	d002      	beq.n	d6cd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6cd2:	2b0a      	cmp	r3, #10
   d6cd4:	d009      	beq.n	d6cea <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6cd6:	e02a      	b.n	d6d2e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6cd8:	f1b8 0f00 	cmp.w	r8, #0
   d6cdc:	d027      	beq.n	d6d2e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6cde:	6971      	ldr	r1, [r6, #20]
   d6ce0:	4638      	mov	r0, r7
   d6ce2:	3104      	adds	r1, #4
   d6ce4:	f7fe fd49 	bl	d577a <_ZN9IPAddressaSEPKh>
   d6ce8:	e020      	b.n	d6d2c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6cea:	f1b9 0f00 	cmp.w	r9, #0
   d6cee:	d01e      	beq.n	d6d2e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6cf0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6cf2:	2211      	movs	r2, #17
   d6cf4:	a801      	add	r0, sp, #4
   d6cf6:	f000 fd0e 	bl	d7716 <memset>
                    a.v = 6;
   d6cfa:	2306      	movs	r3, #6
   d6cfc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6d00:	ad01      	add	r5, sp, #4
   d6d02:	f104 0308 	add.w	r3, r4, #8
   d6d06:	3418      	adds	r4, #24
   d6d08:	6818      	ldr	r0, [r3, #0]
   d6d0a:	6859      	ldr	r1, [r3, #4]
   d6d0c:	462a      	mov	r2, r5
   d6d0e:	c203      	stmia	r2!, {r0, r1}
   d6d10:	3308      	adds	r3, #8
   d6d12:	42a3      	cmp	r3, r4
   d6d14:	4615      	mov	r5, r2
   d6d16:	d1f7      	bne.n	d6d08 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6d18:	a901      	add	r1, sp, #4
   d6d1a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6d1c:	ad07      	add	r5, sp, #28
   d6d1e:	f7fe fd0d 	bl	d573c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d24:	1d3c      	adds	r4, r7, #4
   d6d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d28:	682b      	ldr	r3, [r5, #0]
   d6d2a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6d2c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6d2e:	69f6      	ldr	r6, [r6, #28]
   d6d30:	e7c8      	b.n	d6cc4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6d32:	9800      	ldr	r0, [sp, #0]
   d6d34:	f7fd fd58 	bl	d47e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6d38:	4638      	mov	r0, r7
   d6d3a:	b015      	add	sp, #84	; 0x54
   d6d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6d40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6d40:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6d42:	4a03      	ldr	r2, [pc, #12]	; (d6d50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6d44:	601a      	str	r2, [r3, #0]
   d6d46:	2200      	movs	r2, #0
   d6d48:	605a      	str	r2, [r3, #4]
   d6d4a:	4770      	bx	lr
   d6d4c:	2003e5d8 	.word	0x2003e5d8
   d6d50:	000d7dc0 	.word	0x000d7dc0

000d6d54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d56:	4606      	mov	r6, r0
   d6d58:	460d      	mov	r5, r1
   d6d5a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6d5c:	2400      	movs	r4, #0
  while (size--) {
   d6d5e:	42bd      	cmp	r5, r7
   d6d60:	d00c      	beq.n	d6d7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6d62:	6833      	ldr	r3, [r6, #0]
   d6d64:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6d68:	689b      	ldr	r3, [r3, #8]
   d6d6a:	4630      	mov	r0, r6
   d6d6c:	4798      	blx	r3
     if (chunk>=0)
   d6d6e:	2800      	cmp	r0, #0
   d6d70:	db01      	blt.n	d6d76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6d72:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6d74:	e7f3      	b.n	d6d5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6d76:	2c00      	cmp	r4, #0
   d6d78:	bf08      	it	eq
   d6d7a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6d7c:	4620      	mov	r0, r4
   d6d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d80 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6d80:	b570      	push	{r4, r5, r6, lr}
   d6d82:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6d84:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6d86:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6d88:	b149      	cbz	r1, d6d9e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6d8a:	f000 fd17 	bl	d77bc <strlen>
   d6d8e:	682b      	ldr	r3, [r5, #0]
   d6d90:	4602      	mov	r2, r0
   d6d92:	4621      	mov	r1, r4
   d6d94:	4628      	mov	r0, r5
   d6d96:	68db      	ldr	r3, [r3, #12]
    }
   d6d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6d9c:	4718      	bx	r3
    }
   d6d9e:	bd70      	pop	{r4, r5, r6, pc}

000d6da0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6da0:	6803      	ldr	r3, [r0, #0]
   d6da2:	689b      	ldr	r3, [r3, #8]
   d6da4:	4718      	bx	r3

000d6da6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6da6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6da8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6daa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6dac:	f7ff fff8 	bl	d6da0 <_ZN5Print5printEc>
  n += print('\n');
   d6db0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6db2:	4604      	mov	r4, r0
  n += print('\n');
   d6db4:	4628      	mov	r0, r5
   d6db6:	f7ff fff3 	bl	d6da0 <_ZN5Print5printEc>
  return n;
}
   d6dba:	4420      	add	r0, r4
   d6dbc:	bd38      	pop	{r3, r4, r5, pc}

000d6dbe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6dbe:	b530      	push	{r4, r5, lr}
   d6dc0:	b08b      	sub	sp, #44	; 0x2c
   d6dc2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6dc4:	2100      	movs	r1, #0
   d6dc6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6dca:	2a01      	cmp	r2, #1
   d6dcc:	bf98      	it	ls
   d6dce:	220a      	movls	r2, #10
   d6dd0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6dd4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6dd8:	fb05 3312 	mls	r3, r5, r2, r3
   d6ddc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6de0:	2b09      	cmp	r3, #9
   d6de2:	bf94      	ite	ls
   d6de4:	3330      	addls	r3, #48	; 0x30
   d6de6:	3337      	addhi	r3, #55	; 0x37
   d6de8:	b2db      	uxtb	r3, r3
   d6dea:	4621      	mov	r1, r4
   d6dec:	f804 3901 	strb.w	r3, [r4], #-1
   d6df0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6df2:	2d00      	cmp	r5, #0
   d6df4:	d1ee      	bne.n	d6dd4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6df6:	f7ff ffc3 	bl	d6d80 <_ZN5Print5writeEPKc>
}
   d6dfa:	b00b      	add	sp, #44	; 0x2c
   d6dfc:	bd30      	pop	{r4, r5, pc}

000d6dfe <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6dfe:	b40c      	push	{r2, r3}
   d6e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e04:	b087      	sub	sp, #28
   d6e06:	af00      	add	r7, sp, #0
   d6e08:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6e0c:	4605      	mov	r5, r0
   d6e0e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6e12:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6e14:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6e16:	4623      	mov	r3, r4
   d6e18:	464a      	mov	r2, r9
   d6e1a:	2114      	movs	r1, #20
   d6e1c:	1d38      	adds	r0, r7, #4
   d6e1e:	f7fd fe37 	bl	d4a90 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6e22:	2813      	cmp	r0, #19
   d6e24:	d805      	bhi.n	d6e32 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6e26:	1d39      	adds	r1, r7, #4
   d6e28:	4628      	mov	r0, r5
   d6e2a:	f7ff ffa9 	bl	d6d80 <_ZN5Print5writeEPKc>
   d6e2e:	4604      	mov	r4, r0
   d6e30:	e013      	b.n	d6e5a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6e32:	f100 0308 	add.w	r3, r0, #8
   d6e36:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6e3a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6e3c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6e40:	1c41      	adds	r1, r0, #1
   d6e42:	4623      	mov	r3, r4
   d6e44:	464a      	mov	r2, r9
   d6e46:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6e48:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6e4a:	f7fd fe21 	bl	d4a90 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6e4e:	4669      	mov	r1, sp
   d6e50:	4628      	mov	r0, r5
   d6e52:	f7ff ff95 	bl	d6d80 <_ZN5Print5writeEPKc>
   d6e56:	4604      	mov	r4, r0
   d6e58:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6e5a:	b11e      	cbz	r6, d6e64 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6e5c:	4628      	mov	r0, r5
   d6e5e:	f7ff ffa2 	bl	d6da6 <_ZN5Print7printlnEv>
   d6e62:	4404      	add	r4, r0
    return n;
}
   d6e64:	4620      	mov	r0, r4
   d6e66:	371c      	adds	r7, #28
   d6e68:	46bd      	mov	sp, r7
   d6e6a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6e6e:	b002      	add	sp, #8
   d6e70:	4770      	bx	lr

000d6e72 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6e72:	b510      	push	{r4, lr}
   d6e74:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e76:	f7fe fbd1 	bl	d561c <_ZNSt14_Function_baseD1Ev>
   d6e7a:	4620      	mov	r0, r4
   d6e7c:	bd10      	pop	{r4, pc}
	...

000d6e80 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6e80:	4803      	ldr	r0, [pc, #12]	; (d6e90 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6e82:	4a04      	ldr	r2, [pc, #16]	; (d6e94 <_GLOBAL__sub_I_RGB+0x14>)
   d6e84:	4904      	ldr	r1, [pc, #16]	; (d6e98 <_GLOBAL__sub_I_RGB+0x18>)
   d6e86:	2300      	movs	r3, #0
   d6e88:	6083      	str	r3, [r0, #8]
   d6e8a:	f000 ba99 	b.w	d73c0 <__aeabi_atexit>
   d6e8e:	bf00      	nop
   d6e90:	2003e5e0 	.word	0x2003e5e0
   d6e94:	2003e2f0 	.word	0x2003e2f0
   d6e98:	000d6e73 	.word	0x000d6e73

000d6e9c <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6e9c:	2300      	movs	r3, #0
   d6e9e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6ea0:	6043      	str	r3, [r0, #4]
	len = 0;
   d6ea2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6ea4:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6ea6:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d6ea8:	680c      	ldr	r4, [r1, #0]
   d6eaa:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d6eac:	684c      	ldr	r4, [r1, #4]
   d6eae:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6eb0:	688c      	ldr	r4, [r1, #8]
   d6eb2:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6eb4:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6eb6:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d6eb8:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d6eba:	bd10      	pop	{r4, pc}

000d6ebc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6ebc:	b510      	push	{r4, lr}
   d6ebe:	4604      	mov	r4, r0
{
	free(buffer);
   d6ec0:	6800      	ldr	r0, [r0, #0]
   d6ec2:	f7fd fdcd 	bl	d4a60 <free>
}
   d6ec6:	4620      	mov	r0, r4
   d6ec8:	bd10      	pop	{r4, pc}

000d6eca <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6eca:	b510      	push	{r4, lr}
   d6ecc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6ece:	6800      	ldr	r0, [r0, #0]
   d6ed0:	b108      	cbz	r0, d6ed6 <_ZN6String10invalidateEv+0xc>
   d6ed2:	f7fd fdc5 	bl	d4a60 <free>
	buffer = NULL;
   d6ed6:	2300      	movs	r3, #0
   d6ed8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6eda:	60a3      	str	r3, [r4, #8]
   d6edc:	6063      	str	r3, [r4, #4]
   d6ede:	bd10      	pop	{r4, pc}

000d6ee0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6ee0:	b538      	push	{r3, r4, r5, lr}
   d6ee2:	4604      	mov	r4, r0
   d6ee4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6ee6:	6800      	ldr	r0, [r0, #0]
   d6ee8:	3101      	adds	r1, #1
   d6eea:	f7fd fdc1 	bl	d4a70 <realloc>
	if (newbuffer) {
   d6eee:	b110      	cbz	r0, d6ef6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6ef0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6ef4:	2001      	movs	r0, #1
	}
	return 0;
}
   d6ef6:	bd38      	pop	{r3, r4, r5, pc}

000d6ef8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6ef8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6efa:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6efc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6efe:	b113      	cbz	r3, d6f06 <_ZN6String7reserveEj+0xe>
   d6f00:	6843      	ldr	r3, [r0, #4]
   d6f02:	428b      	cmp	r3, r1
   d6f04:	d207      	bcs.n	d6f16 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6f06:	4620      	mov	r0, r4
   d6f08:	f7ff ffea 	bl	d6ee0 <_ZN6String12changeBufferEj>
   d6f0c:	b120      	cbz	r0, d6f18 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6f0e:	68a3      	ldr	r3, [r4, #8]
   d6f10:	b90b      	cbnz	r3, d6f16 <_ZN6String7reserveEj+0x1e>
   d6f12:	6822      	ldr	r2, [r4, #0]
   d6f14:	7013      	strb	r3, [r2, #0]
   d6f16:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6f18:	bd10      	pop	{r4, pc}

000d6f1a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6f1a:	b570      	push	{r4, r5, r6, lr}
   d6f1c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6f1e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6f20:	4604      	mov	r4, r0
   d6f22:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6f24:	f7ff ffe8 	bl	d6ef8 <_ZN6String7reserveEj>
   d6f28:	b918      	cbnz	r0, d6f32 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6f2a:	4620      	mov	r0, r4
   d6f2c:	f7ff ffcd 	bl	d6eca <_ZN6String10invalidateEv>
		return *this;
   d6f30:	e009      	b.n	d6f46 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6f32:	462a      	mov	r2, r5
   d6f34:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6f36:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6f38:	6820      	ldr	r0, [r4, #0]
   d6f3a:	f000 fbc6 	bl	d76ca <memcpy>
	buffer[len] = 0;
   d6f3e:	6822      	ldr	r2, [r4, #0]
   d6f40:	68a3      	ldr	r3, [r4, #8]
   d6f42:	2100      	movs	r1, #0
   d6f44:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6f46:	4620      	mov	r0, r4
   d6f48:	bd70      	pop	{r4, r5, r6, pc}

000d6f4a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6f4a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f4c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6f4e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f50:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f52:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f54:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f56:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6f58:	460d      	mov	r5, r1
   d6f5a:	b139      	cbz	r1, d6f6c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6f5c:	4608      	mov	r0, r1
   d6f5e:	f000 fc2d 	bl	d77bc <strlen>
   d6f62:	4629      	mov	r1, r5
   d6f64:	4602      	mov	r2, r0
   d6f66:	4620      	mov	r0, r4
   d6f68:	f7ff ffd7 	bl	d6f1a <_ZN6String4copyEPKcj>
}
   d6f6c:	4620      	mov	r0, r4
   d6f6e:	bd38      	pop	{r3, r4, r5, pc}

000d6f70 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6f70:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6f72:	b510      	push	{r4, lr}
   d6f74:	460b      	mov	r3, r1
   d6f76:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6f78:	d007      	beq.n	d6f8a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6f7a:	6809      	ldr	r1, [r1, #0]
   d6f7c:	b119      	cbz	r1, d6f86 <_ZN6StringaSERKS_+0x16>
   d6f7e:	689a      	ldr	r2, [r3, #8]
   d6f80:	f7ff ffcb 	bl	d6f1a <_ZN6String4copyEPKcj>
   d6f84:	e001      	b.n	d6f8a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6f86:	f7ff ffa0 	bl	d6eca <_ZN6String10invalidateEv>

	return *this;
}
   d6f8a:	4620      	mov	r0, r4
   d6f8c:	bd10      	pop	{r4, pc}

000d6f8e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f8e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f90:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6f92:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f94:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f96:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f98:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f9a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6f9c:	f7ff ffe8 	bl	d6f70 <_ZN6StringaSERKS_>
}
   d6fa0:	4620      	mov	r0, r4
   d6fa2:	bd10      	pop	{r4, pc}

000d6fa4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6fa4:	b510      	push	{r4, lr}
   d6fa6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6fa8:	6800      	ldr	r0, [r0, #0]
   d6faa:	b118      	cbz	r0, d6fb4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6fac:	f7fd fd58 	bl	d4a60 <free>
            wakeupSource_ = nullptr;
   d6fb0:	2300      	movs	r3, #0
   d6fb2:	6023      	str	r3, [r4, #0]
   d6fb4:	bd10      	pop	{r4, pc}

000d6fb6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6fb6:	b510      	push	{r4, lr}
   d6fb8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6fba:	f7ff fff3 	bl	d6fa4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6fbe:	4620      	mov	r0, r4
   d6fc0:	bd10      	pop	{r4, pc}
	...

000d6fc4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6fc4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6fc6:	4c09      	ldr	r4, [pc, #36]	; (d6fec <_GLOBAL__sub_I_System+0x28>)
   d6fc8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6fca:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6fce:	6020      	str	r0, [r4, #0]
   d6fd0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6fd2:	71a0      	strb	r0, [r4, #6]
   d6fd4:	8120      	strh	r0, [r4, #8]
   d6fd6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6fd8:	f7fd fcc6 	bl	d4968 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6fdc:	4620      	mov	r0, r4
   d6fde:	4a04      	ldr	r2, [pc, #16]	; (d6ff0 <_GLOBAL__sub_I_System+0x2c>)
   d6fe0:	4904      	ldr	r1, [pc, #16]	; (d6ff4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6fe6:	f000 b9eb 	b.w	d73c0 <__aeabi_atexit>
   d6fea:	bf00      	nop
   d6fec:	2003e5f0 	.word	0x2003e5f0
   d6ff0:	2003e2f0 	.word	0x2003e2f0
   d6ff4:	000d6fb7 	.word	0x000d6fb7

000d6ff8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6ff8:	4b02      	ldr	r3, [pc, #8]	; (d7004 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6ffa:	681a      	ldr	r2, [r3, #0]
   d6ffc:	4b02      	ldr	r3, [pc, #8]	; (d7008 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6ffe:	601a      	str	r2, [r3, #0]
   d7000:	4770      	bx	lr
   d7002:	bf00      	nop
   d7004:	2003e284 	.word	0x2003e284
   d7008:	2003e5fc 	.word	0x2003e5fc

000d700c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d700c:	4770      	bx	lr

000d700e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d700e:	7441      	strb	r1, [r0, #17]
   d7010:	4770      	bx	lr

000d7012 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7012:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7014:	7c00      	ldrb	r0, [r0, #16]
   d7016:	f7fd fc2f 	bl	d4878 <HAL_USART_Available_Data_For_Write>
}
   d701a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d701e:	bd08      	pop	{r3, pc}

000d7020 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7020:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7022:	7c00      	ldrb	r0, [r0, #16]
   d7024:	f7fd fc08 	bl	d4838 <HAL_USART_Available_Data>
}
   d7028:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d702c:	bd08      	pop	{r3, pc}

000d702e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d702e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7030:	7c00      	ldrb	r0, [r0, #16]
   d7032:	f7fd fc11 	bl	d4858 <HAL_USART_Peek_Data>
}
   d7036:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d703a:	bf28      	it	cs
   d703c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7040:	bd08      	pop	{r3, pc}

000d7042 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7042:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7044:	7c00      	ldrb	r0, [r0, #16]
   d7046:	f7fd fbff 	bl	d4848 <HAL_USART_Read_Data>
}
   d704a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d704e:	bf28      	it	cs
   d7050:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7054:	bd08      	pop	{r3, pc}

000d7056 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7056:	7c00      	ldrb	r0, [r0, #16]
   d7058:	f7fd bc06 	b.w	d4868 <HAL_USART_Flush_Data>

000d705c <_ZN11USARTSerialD0Ev>:
   d705c:	b510      	push	{r4, lr}
   d705e:	2114      	movs	r1, #20
   d7060:	4604      	mov	r4, r0
   d7062:	f000 f9b2 	bl	d73ca <_ZdlPvj>
   d7066:	4620      	mov	r0, r4
   d7068:	bd10      	pop	{r4, pc}

000d706a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d706a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d706c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d706e:	4604      	mov	r4, r0
   d7070:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7072:	b925      	cbnz	r5, d707e <_ZN11USARTSerial5writeEh+0x14>
   d7074:	7c00      	ldrb	r0, [r0, #16]
   d7076:	f7fd fbff 	bl	d4878 <HAL_USART_Available_Data_For_Write>
   d707a:	2800      	cmp	r0, #0
   d707c:	dd05      	ble.n	d708a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d707e:	4631      	mov	r1, r6
   d7080:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7086:	f7fd bbcf 	b.w	d4828 <HAL_USART_Write_Data>
  }
  return 0;
}
   d708a:	4628      	mov	r0, r5
   d708c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7090 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7090:	b510      	push	{r4, lr}
   d7092:	4604      	mov	r4, r0
   d7094:	4608      	mov	r0, r1
   d7096:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7098:	2200      	movs	r2, #0
   d709a:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d709c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d70a0:	60a2      	str	r2, [r4, #8]
   d70a2:	4a05      	ldr	r2, [pc, #20]	; (d70b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d70a4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d70a6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d70a8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d70aa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d70ac:	461a      	mov	r2, r3
   d70ae:	f7fd fbab 	bl	d4808 <HAL_USART_Init>
}
   d70b2:	4620      	mov	r0, r4
   d70b4:	bd10      	pop	{r4, pc}
   d70b6:	bf00      	nop
   d70b8:	000d7e20 	.word	0x000d7e20

000d70bc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d70bc:	2300      	movs	r3, #0
   d70be:	7c00      	ldrb	r0, [r0, #16]
   d70c0:	f7fd bbe2 	b.w	d4888 <HAL_USART_BeginConfig>

000d70c4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d70c4:	2200      	movs	r2, #0
   d70c6:	f7ff bff9 	b.w	d70bc <_ZN11USARTSerial5beginEmm>

000d70ca <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d70ca:	7c00      	ldrb	r0, [r0, #16]
   d70cc:	f7fd bba4 	b.w	d4818 <HAL_USART_End>

000d70d0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d70d0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d70d2:	4d0c      	ldr	r5, [pc, #48]	; (d7104 <_Z22__fetch_global_Serial1v+0x34>)
   d70d4:	6829      	ldr	r1, [r5, #0]
   d70d6:	f011 0401 	ands.w	r4, r1, #1
   d70da:	d111      	bne.n	d7100 <_Z22__fetch_global_Serial1v+0x30>
   d70dc:	4628      	mov	r0, r5
   d70de:	f7fc ffeb 	bl	d40b8 <__cxa_guard_acquire>
   d70e2:	b168      	cbz	r0, d7100 <_Z22__fetch_global_Serial1v+0x30>
   d70e4:	4a08      	ldr	r2, [pc, #32]	; (d7108 <_Z22__fetch_global_Serial1v+0x38>)
   d70e6:	4b09      	ldr	r3, [pc, #36]	; (d710c <_Z22__fetch_global_Serial1v+0x3c>)
   d70e8:	4809      	ldr	r0, [pc, #36]	; (d7110 <_Z22__fetch_global_Serial1v+0x40>)
   d70ea:	4621      	mov	r1, r4
   d70ec:	f7ff ffd0 	bl	d7090 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d70f0:	4628      	mov	r0, r5
   d70f2:	f7fc ffe6 	bl	d40c2 <__cxa_guard_release>
   d70f6:	4a07      	ldr	r2, [pc, #28]	; (d7114 <_Z22__fetch_global_Serial1v+0x44>)
   d70f8:	4907      	ldr	r1, [pc, #28]	; (d7118 <_Z22__fetch_global_Serial1v+0x48>)
   d70fa:	4805      	ldr	r0, [pc, #20]	; (d7110 <_Z22__fetch_global_Serial1v+0x40>)
   d70fc:	f000 f960 	bl	d73c0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7100:	4803      	ldr	r0, [pc, #12]	; (d7110 <_Z22__fetch_global_Serial1v+0x40>)
   d7102:	bd38      	pop	{r3, r4, r5, pc}
   d7104:	2003e698 	.word	0x2003e698
   d7108:	2003e69c 	.word	0x2003e69c
   d710c:	2003e614 	.word	0x2003e614
   d7110:	2003e600 	.word	0x2003e600
   d7114:	2003e2f0 	.word	0x2003e2f0
   d7118:	000d700d 	.word	0x000d700d

000d711c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d711c:	7441      	strb	r1, [r0, #17]
   d711e:	4770      	bx	lr

000d7120 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7120:	4770      	bx	lr

000d7122 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7122:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7124:	2100      	movs	r1, #0
   d7126:	7c00      	ldrb	r0, [r0, #16]
   d7128:	f7fd fbde 	bl	d48e8 <HAL_USB_USART_Receive_Data>
}
   d712c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7130:	bf28      	it	cs
   d7132:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7136:	bd08      	pop	{r3, pc}

000d7138 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7138:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d713a:	2101      	movs	r1, #1
   d713c:	7c00      	ldrb	r0, [r0, #16]
   d713e:	f7fd fbd3 	bl	d48e8 <HAL_USB_USART_Receive_Data>
}
   d7142:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7146:	bf28      	it	cs
   d7148:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d714c:	bd08      	pop	{r3, pc}

000d714e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d714e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7150:	7c00      	ldrb	r0, [r0, #16]
   d7152:	f7fd fbc1 	bl	d48d8 <HAL_USB_USART_Available_Data_For_Write>
}
   d7156:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d715a:	bd08      	pop	{r3, pc}

000d715c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d715c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d715e:	7c00      	ldrb	r0, [r0, #16]
   d7160:	f7fd fbb2 	bl	d48c8 <HAL_USB_USART_Available_Data>
}
   d7164:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7168:	bd08      	pop	{r3, pc}

000d716a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d716a:	7c00      	ldrb	r0, [r0, #16]
   d716c:	f7fd bbcc 	b.w	d4908 <HAL_USB_USART_Flush_Data>

000d7170 <_ZN9USBSerialD0Ev>:
   d7170:	b510      	push	{r4, lr}
   d7172:	2114      	movs	r1, #20
   d7174:	4604      	mov	r4, r0
   d7176:	f000 f928 	bl	d73ca <_ZdlPvj>
   d717a:	4620      	mov	r0, r4
   d717c:	bd10      	pop	{r4, pc}

000d717e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d717e:	b538      	push	{r3, r4, r5, lr}
   d7180:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7182:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7184:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7186:	f7fd fba7 	bl	d48d8 <HAL_USB_USART_Available_Data_For_Write>
   d718a:	2800      	cmp	r0, #0
   d718c:	dc01      	bgt.n	d7192 <_ZN9USBSerial5writeEh+0x14>
   d718e:	7c60      	ldrb	r0, [r4, #17]
   d7190:	b128      	cbz	r0, d719e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7192:	4629      	mov	r1, r5
   d7194:	7c20      	ldrb	r0, [r4, #16]
   d7196:	f7fd fbaf 	bl	d48f8 <HAL_USB_USART_Send_Data>
   d719a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d719e:	bd38      	pop	{r3, r4, r5, pc}

000d71a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d71a0:	b510      	push	{r4, lr}
   d71a2:	4604      	mov	r4, r0
   d71a4:	2300      	movs	r3, #0
   d71a6:	6063      	str	r3, [r4, #4]
   d71a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d71ac:	60a3      	str	r3, [r4, #8]
   d71ae:	4b05      	ldr	r3, [pc, #20]	; (d71c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d71b0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d71b2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d71b4:	4608      	mov	r0, r1
{
  _serial = serial;
   d71b6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d71b8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d71ba:	4611      	mov	r1, r2
   d71bc:	f7fd fb6c 	bl	d4898 <HAL_USB_USART_Init>
}
   d71c0:	4620      	mov	r0, r4
   d71c2:	bd10      	pop	{r4, pc}
   d71c4:	000d7e50 	.word	0x000d7e50

000d71c8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d71c8:	2200      	movs	r2, #0
   d71ca:	7c00      	ldrb	r0, [r0, #16]
   d71cc:	f7fd bb6c 	b.w	d48a8 <HAL_USB_USART_Begin>

000d71d0 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d71d0:	7c00      	ldrb	r0, [r0, #16]
   d71d2:	f7fd bb71 	b.w	d48b8 <HAL_USB_USART_End>

000d71d6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d71d6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d71d8:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d71da:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d71dc:	2100      	movs	r1, #0
   d71de:	f000 fa9a 	bl	d7716 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d71e2:	4620      	mov	r0, r4
   d71e4:	bd10      	pop	{r4, pc}
	...

000d71e8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d71e8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d71ea:	4d0e      	ldr	r5, [pc, #56]	; (d7224 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d71ec:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d71ee:	a801      	add	r0, sp, #4
   d71f0:	f7ff fff1 	bl	d71d6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d71f4:	6829      	ldr	r1, [r5, #0]
   d71f6:	f011 0401 	ands.w	r4, r1, #1
   d71fa:	d110      	bne.n	d721e <_Z16_fetch_usbserialv+0x36>
   d71fc:	4628      	mov	r0, r5
   d71fe:	f7fc ff5b 	bl	d40b8 <__cxa_guard_acquire>
   d7202:	b160      	cbz	r0, d721e <_Z16_fetch_usbserialv+0x36>
   d7204:	aa01      	add	r2, sp, #4
   d7206:	4621      	mov	r1, r4
   d7208:	4807      	ldr	r0, [pc, #28]	; (d7228 <_Z16_fetch_usbserialv+0x40>)
   d720a:	f7ff ffc9 	bl	d71a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d720e:	4628      	mov	r0, r5
   d7210:	f7fc ff57 	bl	d40c2 <__cxa_guard_release>
   d7214:	4a05      	ldr	r2, [pc, #20]	; (d722c <_Z16_fetch_usbserialv+0x44>)
   d7216:	4906      	ldr	r1, [pc, #24]	; (d7230 <_Z16_fetch_usbserialv+0x48>)
   d7218:	4803      	ldr	r0, [pc, #12]	; (d7228 <_Z16_fetch_usbserialv+0x40>)
   d721a:	f000 f8d1 	bl	d73c0 <__aeabi_atexit>
	return _usbserial;
}
   d721e:	4802      	ldr	r0, [pc, #8]	; (d7228 <_Z16_fetch_usbserialv+0x40>)
   d7220:	b007      	add	sp, #28
   d7222:	bd30      	pop	{r4, r5, pc}
   d7224:	2003e720 	.word	0x2003e720
   d7228:	2003e724 	.word	0x2003e724
   d722c:	2003e2f0 	.word	0x2003e2f0
   d7230:	000d7121 	.word	0x000d7121

000d7234 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7234:	2200      	movs	r2, #0
   d7236:	4611      	mov	r1, r2
   d7238:	6840      	ldr	r0, [r0, #4]
   d723a:	f7fd bbd1 	b.w	d49e0 <network_ready>

000d723e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d723e:	2200      	movs	r2, #0
   d7240:	4611      	mov	r1, r2
   d7242:	6840      	ldr	r0, [r0, #4]
   d7244:	f7fd bbec 	b.w	d4a20 <network_listening>

000d7248 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7248:	2200      	movs	r2, #0
   d724a:	4611      	mov	r1, r2
   d724c:	6840      	ldr	r0, [r0, #4]
   d724e:	f7fd bbf7 	b.w	d4a40 <network_get_listen_timeout>

000d7252 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7252:	2200      	movs	r2, #0
   d7254:	6840      	ldr	r0, [r0, #4]
   d7256:	f7fd bbeb 	b.w	d4a30 <network_set_listen_timeout>

000d725a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d725a:	2200      	movs	r2, #0
   d725c:	f081 0101 	eor.w	r1, r1, #1
   d7260:	6840      	ldr	r0, [r0, #4]
   d7262:	f7fd bbd5 	b.w	d4a10 <network_listen>

000d7266 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7266:	2300      	movs	r3, #0
   d7268:	461a      	mov	r2, r3
   d726a:	4619      	mov	r1, r3
   d726c:	6840      	ldr	r0, [r0, #4]
   d726e:	f7fd bbc7 	b.w	d4a00 <network_off>

000d7272 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7272:	2300      	movs	r3, #0
   d7274:	461a      	mov	r2, r3
   d7276:	4619      	mov	r1, r3
   d7278:	6840      	ldr	r0, [r0, #4]
   d727a:	f7fd bbb9 	b.w	d49f0 <network_on>

000d727e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d727e:	2200      	movs	r2, #0
   d7280:	4611      	mov	r1, r2
   d7282:	6840      	ldr	r0, [r0, #4]
   d7284:	f7fd bb9c 	b.w	d49c0 <network_connecting>

000d7288 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7288:	2200      	movs	r2, #0
   d728a:	2102      	movs	r1, #2
   d728c:	6840      	ldr	r0, [r0, #4]
   d728e:	f7fd bb9f 	b.w	d49d0 <network_disconnect>

000d7292 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7292:	2300      	movs	r3, #0
   d7294:	461a      	mov	r2, r3
   d7296:	6840      	ldr	r0, [r0, #4]
   d7298:	f7fd bb8a 	b.w	d49b0 <network_connect>

000d729c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d729c:	4b02      	ldr	r3, [pc, #8]	; (d72a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d729e:	2204      	movs	r2, #4
   d72a0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d72a2:	4a02      	ldr	r2, [pc, #8]	; (d72ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d72a4:	601a      	str	r2, [r3, #0]
   d72a6:	4770      	bx	lr
   d72a8:	2003e738 	.word	0x2003e738
   d72ac:	000d7e80 	.word	0x000d7e80

000d72b0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d72b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d72b2:	4b0c      	ldr	r3, [pc, #48]	; (d72e4 <serialEventRun+0x34>)
   d72b4:	b133      	cbz	r3, d72c4 <serialEventRun+0x14>
   d72b6:	f7ff ff97 	bl	d71e8 <_Z16_fetch_usbserialv>
   d72ba:	6803      	ldr	r3, [r0, #0]
   d72bc:	691b      	ldr	r3, [r3, #16]
   d72be:	4798      	blx	r3
   d72c0:	2800      	cmp	r0, #0
   d72c2:	dc09      	bgt.n	d72d8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d72c4:	4b08      	ldr	r3, [pc, #32]	; (d72e8 <serialEventRun+0x38>)
   d72c6:	b163      	cbz	r3, d72e2 <serialEventRun+0x32>
   d72c8:	f7ff ff02 	bl	d70d0 <_Z22__fetch_global_Serial1v>
   d72cc:	6803      	ldr	r3, [r0, #0]
   d72ce:	691b      	ldr	r3, [r3, #16]
   d72d0:	4798      	blx	r3
   d72d2:	2800      	cmp	r0, #0
   d72d4:	dc03      	bgt.n	d72de <serialEventRun+0x2e>
   d72d6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d72d8:	f3af 8000 	nop.w
   d72dc:	e7f2      	b.n	d72c4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d72de:	f3af 8000 	nop.w
   d72e2:	bd08      	pop	{r3, pc}
	...

000d72ec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d72ec:	b508      	push	{r3, lr}
	serialEventRun();
   d72ee:	f7ff ffdf 	bl	d72b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d72f2:	f7fd fa61 	bl	d47b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d72f6:	4b01      	ldr	r3, [pc, #4]	; (d72fc <_post_loop+0x10>)
   d72f8:	6018      	str	r0, [r3, #0]
   d72fa:	bd08      	pop	{r3, pc}
   d72fc:	2003e748 	.word	0x2003e748

000d7300 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7300:	4802      	ldr	r0, [pc, #8]	; (d730c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7302:	4a03      	ldr	r2, [pc, #12]	; (d7310 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7304:	4903      	ldr	r1, [pc, #12]	; (d7314 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7306:	1a12      	subs	r2, r2, r0
   d7308:	f000 b9df 	b.w	d76ca <memcpy>
   d730c:	2003f400 	.word	0x2003f400
   d7310:	2003f404 	.word	0x2003f404
   d7314:	000d8050 	.word	0x000d8050

000d7318 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7318:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d731a:	2300      	movs	r3, #0
   d731c:	9300      	str	r3, [sp, #0]
   d731e:	461a      	mov	r2, r3
   d7320:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7324:	f7fd fb32 	bl	d498c <system_ctrl_set_result>
}
   d7328:	b003      	add	sp, #12
   d732a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7330 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7330:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7332:	8843      	ldrh	r3, [r0, #2]
   d7334:	2b0a      	cmp	r3, #10
   d7336:	d008      	beq.n	d734a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7338:	2b50      	cmp	r3, #80	; 0x50
   d733a:	d109      	bne.n	d7350 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d733c:	4b09      	ldr	r3, [pc, #36]	; (d7364 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d733e:	681b      	ldr	r3, [r3, #0]
   d7340:	b13b      	cbz	r3, d7352 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7342:	b003      	add	sp, #12
   d7344:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7348:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d734a:	f7ff ffe5 	bl	d7318 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d734e:	e006      	b.n	d735e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7350:	2300      	movs	r3, #0
   d7352:	9300      	str	r3, [sp, #0]
   d7354:	461a      	mov	r2, r3
   d7356:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d735a:	f7fd fb17 	bl	d498c <system_ctrl_set_result>
        break;
    }
}
   d735e:	b003      	add	sp, #12
   d7360:	f85d fb04 	ldr.w	pc, [sp], #4
   d7364:	2003e740 	.word	0x2003e740

000d7368 <module_user_init_hook>:

void module_user_init_hook()
{
   d7368:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d736a:	4c10      	ldr	r4, [pc, #64]	; (d73ac <module_user_init_hook+0x44>)
   d736c:	4d10      	ldr	r5, [pc, #64]	; (d73b0 <module_user_init_hook+0x48>)
   d736e:	6823      	ldr	r3, [r4, #0]
   d7370:	42ab      	cmp	r3, r5
   d7372:	4b10      	ldr	r3, [pc, #64]	; (d73b4 <module_user_init_hook+0x4c>)
   d7374:	bf0c      	ite	eq
   d7376:	2201      	moveq	r2, #1
   d7378:	2200      	movne	r2, #0
   d737a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d737c:	d002      	beq.n	d7384 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d737e:	f7ff ffbf 	bl	d7300 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7382:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7384:	f7fd fa08 	bl	d4798 <HAL_RNG_GetRandomNumber>
   d7388:	4604      	mov	r4, r0
    srand(seed);
   d738a:	f000 f9cd 	bl	d7728 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d738e:	4b0a      	ldr	r3, [pc, #40]	; (d73b8 <module_user_init_hook+0x50>)
   d7390:	b113      	cbz	r3, d7398 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7392:	4620      	mov	r0, r4
   d7394:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7398:	2100      	movs	r1, #0
   d739a:	4807      	ldr	r0, [pc, #28]	; (d73b8 <module_user_init_hook+0x50>)
   d739c:	f7fd fb00 	bl	d49a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d73a0:	2100      	movs	r1, #0
   d73a2:	4806      	ldr	r0, [pc, #24]	; (d73bc <module_user_init_hook+0x54>)
}
   d73a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d73a8:	f7fd bae6 	b.w	d4978 <system_ctrl_set_app_request_handler>
   d73ac:	2003f400 	.word	0x2003f400
   d73b0:	9a271c1e 	.word	0x9a271c1e
   d73b4:	2003e744 	.word	0x2003e744
   d73b8:	00000000 	.word	0x00000000
   d73bc:	000d7331 	.word	0x000d7331

000d73c0 <__aeabi_atexit>:
   d73c0:	460b      	mov	r3, r1
   d73c2:	4601      	mov	r1, r0
   d73c4:	4618      	mov	r0, r3
   d73c6:	f000 b963 	b.w	d7690 <__cxa_atexit>

000d73ca <_ZdlPvj>:
   d73ca:	f7fc be66 	b.w	d409a <_ZdlPv>
	...

000d73d0 <_ZSt15get_new_handlerv>:
   d73d0:	4b02      	ldr	r3, [pc, #8]	; (d73dc <_ZSt15get_new_handlerv+0xc>)
   d73d2:	6818      	ldr	r0, [r3, #0]
   d73d4:	f3bf 8f5f 	dmb	sy
   d73d8:	4770      	bx	lr
   d73da:	bf00      	nop
   d73dc:	2003e74c 	.word	0x2003e74c

000d73e0 <_ZnwjRKSt9nothrow_t>:
   d73e0:	b510      	push	{r4, lr}
   d73e2:	2800      	cmp	r0, #0
   d73e4:	bf14      	ite	ne
   d73e6:	4604      	movne	r4, r0
   d73e8:	2401      	moveq	r4, #1
   d73ea:	4620      	mov	r0, r4
   d73ec:	f7fd fb30 	bl	d4a50 <malloc>
   d73f0:	b920      	cbnz	r0, d73fc <_ZnwjRKSt9nothrow_t+0x1c>
   d73f2:	f7ff ffed 	bl	d73d0 <_ZSt15get_new_handlerv>
   d73f6:	b108      	cbz	r0, d73fc <_ZnwjRKSt9nothrow_t+0x1c>
   d73f8:	4780      	blx	r0
   d73fa:	e7f6      	b.n	d73ea <_ZnwjRKSt9nothrow_t+0xa>
   d73fc:	bd10      	pop	{r4, pc}
	...

000d7400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7400:	4b24      	ldr	r3, [pc, #144]	; (d7494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7402:	681a      	ldr	r2, [r3, #0]
   d7404:	07d0      	lsls	r0, r2, #31
   d7406:	bf5c      	itt	pl
   d7408:	2201      	movpl	r2, #1
   d740a:	601a      	strpl	r2, [r3, #0]
   d740c:	4b22      	ldr	r3, [pc, #136]	; (d7498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d740e:	681a      	ldr	r2, [r3, #0]
   d7410:	07d1      	lsls	r1, r2, #31
   d7412:	bf5c      	itt	pl
   d7414:	2201      	movpl	r2, #1
   d7416:	601a      	strpl	r2, [r3, #0]
   d7418:	4b20      	ldr	r3, [pc, #128]	; (d749c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d741a:	681a      	ldr	r2, [r3, #0]
   d741c:	07d2      	lsls	r2, r2, #31
   d741e:	bf5c      	itt	pl
   d7420:	2201      	movpl	r2, #1
   d7422:	601a      	strpl	r2, [r3, #0]
   d7424:	4b1e      	ldr	r3, [pc, #120]	; (d74a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7426:	681a      	ldr	r2, [r3, #0]
   d7428:	07d0      	lsls	r0, r2, #31
   d742a:	bf5c      	itt	pl
   d742c:	2201      	movpl	r2, #1
   d742e:	601a      	strpl	r2, [r3, #0]
   d7430:	4b1c      	ldr	r3, [pc, #112]	; (d74a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7432:	681a      	ldr	r2, [r3, #0]
   d7434:	07d1      	lsls	r1, r2, #31
   d7436:	bf5c      	itt	pl
   d7438:	2201      	movpl	r2, #1
   d743a:	601a      	strpl	r2, [r3, #0]
   d743c:	4b1a      	ldr	r3, [pc, #104]	; (d74a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d743e:	681a      	ldr	r2, [r3, #0]
   d7440:	07d2      	lsls	r2, r2, #31
   d7442:	bf5c      	itt	pl
   d7444:	2201      	movpl	r2, #1
   d7446:	601a      	strpl	r2, [r3, #0]
   d7448:	4b18      	ldr	r3, [pc, #96]	; (d74ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d744a:	681a      	ldr	r2, [r3, #0]
   d744c:	07d0      	lsls	r0, r2, #31
   d744e:	bf5c      	itt	pl
   d7450:	2201      	movpl	r2, #1
   d7452:	601a      	strpl	r2, [r3, #0]
   d7454:	4b16      	ldr	r3, [pc, #88]	; (d74b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7456:	681a      	ldr	r2, [r3, #0]
   d7458:	07d1      	lsls	r1, r2, #31
   d745a:	bf5c      	itt	pl
   d745c:	2201      	movpl	r2, #1
   d745e:	601a      	strpl	r2, [r3, #0]
   d7460:	4b14      	ldr	r3, [pc, #80]	; (d74b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7462:	681a      	ldr	r2, [r3, #0]
   d7464:	07d2      	lsls	r2, r2, #31
   d7466:	bf5c      	itt	pl
   d7468:	2201      	movpl	r2, #1
   d746a:	601a      	strpl	r2, [r3, #0]
   d746c:	4b12      	ldr	r3, [pc, #72]	; (d74b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d746e:	681a      	ldr	r2, [r3, #0]
   d7470:	07d0      	lsls	r0, r2, #31
   d7472:	bf5c      	itt	pl
   d7474:	2201      	movpl	r2, #1
   d7476:	601a      	strpl	r2, [r3, #0]
   d7478:	4b10      	ldr	r3, [pc, #64]	; (d74bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d747a:	681a      	ldr	r2, [r3, #0]
   d747c:	07d1      	lsls	r1, r2, #31
   d747e:	bf5c      	itt	pl
   d7480:	2201      	movpl	r2, #1
   d7482:	601a      	strpl	r2, [r3, #0]
   d7484:	4b0e      	ldr	r3, [pc, #56]	; (d74c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7486:	681a      	ldr	r2, [r3, #0]
   d7488:	07d2      	lsls	r2, r2, #31
   d748a:	bf5c      	itt	pl
   d748c:	2201      	movpl	r2, #1
   d748e:	601a      	strpl	r2, [r3, #0]
   d7490:	4770      	bx	lr
   d7492:	bf00      	nop
   d7494:	2003e77c 	.word	0x2003e77c
   d7498:	2003e778 	.word	0x2003e778
   d749c:	2003e774 	.word	0x2003e774
   d74a0:	2003e770 	.word	0x2003e770
   d74a4:	2003e76c 	.word	0x2003e76c
   d74a8:	2003e768 	.word	0x2003e768
   d74ac:	2003e764 	.word	0x2003e764
   d74b0:	2003e760 	.word	0x2003e760
   d74b4:	2003e75c 	.word	0x2003e75c
   d74b8:	2003e758 	.word	0x2003e758
   d74bc:	2003e754 	.word	0x2003e754
   d74c0:	2003e750 	.word	0x2003e750

000d74c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d74c4:	4b18      	ldr	r3, [pc, #96]	; (d7528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d74c6:	681a      	ldr	r2, [r3, #0]
   d74c8:	07d1      	lsls	r1, r2, #31
   d74ca:	bf5c      	itt	pl
   d74cc:	2201      	movpl	r2, #1
   d74ce:	601a      	strpl	r2, [r3, #0]
   d74d0:	4b16      	ldr	r3, [pc, #88]	; (d752c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d74d2:	681a      	ldr	r2, [r3, #0]
   d74d4:	07d2      	lsls	r2, r2, #31
   d74d6:	bf5c      	itt	pl
   d74d8:	2201      	movpl	r2, #1
   d74da:	601a      	strpl	r2, [r3, #0]
   d74dc:	4b14      	ldr	r3, [pc, #80]	; (d7530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d74de:	681a      	ldr	r2, [r3, #0]
   d74e0:	07d0      	lsls	r0, r2, #31
   d74e2:	bf5c      	itt	pl
   d74e4:	2201      	movpl	r2, #1
   d74e6:	601a      	strpl	r2, [r3, #0]
   d74e8:	4b12      	ldr	r3, [pc, #72]	; (d7534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d74ea:	681a      	ldr	r2, [r3, #0]
   d74ec:	07d1      	lsls	r1, r2, #31
   d74ee:	bf5c      	itt	pl
   d74f0:	2201      	movpl	r2, #1
   d74f2:	601a      	strpl	r2, [r3, #0]
   d74f4:	4b10      	ldr	r3, [pc, #64]	; (d7538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d74f6:	681a      	ldr	r2, [r3, #0]
   d74f8:	07d2      	lsls	r2, r2, #31
   d74fa:	bf5c      	itt	pl
   d74fc:	2201      	movpl	r2, #1
   d74fe:	601a      	strpl	r2, [r3, #0]
   d7500:	4b0e      	ldr	r3, [pc, #56]	; (d753c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7502:	681a      	ldr	r2, [r3, #0]
   d7504:	07d0      	lsls	r0, r2, #31
   d7506:	bf5c      	itt	pl
   d7508:	2201      	movpl	r2, #1
   d750a:	601a      	strpl	r2, [r3, #0]
   d750c:	4b0c      	ldr	r3, [pc, #48]	; (d7540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d750e:	681a      	ldr	r2, [r3, #0]
   d7510:	07d1      	lsls	r1, r2, #31
   d7512:	bf5c      	itt	pl
   d7514:	2201      	movpl	r2, #1
   d7516:	601a      	strpl	r2, [r3, #0]
   d7518:	4b0a      	ldr	r3, [pc, #40]	; (d7544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d751a:	681a      	ldr	r2, [r3, #0]
   d751c:	07d2      	lsls	r2, r2, #31
   d751e:	bf5c      	itt	pl
   d7520:	2201      	movpl	r2, #1
   d7522:	601a      	strpl	r2, [r3, #0]
   d7524:	4770      	bx	lr
   d7526:	bf00      	nop
   d7528:	2003e79c 	.word	0x2003e79c
   d752c:	2003e798 	.word	0x2003e798
   d7530:	2003e794 	.word	0x2003e794
   d7534:	2003e790 	.word	0x2003e790
   d7538:	2003e78c 	.word	0x2003e78c
   d753c:	2003e788 	.word	0x2003e788
   d7540:	2003e784 	.word	0x2003e784
   d7544:	2003e780 	.word	0x2003e780

000d7548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7548:	4b18      	ldr	r3, [pc, #96]	; (d75ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d754a:	681a      	ldr	r2, [r3, #0]
   d754c:	07d1      	lsls	r1, r2, #31
   d754e:	bf5c      	itt	pl
   d7550:	2201      	movpl	r2, #1
   d7552:	601a      	strpl	r2, [r3, #0]
   d7554:	4b16      	ldr	r3, [pc, #88]	; (d75b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7556:	681a      	ldr	r2, [r3, #0]
   d7558:	07d2      	lsls	r2, r2, #31
   d755a:	bf5c      	itt	pl
   d755c:	2201      	movpl	r2, #1
   d755e:	601a      	strpl	r2, [r3, #0]
   d7560:	4b14      	ldr	r3, [pc, #80]	; (d75b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7562:	681a      	ldr	r2, [r3, #0]
   d7564:	07d0      	lsls	r0, r2, #31
   d7566:	bf5c      	itt	pl
   d7568:	2201      	movpl	r2, #1
   d756a:	601a      	strpl	r2, [r3, #0]
   d756c:	4b12      	ldr	r3, [pc, #72]	; (d75b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d756e:	681a      	ldr	r2, [r3, #0]
   d7570:	07d1      	lsls	r1, r2, #31
   d7572:	bf5c      	itt	pl
   d7574:	2201      	movpl	r2, #1
   d7576:	601a      	strpl	r2, [r3, #0]
   d7578:	4b10      	ldr	r3, [pc, #64]	; (d75bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d757a:	681a      	ldr	r2, [r3, #0]
   d757c:	07d2      	lsls	r2, r2, #31
   d757e:	bf5c      	itt	pl
   d7580:	2201      	movpl	r2, #1
   d7582:	601a      	strpl	r2, [r3, #0]
   d7584:	4b0e      	ldr	r3, [pc, #56]	; (d75c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7586:	681a      	ldr	r2, [r3, #0]
   d7588:	07d0      	lsls	r0, r2, #31
   d758a:	bf5c      	itt	pl
   d758c:	2201      	movpl	r2, #1
   d758e:	601a      	strpl	r2, [r3, #0]
   d7590:	4b0c      	ldr	r3, [pc, #48]	; (d75c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7592:	681a      	ldr	r2, [r3, #0]
   d7594:	07d1      	lsls	r1, r2, #31
   d7596:	bf5c      	itt	pl
   d7598:	2201      	movpl	r2, #1
   d759a:	601a      	strpl	r2, [r3, #0]
   d759c:	4b0a      	ldr	r3, [pc, #40]	; (d75c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d759e:	681a      	ldr	r2, [r3, #0]
   d75a0:	07d2      	lsls	r2, r2, #31
   d75a2:	bf5c      	itt	pl
   d75a4:	2201      	movpl	r2, #1
   d75a6:	601a      	strpl	r2, [r3, #0]
   d75a8:	4770      	bx	lr
   d75aa:	bf00      	nop
   d75ac:	2003e7bc 	.word	0x2003e7bc
   d75b0:	2003e7b8 	.word	0x2003e7b8
   d75b4:	2003e7b4 	.word	0x2003e7b4
   d75b8:	2003e7b0 	.word	0x2003e7b0
   d75bc:	2003e7ac 	.word	0x2003e7ac
   d75c0:	2003e7a8 	.word	0x2003e7a8
   d75c4:	2003e7a4 	.word	0x2003e7a4
   d75c8:	2003e7a0 	.word	0x2003e7a0

000d75cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d75cc:	4b24      	ldr	r3, [pc, #144]	; (d7660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d75ce:	681a      	ldr	r2, [r3, #0]
   d75d0:	07d0      	lsls	r0, r2, #31
   d75d2:	bf5c      	itt	pl
   d75d4:	2201      	movpl	r2, #1
   d75d6:	601a      	strpl	r2, [r3, #0]
   d75d8:	4b22      	ldr	r3, [pc, #136]	; (d7664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d75da:	681a      	ldr	r2, [r3, #0]
   d75dc:	07d1      	lsls	r1, r2, #31
   d75de:	bf5c      	itt	pl
   d75e0:	2201      	movpl	r2, #1
   d75e2:	601a      	strpl	r2, [r3, #0]
   d75e4:	4b20      	ldr	r3, [pc, #128]	; (d7668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d75e6:	681a      	ldr	r2, [r3, #0]
   d75e8:	07d2      	lsls	r2, r2, #31
   d75ea:	bf5c      	itt	pl
   d75ec:	2201      	movpl	r2, #1
   d75ee:	601a      	strpl	r2, [r3, #0]
   d75f0:	4b1e      	ldr	r3, [pc, #120]	; (d766c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d75f2:	681a      	ldr	r2, [r3, #0]
   d75f4:	07d0      	lsls	r0, r2, #31
   d75f6:	bf5c      	itt	pl
   d75f8:	2201      	movpl	r2, #1
   d75fa:	601a      	strpl	r2, [r3, #0]
   d75fc:	4b1c      	ldr	r3, [pc, #112]	; (d7670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d75fe:	681a      	ldr	r2, [r3, #0]
   d7600:	07d1      	lsls	r1, r2, #31
   d7602:	bf5c      	itt	pl
   d7604:	2201      	movpl	r2, #1
   d7606:	601a      	strpl	r2, [r3, #0]
   d7608:	4b1a      	ldr	r3, [pc, #104]	; (d7674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d760a:	681a      	ldr	r2, [r3, #0]
   d760c:	07d2      	lsls	r2, r2, #31
   d760e:	bf5c      	itt	pl
   d7610:	2201      	movpl	r2, #1
   d7612:	601a      	strpl	r2, [r3, #0]
   d7614:	4b18      	ldr	r3, [pc, #96]	; (d7678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7616:	681a      	ldr	r2, [r3, #0]
   d7618:	07d0      	lsls	r0, r2, #31
   d761a:	bf5c      	itt	pl
   d761c:	2201      	movpl	r2, #1
   d761e:	601a      	strpl	r2, [r3, #0]
   d7620:	4b16      	ldr	r3, [pc, #88]	; (d767c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7622:	681a      	ldr	r2, [r3, #0]
   d7624:	07d1      	lsls	r1, r2, #31
   d7626:	bf5c      	itt	pl
   d7628:	2201      	movpl	r2, #1
   d762a:	601a      	strpl	r2, [r3, #0]
   d762c:	4b14      	ldr	r3, [pc, #80]	; (d7680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d762e:	681a      	ldr	r2, [r3, #0]
   d7630:	07d2      	lsls	r2, r2, #31
   d7632:	bf5c      	itt	pl
   d7634:	2201      	movpl	r2, #1
   d7636:	601a      	strpl	r2, [r3, #0]
   d7638:	4b12      	ldr	r3, [pc, #72]	; (d7684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d763a:	681a      	ldr	r2, [r3, #0]
   d763c:	07d0      	lsls	r0, r2, #31
   d763e:	bf5c      	itt	pl
   d7640:	2201      	movpl	r2, #1
   d7642:	601a      	strpl	r2, [r3, #0]
   d7644:	4b10      	ldr	r3, [pc, #64]	; (d7688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7646:	681a      	ldr	r2, [r3, #0]
   d7648:	07d1      	lsls	r1, r2, #31
   d764a:	bf5c      	itt	pl
   d764c:	2201      	movpl	r2, #1
   d764e:	601a      	strpl	r2, [r3, #0]
   d7650:	4b0e      	ldr	r3, [pc, #56]	; (d768c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7652:	681a      	ldr	r2, [r3, #0]
   d7654:	07d2      	lsls	r2, r2, #31
   d7656:	bf5c      	itt	pl
   d7658:	2201      	movpl	r2, #1
   d765a:	601a      	strpl	r2, [r3, #0]
   d765c:	4770      	bx	lr
   d765e:	bf00      	nop
   d7660:	2003e7ec 	.word	0x2003e7ec
   d7664:	2003e7e8 	.word	0x2003e7e8
   d7668:	2003e7e4 	.word	0x2003e7e4
   d766c:	2003e7e0 	.word	0x2003e7e0
   d7670:	2003e7dc 	.word	0x2003e7dc
   d7674:	2003e7d8 	.word	0x2003e7d8
   d7678:	2003e7d4 	.word	0x2003e7d4
   d767c:	2003e7d0 	.word	0x2003e7d0
   d7680:	2003e7cc 	.word	0x2003e7cc
   d7684:	2003e7c8 	.word	0x2003e7c8
   d7688:	2003e7c4 	.word	0x2003e7c4
   d768c:	2003e7c0 	.word	0x2003e7c0

000d7690 <__cxa_atexit>:
   d7690:	b510      	push	{r4, lr}
   d7692:	4c05      	ldr	r4, [pc, #20]	; (d76a8 <__cxa_atexit+0x18>)
   d7694:	4613      	mov	r3, r2
   d7696:	b12c      	cbz	r4, d76a4 <__cxa_atexit+0x14>
   d7698:	460a      	mov	r2, r1
   d769a:	4601      	mov	r1, r0
   d769c:	2002      	movs	r0, #2
   d769e:	f3af 8000 	nop.w
   d76a2:	bd10      	pop	{r4, pc}
   d76a4:	4620      	mov	r0, r4
   d76a6:	bd10      	pop	{r4, pc}
   d76a8:	00000000 	.word	0x00000000

000d76ac <memcmp>:
   d76ac:	b510      	push	{r4, lr}
   d76ae:	3901      	subs	r1, #1
   d76b0:	4402      	add	r2, r0
   d76b2:	4290      	cmp	r0, r2
   d76b4:	d007      	beq.n	d76c6 <memcmp+0x1a>
   d76b6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d76ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d76be:	42a3      	cmp	r3, r4
   d76c0:	d0f7      	beq.n	d76b2 <memcmp+0x6>
   d76c2:	1b18      	subs	r0, r3, r4
   d76c4:	bd10      	pop	{r4, pc}
   d76c6:	2000      	movs	r0, #0
   d76c8:	bd10      	pop	{r4, pc}

000d76ca <memcpy>:
   d76ca:	b510      	push	{r4, lr}
   d76cc:	1e43      	subs	r3, r0, #1
   d76ce:	440a      	add	r2, r1
   d76d0:	4291      	cmp	r1, r2
   d76d2:	d004      	beq.n	d76de <memcpy+0x14>
   d76d4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d76d8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d76dc:	e7f8      	b.n	d76d0 <memcpy+0x6>
   d76de:	bd10      	pop	{r4, pc}

000d76e0 <memmove>:
   d76e0:	4288      	cmp	r0, r1
   d76e2:	b510      	push	{r4, lr}
   d76e4:	eb01 0302 	add.w	r3, r1, r2
   d76e8:	d801      	bhi.n	d76ee <memmove+0xe>
   d76ea:	1e42      	subs	r2, r0, #1
   d76ec:	e00b      	b.n	d7706 <memmove+0x26>
   d76ee:	4298      	cmp	r0, r3
   d76f0:	d2fb      	bcs.n	d76ea <memmove+0xa>
   d76f2:	1881      	adds	r1, r0, r2
   d76f4:	1ad2      	subs	r2, r2, r3
   d76f6:	42d3      	cmn	r3, r2
   d76f8:	d004      	beq.n	d7704 <memmove+0x24>
   d76fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d76fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d7702:	e7f8      	b.n	d76f6 <memmove+0x16>
   d7704:	bd10      	pop	{r4, pc}
   d7706:	4299      	cmp	r1, r3
   d7708:	d004      	beq.n	d7714 <memmove+0x34>
   d770a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d770e:	f802 4f01 	strb.w	r4, [r2, #1]!
   d7712:	e7f8      	b.n	d7706 <memmove+0x26>
   d7714:	bd10      	pop	{r4, pc}

000d7716 <memset>:
   d7716:	4402      	add	r2, r0
   d7718:	4603      	mov	r3, r0
   d771a:	4293      	cmp	r3, r2
   d771c:	d002      	beq.n	d7724 <memset+0xe>
   d771e:	f803 1b01 	strb.w	r1, [r3], #1
   d7722:	e7fa      	b.n	d771a <memset+0x4>
   d7724:	4770      	bx	lr
	...

000d7728 <srand>:
   d7728:	b538      	push	{r3, r4, r5, lr}
   d772a:	4b12      	ldr	r3, [pc, #72]	; (d7774 <srand+0x4c>)
   d772c:	681c      	ldr	r4, [r3, #0]
   d772e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7730:	4605      	mov	r5, r0
   d7732:	b9d3      	cbnz	r3, d776a <srand+0x42>
   d7734:	2018      	movs	r0, #24
   d7736:	f7fd f98b 	bl	d4a50 <malloc>
   d773a:	f243 330e 	movw	r3, #13070	; 0x330e
   d773e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7740:	8003      	strh	r3, [r0, #0]
   d7742:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7746:	8043      	strh	r3, [r0, #2]
   d7748:	f241 2334 	movw	r3, #4660	; 0x1234
   d774c:	8083      	strh	r3, [r0, #4]
   d774e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7752:	80c3      	strh	r3, [r0, #6]
   d7754:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7758:	8103      	strh	r3, [r0, #8]
   d775a:	2305      	movs	r3, #5
   d775c:	8143      	strh	r3, [r0, #10]
   d775e:	230b      	movs	r3, #11
   d7760:	8183      	strh	r3, [r0, #12]
   d7762:	2201      	movs	r2, #1
   d7764:	2300      	movs	r3, #0
   d7766:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d776a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d776c:	2200      	movs	r2, #0
   d776e:	611d      	str	r5, [r3, #16]
   d7770:	615a      	str	r2, [r3, #20]
   d7772:	bd38      	pop	{r3, r4, r5, pc}
   d7774:	2003e2ec 	.word	0x2003e2ec

000d7778 <strchr>:
   d7778:	b2c9      	uxtb	r1, r1
   d777a:	4603      	mov	r3, r0
   d777c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7780:	b11a      	cbz	r2, d778a <strchr+0x12>
   d7782:	4291      	cmp	r1, r2
   d7784:	d1f9      	bne.n	d777a <strchr+0x2>
   d7786:	4618      	mov	r0, r3
   d7788:	4770      	bx	lr
   d778a:	2900      	cmp	r1, #0
   d778c:	bf0c      	ite	eq
   d778e:	4618      	moveq	r0, r3
   d7790:	2000      	movne	r0, #0
   d7792:	4770      	bx	lr

000d7794 <strchrnul>:
   d7794:	b510      	push	{r4, lr}
   d7796:	4604      	mov	r4, r0
   d7798:	f7ff ffee 	bl	d7778 <strchr>
   d779c:	b918      	cbnz	r0, d77a6 <strchrnul+0x12>
   d779e:	4620      	mov	r0, r4
   d77a0:	f000 f80c 	bl	d77bc <strlen>
   d77a4:	4420      	add	r0, r4
   d77a6:	bd10      	pop	{r4, pc}

000d77a8 <strcmp>:
   d77a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d77ac:	f811 3b01 	ldrb.w	r3, [r1], #1
   d77b0:	2a01      	cmp	r2, #1
   d77b2:	bf28      	it	cs
   d77b4:	429a      	cmpcs	r2, r3
   d77b6:	d0f7      	beq.n	d77a8 <strcmp>
   d77b8:	1ad0      	subs	r0, r2, r3
   d77ba:	4770      	bx	lr

000d77bc <strlen>:
   d77bc:	4603      	mov	r3, r0
   d77be:	f813 2b01 	ldrb.w	r2, [r3], #1
   d77c2:	2a00      	cmp	r2, #0
   d77c4:	d1fb      	bne.n	d77be <strlen+0x2>
   d77c6:	1a18      	subs	r0, r3, r0
   d77c8:	3801      	subs	r0, #1
   d77ca:	4770      	bx	lr

000d77cc <strncmp>:
   d77cc:	b530      	push	{r4, r5, lr}
   d77ce:	b182      	cbz	r2, d77f2 <strncmp+0x26>
   d77d0:	1e45      	subs	r5, r0, #1
   d77d2:	3901      	subs	r1, #1
   d77d4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d77d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d77dc:	42a3      	cmp	r3, r4
   d77de:	d106      	bne.n	d77ee <strncmp+0x22>
   d77e0:	43ec      	mvns	r4, r5
   d77e2:	4414      	add	r4, r2
   d77e4:	42e0      	cmn	r0, r4
   d77e6:	d001      	beq.n	d77ec <strncmp+0x20>
   d77e8:	2b00      	cmp	r3, #0
   d77ea:	d1f3      	bne.n	d77d4 <strncmp+0x8>
   d77ec:	461c      	mov	r4, r3
   d77ee:	1b18      	subs	r0, r3, r4
   d77f0:	bd30      	pop	{r4, r5, pc}
   d77f2:	4610      	mov	r0, r2
   d77f4:	bd30      	pop	{r4, r5, pc}

000d77f6 <strrchr>:
   d77f6:	b538      	push	{r3, r4, r5, lr}
   d77f8:	4603      	mov	r3, r0
   d77fa:	460d      	mov	r5, r1
   d77fc:	b141      	cbz	r1, d7810 <strrchr+0x1a>
   d77fe:	2400      	movs	r4, #0
   d7800:	4629      	mov	r1, r5
   d7802:	4618      	mov	r0, r3
   d7804:	f7ff ffb8 	bl	d7778 <strchr>
   d7808:	b130      	cbz	r0, d7818 <strrchr+0x22>
   d780a:	1c43      	adds	r3, r0, #1
   d780c:	4604      	mov	r4, r0
   d780e:	e7f7      	b.n	d7800 <strrchr+0xa>
   d7810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7814:	f7ff bfb0 	b.w	d7778 <strchr>
   d7818:	4620      	mov	r0, r4
   d781a:	bd38      	pop	{r3, r4, r5, pc}

000d781c <_strtol_r>:
   d781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7820:	4680      	mov	r8, r0
   d7822:	4840      	ldr	r0, [pc, #256]	; (d7924 <_strtol_r+0x108>)
   d7824:	f8d0 9000 	ldr.w	r9, [r0]
   d7828:	460f      	mov	r7, r1
   d782a:	463d      	mov	r5, r7
   d782c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7830:	eb09 0004 	add.w	r0, r9, r4
   d7834:	7840      	ldrb	r0, [r0, #1]
   d7836:	f000 0008 	and.w	r0, r0, #8
   d783a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d783e:	b108      	cbz	r0, d7844 <_strtol_r+0x28>
   d7840:	462f      	mov	r7, r5
   d7842:	e7f2      	b.n	d782a <_strtol_r+0xe>
   d7844:	2c2d      	cmp	r4, #45	; 0x2d
   d7846:	d103      	bne.n	d7850 <_strtol_r+0x34>
   d7848:	1cbd      	adds	r5, r7, #2
   d784a:	787c      	ldrb	r4, [r7, #1]
   d784c:	2601      	movs	r6, #1
   d784e:	e003      	b.n	d7858 <_strtol_r+0x3c>
   d7850:	2c2b      	cmp	r4, #43	; 0x2b
   d7852:	bf04      	itt	eq
   d7854:	787c      	ldrbeq	r4, [r7, #1]
   d7856:	1cbd      	addeq	r5, r7, #2
   d7858:	b113      	cbz	r3, d7860 <_strtol_r+0x44>
   d785a:	2b10      	cmp	r3, #16
   d785c:	d10a      	bne.n	d7874 <_strtol_r+0x58>
   d785e:	e05b      	b.n	d7918 <_strtol_r+0xfc>
   d7860:	2c30      	cmp	r4, #48	; 0x30
   d7862:	d157      	bne.n	d7914 <_strtol_r+0xf8>
   d7864:	7828      	ldrb	r0, [r5, #0]
   d7866:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d786a:	2858      	cmp	r0, #88	; 0x58
   d786c:	d14d      	bne.n	d790a <_strtol_r+0xee>
   d786e:	786c      	ldrb	r4, [r5, #1]
   d7870:	2310      	movs	r3, #16
   d7872:	3502      	adds	r5, #2
   d7874:	2e00      	cmp	r6, #0
   d7876:	bf14      	ite	ne
   d7878:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d787c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7880:	2700      	movs	r7, #0
   d7882:	fbbc faf3 	udiv	sl, ip, r3
   d7886:	4638      	mov	r0, r7
   d7888:	fb03 cc1a 	mls	ip, r3, sl, ip
   d788c:	eb09 0e04 	add.w	lr, r9, r4
   d7890:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7894:	f01e 0f04 	tst.w	lr, #4
   d7898:	d001      	beq.n	d789e <_strtol_r+0x82>
   d789a:	3c30      	subs	r4, #48	; 0x30
   d789c:	e00b      	b.n	d78b6 <_strtol_r+0x9a>
   d789e:	f01e 0e03 	ands.w	lr, lr, #3
   d78a2:	d01b      	beq.n	d78dc <_strtol_r+0xc0>
   d78a4:	f1be 0f01 	cmp.w	lr, #1
   d78a8:	bf0c      	ite	eq
   d78aa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d78ae:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d78b2:	ebce 0404 	rsb	r4, lr, r4
   d78b6:	42a3      	cmp	r3, r4
   d78b8:	dd10      	ble.n	d78dc <_strtol_r+0xc0>
   d78ba:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d78be:	d00a      	beq.n	d78d6 <_strtol_r+0xba>
   d78c0:	4550      	cmp	r0, sl
   d78c2:	d806      	bhi.n	d78d2 <_strtol_r+0xb6>
   d78c4:	d101      	bne.n	d78ca <_strtol_r+0xae>
   d78c6:	4564      	cmp	r4, ip
   d78c8:	dc03      	bgt.n	d78d2 <_strtol_r+0xb6>
   d78ca:	fb03 4000 	mla	r0, r3, r0, r4
   d78ce:	2701      	movs	r7, #1
   d78d0:	e001      	b.n	d78d6 <_strtol_r+0xba>
   d78d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d78d6:	f815 4b01 	ldrb.w	r4, [r5], #1
   d78da:	e7d7      	b.n	d788c <_strtol_r+0x70>
   d78dc:	1c7b      	adds	r3, r7, #1
   d78de:	d10c      	bne.n	d78fa <_strtol_r+0xde>
   d78e0:	2e00      	cmp	r6, #0
   d78e2:	f04f 0322 	mov.w	r3, #34	; 0x22
   d78e6:	bf14      	ite	ne
   d78e8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d78ec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d78f0:	f8c8 3000 	str.w	r3, [r8]
   d78f4:	b92a      	cbnz	r2, d7902 <_strtol_r+0xe6>
   d78f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d78fa:	b106      	cbz	r6, d78fe <_strtol_r+0xe2>
   d78fc:	4240      	negs	r0, r0
   d78fe:	b172      	cbz	r2, d791e <_strtol_r+0x102>
   d7900:	b107      	cbz	r7, d7904 <_strtol_r+0xe8>
   d7902:	1e69      	subs	r1, r5, #1
   d7904:	6011      	str	r1, [r2, #0]
   d7906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d790a:	2430      	movs	r4, #48	; 0x30
   d790c:	2b00      	cmp	r3, #0
   d790e:	d1b1      	bne.n	d7874 <_strtol_r+0x58>
   d7910:	2308      	movs	r3, #8
   d7912:	e7af      	b.n	d7874 <_strtol_r+0x58>
   d7914:	230a      	movs	r3, #10
   d7916:	e7ad      	b.n	d7874 <_strtol_r+0x58>
   d7918:	2c30      	cmp	r4, #48	; 0x30
   d791a:	d0a3      	beq.n	d7864 <_strtol_r+0x48>
   d791c:	e7aa      	b.n	d7874 <_strtol_r+0x58>
   d791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7922:	bf00      	nop
   d7924:	2003e288 	.word	0x2003e288

000d7928 <strtol>:
   d7928:	4613      	mov	r3, r2
   d792a:	460a      	mov	r2, r1
   d792c:	4601      	mov	r1, r0
   d792e:	4802      	ldr	r0, [pc, #8]	; (d7938 <strtol+0x10>)
   d7930:	6800      	ldr	r0, [r0, #0]
   d7932:	f7ff bf73 	b.w	d781c <_strtol_r>
   d7936:	bf00      	nop
   d7938:	2003e2ec 	.word	0x2003e2ec

000d793c <dynalib_user>:
   d793c:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d794c:	00000000                                ....

000d7950 <_ZTVN5spark10LogHandlerE>:
	...
   d7960:	000d40a5 000d40cd                       .@...@..

000d7968 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d7970:	000d4105 000d4139 000d6765 000d40cf     .A..9A..eg...@..
   d7980:	78323025 53535200 25203a49 69542064     %02x.RSSI: %d Ti
   d7990:	203a656d 20646c25 3a43414d 32302520     me: %ld MAC: %02
   d79a0:	30253a58 253a5832 3a583230 58323025     X:%02X:%02X:%02X
   d79b0:	3230253a 30253a58 50005832 6c626f72     :%02X:%02X.Probl
   d79c0:	77206d65 20687469 5f706167 61726170     em with gap_para
   d79d0:	695f736d 3a74696e 00642520 63656843     ms_init: %d.Chec
   d79e0:	6669206b 43414d20 61686320 6465676e     k if MAC changed
   d79f0:	7061002e 00000070                       ..app...

000d79f8 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d7a00:	000d4aa1 000d4aa7 000d517b 000d4ab5     .J...J..{Q...J..
   d7a10:	000d4aa3 69726977 622e676e 5300656c     .J..wiring.ble.S
   d7a20:	74726174 73696420 65766f63 676e6972     tart discovering
   d7a30:	72657320 65636976 53002e73 74726174      services..Start
   d7a40:	73696420 65766f63 676e6972 61686320      discovering cha
   d7a50:	74636172 73697265 73636974 6550002e     racteristics..Pe
   d7a60:	64207265 63697665 73692065 73696d20     er device is mis
   d7a70:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   d7a80:	65707061 7020646e 20726565 746e6543     append peer Cent
   d7a90:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   d7aa0:	65746365 79622064 6e654320 6c617274     ected by Central
   d7ab0:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   d7ac0:	65746365 79622064 6d657220 2065746f     ected by remote 
   d7ad0:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   d7ae0:	6e206464 70207765 20726565 69766564     dd new peer devi
   d7af0:	002e6563 2077654e 69726570 72656870     ce..New peripher
   d7b00:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   d7b10:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   d7b20:	69642064 766f6373 64657265 61686320     d discovered cha
   d7b30:	74636172 73697265 2e636974 69614600     racteristic..Fai
   d7b40:	2064656c 61206f74 6e657070 69642064     led to append di
   d7b50:	766f6373 64657265 72657320 65636976     scovered service
   d7b60:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d7b70:	6c20646e 6c61636f 61686320 74636172     nd local charact
   d7b80:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   d7b90:	20646574 72616863 65746361 74736972     ted characterist
   d7ba0:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   d7bb0:	002e6465                                ed..

000d7bb4 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d7bb4:	5f9b34fb 80000080 00001000 00000000     .4._............

000d7bc4 <_ZTVN5spark13EthernetClassE>:
	...
   d7bcc:	000d568d 000d5683 000d5679 000d566f     .V...V..yV..oV..
   d7bdc:	000d5663 000d5657 000d564b 000d5643     cV..WV..KV..CV..
   d7bec:	000d5639 000d562f 000d6c75              9V../V..ul..

000d7bf8 <_ZTV9IPAddress>:
	...
   d7c00:	000d56bd 000d56ad 000d56af 00302e30     .V...V...V..0.0.
   d7c10:	736c6166 72740065 25006575 2e250075     false.true.%u.%.
   d7c20:	00666c2a 6e006725 006c6c75 34302575     *lf.%g.null.u%04
   d7c30:	00000078                                x...

000d7c34 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d7c3c:	000d5b41 000d5b67 000d5b1b 000d57bf     A[..g[...[...W..

000d7c4c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d7c54:	000d5fbd 000d5fd1 000d6919 000d5b23     ._..._...i..#[..
   d7c64:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d7c74:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d7c84:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d7c94:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d7ca4:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d7cb4:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d7cc4:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d7cd4:	25007265 75303130 205d0020 00202c00     er.%010u .] ., .
   d7ce4:	203a2928 005b2000 65646f63 00203d20     (): . [.code = .
   d7cf4:	64006925 69617465 3d20736c 0a0d0020     %i.details = ...
   d7d04:	006e6c00 63006e66 0065646f 61746564     .ln.fn.code.deta
   d7d14:	6e006c69 00656e6f 63617274 6e690065     il.none.trace.in
   d7d24:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
   d7d34:	0063696e 006c6c61                       nic.all.

000d7d3c <_ZTVN5spark16StreamLogHandlerE>:
	...
   d7d44:	000d5f91 000d5fa9 000d6765 000d40cf     ._..._..eg...@..

000d7d54 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d7d5c:	000d5b3f 000d5b75 000d668d 000d5b25     ?[..u[...f..%[..

000d7d6c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d7d74:	000d5b3d 000d5b83 000d5ed5 000d5b91     =[...[...^...[..

000d7d84 <_ZTVN5spark9MeshClassE>:
	...
   d7d8c:	000d6aef 000d6ae5 000d6adb 000d6ad1     .j...j...j...j..
   d7d9c:	000d6ac5 000d6ab9 000d6aad 000d6aa5     .j...j...j...j..
   d7dac:	000d6a9b 000d6a91 000d6c75              .j...j..ul..

000d7db8 <_ZTVN5spark12NetworkClassE>:
	...
   d7dc0:	000d6c0d 000d6c17 000d6c21 000d6c2b     .l...l..!l..+l..
   d7dd0:	000d6c35 000d6c41 000d6c4d 000d6c59     5l..Al..Ml..Yl..
   d7de0:	000d6c61 000d6c6b 000d6c75 2b25005a     al..kl..ul..Z.%+
   d7df0:	3a643330 75323025 2d592500 252d6d25     03d:%02u.%Y-%m-%
   d7e00:	48255464 3a4d253a 7a255325 63736100     dT%H:%M:%S%z.asc
   d7e10:	656d6974 00000000                       time....

000d7e18 <_ZTV11USARTSerial>:
	...
   d7e20:	000d700d 000d705d 000d706b 000d6d55     .p..]p..kp..Um..
   d7e30:	000d7021 000d7043 000d702f 000d7057     !p..Cp../p..Wp..
   d7e40:	000d700f 000d7013                       .p...p..

000d7e48 <_ZTV9USBSerial>:
	...
   d7e50:	000d7121 000d7171 000d717f 000d6d55     !q..qq...q..Um..
   d7e60:	000d715d 000d7123 000d7139 000d716b     ]q..#q..9q..kq..
   d7e70:	000d714f 000d711d                       Oq...q..

000d7e78 <_ZTVN5spark9WiFiClassE>:
	...
   d7e80:	000d7293 000d7289 000d727f 000d7235     .r...r...r..5r..
   d7e90:	000d7273 000d7267 000d725b 000d7253     sr..gr..[r..Sr..
   d7ea0:	000d7249 000d723f 000d6c75              Ir..?r..ul..

000d7eac <_ZSt7nothrow>:
	...

000d7ead <_ctype_>:
   d7ead:	20202000 20202020 28282020 20282828     .         ((((( 
   d7ebd:	20202020 20202020 20202020 20202020                     
   d7ecd:	10108820 10101010 10101010 10101010      ...............
   d7edd:	04040410 04040404 10040404 10101010     ................
   d7eed:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7efd:	01010101 01010101 01010101 10101010     ................
   d7f0d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7f1d:	02020202 02020202 02020202 10101010     ................
   d7f2d:	00000020 00000000 00000000 00000000      ...............
	...

000d7fb0 <__sf_fake_stdin>:
	...

000d7fd0 <__sf_fake_stdout>:
	...

000d7ff0 <__sf_fake_stderr>:
	...
   d8010:	00000043                                         C.

000d8012 <link_const_variable_data_end>:
	...

000d8014 <link_constructors_location>:
   d8014:	000d4535 	.word	0x000d4535
   d8018:	000d55f5 	.word	0x000d55f5
   d801c:	000d5699 	.word	0x000d5699
   d8020:	000d6755 	.word	0x000d6755
   d8024:	000d6bbd 	.word	0x000d6bbd
   d8028:	000d6d41 	.word	0x000d6d41
   d802c:	000d6e81 	.word	0x000d6e81
   d8030:	000d6fc5 	.word	0x000d6fc5
   d8034:	000d6ff9 	.word	0x000d6ff9
   d8038:	000d729d 	.word	0x000d729d
   d803c:	000d7401 	.word	0x000d7401
   d8040:	000d74c5 	.word	0x000d74c5
   d8044:	000d7549 	.word	0x000d7549
   d8048:	000d75cd 	.word	0x000d75cd

000d804c <link_constructors_end>:
   d804c:	00000000 	.word	0x00000000
